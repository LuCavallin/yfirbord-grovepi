
/Users/luca/Projects/hytta/target/hytta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003168  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a3180  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000090  20000300  080a3184  00020300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000082c  20000390  20000390  00030390  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a3214  080a3214  00023214  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a323c  080a323c  0002323c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000c5807  00000000  00000000  00023240  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00012286  00000000  00000000  000e8a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000132a7  00000000  00000000  000faccd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000021e0  00000000  00000000  0010df74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003868  00000000  00000000  00110154  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002afb4  00000000  00000000  001139bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00029b0a  00000000  00000000  0013e970  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a1489  00000000  00000000  0016847a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000bb28  00000000  00000000  00209904  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	e8 28 0a 08                                         .(..

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 fb69 	bl	80a2704 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 fb6e 	bl	80a271a <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a3184 	.word	0x080a3184
 80a004c:	20000390 	.word	0x20000390
 80a0050:	20000390 	.word	0x20000390
 80a0054:	20000bbc 	.word	0x20000bbc
 80a0058:	20000bbc 	.word	0x20000bbc

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 fe01 	bl	80a1c64 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a3138 	.word	0x080a3138
 80a0084:	080a317c 	.word	0x080a317c

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 bb9e 	b.w	80a07c8 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 fd07 	bl	80a0aa0 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 bda7 	b.w	80a1be8 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f001 b83f 	b.w	80a111c <malloc>

080a009e <_ZdlPv>:
 80a009e:	f001 b845 	b.w	80a112c <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
 80a00b4:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a00b6:	f000 fe83 	bl	80a0dc0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a00ba:	4b03      	ldr	r3, [pc, #12]	; (80a00c8 <_ZN10CloudClass7processEv+0x14>)
 80a00bc:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
 80a00be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80a00c2:	f001 b813 	b.w	80a10ec <spark_process>
 80a00c6:	bf00      	nop
 80a00c8:	20000ac8 	.word	0x20000ac8

080a00cc <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a00cc:	b538      	push	{r3, r4, r5, lr}
 80a00ce:	4b0b      	ldr	r3, [pc, #44]	; (80a00fc <_ZN9TCPClientD1Ev+0x30>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a00d0:	6984      	ldr	r4, [r0, #24]
 80a00d2:	4605      	mov	r5, r0
 80a00d4:	6003      	str	r3, [r0, #0]
 80a00d6:	b17c      	cbz	r4, 80a00f8 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a00d8:	6863      	ldr	r3, [r4, #4]
 80a00da:	3b01      	subs	r3, #1
 80a00dc:	6063      	str	r3, [r4, #4]
 80a00de:	b95b      	cbnz	r3, 80a00f8 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
 80a00e0:	6823      	ldr	r3, [r4, #0]
 80a00e2:	4620      	mov	r0, r4
 80a00e4:	689b      	ldr	r3, [r3, #8]
 80a00e6:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a00e8:	68a3      	ldr	r3, [r4, #8]
 80a00ea:	3b01      	subs	r3, #1
 80a00ec:	60a3      	str	r3, [r4, #8]
 80a00ee:	b91b      	cbnz	r3, 80a00f8 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a00f0:	6823      	ldr	r3, [r4, #0]
 80a00f2:	4620      	mov	r0, r4
 80a00f4:	68db      	ldr	r3, [r3, #12]
 80a00f6:	4798      	blx	r3
 80a00f8:	4628      	mov	r0, r5
 80a00fa:	bd38      	pop	{r3, r4, r5, pc}
 80a00fc:	080a2ed8 	.word	0x080a2ed8

080a0100 <_ZN22BlynkTransportParticleD1Ev>:
#define BlynkParticle_h

#include "BlynkApiParticle.h"
#include "Blynk/BlynkProtocol.h"

class BlynkTransportParticle
 80a0100:	b510      	push	{r4, lr}
 80a0102:	4604      	mov	r4, r0
 80a0104:	f7ff ffe2 	bl	80a00cc <_ZN9TCPClientD1Ev>
 80a0108:	4620      	mov	r0, r4
 80a010a:	bd10      	pop	{r4, pc}

080a010c <_ZN9TCPClientD0Ev>:
 80a010c:	b510      	push	{r4, lr}
 80a010e:	4604      	mov	r4, r0
 80a0110:	f7ff ffdc 	bl	80a00cc <_ZN9TCPClientD1Ev>
 80a0114:	4620      	mov	r0, r4
 80a0116:	f7ff ffc2 	bl	80a009e <_ZdlPv>
 80a011a:	4620      	mov	r0, r4
 80a011c:	bd10      	pop	{r4, pc}

080a011e <_ZNK10BlynkParam8iterator5asIntEv>:
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
 80a011e:	6803      	ldr	r3, [r0, #0]
 80a0120:	b12b      	cbz	r3, 80a012e <_ZNK10BlynkParam8iterator5asIntEv+0x10>
 80a0122:	6842      	ldr	r2, [r0, #4]
 80a0124:	4293      	cmp	r3, r2
 80a0126:	d202      	bcs.n	80a012e <_ZNK10BlynkParam8iterator5asIntEv+0x10>

        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
 80a0128:	4618      	mov	r0, r3
 80a012a:	f002 bad5 	b.w	80a26d8 <atoi>
 80a012e:	2000      	movs	r0, #0
 80a0130:	4770      	bx	lr

080a0132 <_ZN10BlynkParam8iteratorppEv>:
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
 80a0132:	b538      	push	{r3, r4, r5, lr}
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
 80a0134:	6805      	ldr	r5, [r0, #0]
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
 80a0136:	4604      	mov	r4, r0
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
 80a0138:	b145      	cbz	r5, 80a014c <_ZN10BlynkParam8iteratorppEv+0x1a>
 80a013a:	6843      	ldr	r3, [r0, #4]
 80a013c:	429d      	cmp	r5, r3
 80a013e:	d205      	bcs.n	80a014c <_ZN10BlynkParam8iteratorppEv+0x1a>
        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
            if(isValid()) {
                ptr += strlen(ptr) + 1;
 80a0140:	4628      	mov	r0, r5
 80a0142:	f002 fb25 	bl	80a2790 <strlen>
 80a0146:	3001      	adds	r0, #1
 80a0148:	4405      	add	r5, r0
 80a014a:	6025      	str	r5, [r4, #0]
            }
            return *this;
        }
 80a014c:	4620      	mov	r0, r4
 80a014e:	bd38      	pop	{r3, r4, r5, pc}

080a0150 <_ZN10BlynkParam3addEPKvj>:
    return iterator::invalid();
}

inline
void BlynkParam::add(const void* b, size_t l)
{
 80a0150:	b570      	push	{r4, r5, r6, lr}
    if (len + l > buff_size)
 80a0152:	6843      	ldr	r3, [r0, #4]
    return iterator::invalid();
}

inline
void BlynkParam::add(const void* b, size_t l)
{
 80a0154:	4604      	mov	r4, r0
    if (len + l > buff_size)
 80a0156:	6880      	ldr	r0, [r0, #8]
 80a0158:	189e      	adds	r6, r3, r2
 80a015a:	4286      	cmp	r6, r0
    return iterator::invalid();
}

inline
void BlynkParam::add(const void* b, size_t l)
{
 80a015c:	4615      	mov	r5, r2
    if (len + l > buff_size)
 80a015e:	d806      	bhi.n	80a016e <_ZN10BlynkParam3addEPKvj+0x1e>
        return;
    memcpy(buff+len, b, l);
 80a0160:	6820      	ldr	r0, [r4, #0]
 80a0162:	4418      	add	r0, r3
 80a0164:	f002 face 	bl	80a2704 <memcpy>
    len += l;
 80a0168:	6863      	ldr	r3, [r4, #4]
 80a016a:	441d      	add	r5, r3
 80a016c:	6065      	str	r5, [r4, #4]
 80a016e:	bd70      	pop	{r4, r5, r6, pc}

080a0170 <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
 80a0170:	b570      	push	{r4, r5, r6, lr}
 80a0172:	4604      	mov	r4, r0
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
 80a0174:	6840      	ldr	r0, [r0, #4]
 80a0176:	68a6      	ldr	r6, [r4, #8]
 80a0178:	6825      	ldr	r5, [r4, #0]
 80a017a:	460b      	mov	r3, r1
 80a017c:	4a04      	ldr	r2, [pc, #16]	; (80a0190 <_ZN10BlynkParam3addEi+0x20>)
 80a017e:	1a31      	subs	r1, r6, r0
 80a0180:	4428      	add	r0, r5
 80a0182:	f000 ffdb 	bl	80a113c <snprintf>
 80a0186:	6863      	ldr	r3, [r4, #4]
 80a0188:	3001      	adds	r0, #1
 80a018a:	4418      	add	r0, r3
 80a018c:	6060      	str	r0, [r4, #4]
 80a018e:	bd70      	pop	{r4, r5, r6, pc}
 80a0190:	080a2956 	.word	0x080a2956

080a0194 <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
 80a0194:	b570      	push	{r4, r5, r6, lr}
 80a0196:	4604      	mov	r4, r0
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
 80a0198:	6840      	ldr	r0, [r0, #4]
 80a019a:	68a6      	ldr	r6, [r4, #8]
 80a019c:	6825      	ldr	r5, [r4, #0]
 80a019e:	460b      	mov	r3, r1
 80a01a0:	4a04      	ldr	r2, [pc, #16]	; (80a01b4 <_ZN10BlynkParam3addEl+0x20>)
 80a01a2:	1a31      	subs	r1, r6, r0
 80a01a4:	4428      	add	r0, r5
 80a01a6:	f000 ffc9 	bl	80a113c <snprintf>
 80a01aa:	6863      	ldr	r3, [r4, #4]
 80a01ac:	3001      	adds	r0, #1
 80a01ae:	4418      	add	r0, r3
 80a01b0:	6060      	str	r0, [r4, #4]
 80a01b2:	bd70      	pop	{r4, r5, r6, pc}
 80a01b4:	080a2959 	.word	0x080a2959

080a01b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
 80a01b8:	b508      	push	{r3, lr}
        state = CONNECTING;
 80a01ba:	2300      	movs	r3, #0
 80a01bc:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
 80a01be:	6800      	ldr	r0, [r0, #0]
 80a01c0:	f001 fa68 	bl	80a1694 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
 80a01c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
private:

    void internalReconnect() {
        state = CONNECTING;
        conn.disconnect();
        BlynkOnDisconnected();
 80a01c8:	f000 bcbc 	b.w	80a0b44 <BlynkNoOpCbk>

080a01cc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
 80a01cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
 80a01d0:	188e      	adds	r6, r1, r2
 80a01d2:	b08e      	sub	sp, #56	; 0x38
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
 80a01d4:	42b1      	cmp	r1, r6
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
 80a01d6:	4680      	mov	r8, r0
 80a01d8:	460d      	mov	r5, r1
 80a01da:	4617      	mov	r7, r2
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
 80a01dc:	9105      	str	r1, [sp, #20]
 80a01de:	9606      	str	r6, [sp, #24]
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
 80a01e0:	f080 80ee 	bcs.w	80a03c0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
 80a01e4:	880b      	ldrh	r3, [r1, #0]
    if (++it >= param.end())
 80a01e6:	a805      	add	r0, sp, #20
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
 80a01e8:	f8ad 3012 	strh.w	r3, [sp, #18]
    if (++it >= param.end())
 80a01ec:	f7ff ffa1 	bl	80a0132 <_ZN10BlynkParam8iteratorppEv>
 80a01f0:	6803      	ldr	r3, [r0, #0]
 80a01f2:	429e      	cmp	r6, r3
 80a01f4:	f240 80e4 	bls.w	80a03c0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>
        return;

    uint8_t pin = BLYNK_DECODE_PIN(it);
 80a01f8:	a805      	add	r0, sp, #20
 80a01fa:	f7ff ff90 	bl	80a011e <_ZNK10BlynkParam8iterator5asIntEv>

    switch(cmd16) {
 80a01fe:	f247 2276 	movw	r2, #29302	; 0x7276
 80a0202:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
        return;

    uint8_t pin = BLYNK_DECODE_PIN(it);
 80a0206:	b2c4      	uxtb	r4, r0

    switch(cmd16) {
 80a0208:	4293      	cmp	r3, r2
 80a020a:	f000 80a0 	beq.w	80a034e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x182>
 80a020e:	d80d      	bhi.n	80a022c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x60>
 80a0210:	f247 2261 	movw	r2, #29281	; 0x7261
 80a0214:	4293      	cmp	r3, r2
 80a0216:	d065      	beq.n	80a02e4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x118>
 80a0218:	f247 2264 	movw	r2, #29284	; 0x7264
 80a021c:	4293      	cmp	r3, r2
 80a021e:	d039      	beq.n	80a0294 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc8>
 80a0220:	f646 5270 	movw	r2, #28016	; 0x6d70
 80a0224:	4293      	cmp	r3, r2
 80a0226:	f040 80bd 	bne.w	80a03a4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1d8>
 80a022a:	e02f      	b.n	80a028c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc0>
 80a022c:	f247 7264 	movw	r2, #30564	; 0x7764
 80a0230:	4293      	cmp	r3, r2
 80a0232:	d042      	beq.n	80a02ba <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xee>
 80a0234:	f247 7276 	movw	r2, #30582	; 0x7776
 80a0238:	4293      	cmp	r3, r2
 80a023a:	f000 8099 	beq.w	80a0370 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a4>
 80a023e:	f247 7261 	movw	r2, #30561	; 0x7761
 80a0242:	4293      	cmp	r3, r2
 80a0244:	f040 80ae 	bne.w	80a03a4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1d8>
 80a0248:	e06e      	b.n	80a0328 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x15c>

#ifndef BLYNK_NO_BUILTIN

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            pin = BLYNK_DECODE_PIN(it);
 80a024a:	a805      	add	r0, sp, #20
 80a024c:	f7ff ff67 	bl	80a011e <_ZNK10BlynkParam8iterator5asIntEv>
 80a0250:	b2c5      	uxtb	r5, r0
            ++it;
 80a0252:	a805      	add	r0, sp, #20
 80a0254:	f7ff ff6d 	bl	80a0132 <_ZN10BlynkParam8iteratorppEv>
 80a0258:	9c05      	ldr	r4, [sp, #20]
            if (!strcmp(it.asStr(), "in")) {
 80a025a:	495b      	ldr	r1, [pc, #364]	; (80a03c8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fc>)
 80a025c:	4620      	mov	r0, r4
 80a025e:	f002 fa8d 	bl	80a277c <strcmp>
 80a0262:	4601      	mov	r1, r0
 80a0264:	2800      	cmp	r0, #0
 80a0266:	f000 80a7 	beq.w	80a03b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ec>
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
 80a026a:	4958      	ldr	r1, [pc, #352]	; (80a03cc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x200>)
 80a026c:	4620      	mov	r0, r4
 80a026e:	f002 fa85 	bl	80a277c <strcmp>
 80a0272:	2800      	cmp	r0, #0
 80a0274:	f000 809f 	beq.w	80a03b6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ea>
 80a0278:	4955      	ldr	r1, [pc, #340]	; (80a03d0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x204>)
 80a027a:	4620      	mov	r0, r4
 80a027c:	f002 fa7e 	bl	80a277c <strcmp>
 80a0280:	2800      	cmp	r0, #0
 80a0282:	f000 8098 	beq.w	80a03b6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ea>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
 80a0286:	a805      	add	r0, sp, #20
 80a0288:	f7ff ff53 	bl	80a0132 <_ZN10BlynkParam8iteratorppEv>
    switch(cmd16) {

#ifndef BLYNK_NO_BUILTIN

    case BLYNK_HW_PM: {
        while (it < param.end()) {
 80a028c:	9b05      	ldr	r3, [sp, #20]
 80a028e:	429e      	cmp	r6, r3
 80a0290:	d8db      	bhi.n	80a024a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x7e>
 80a0292:	e095      	b.n	80a03c0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a0294:	ab0a      	add	r3, sp, #40	; 0x28
 80a0296:	9307      	str	r3, [sp, #28]
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
 80a0298:	2203      	movs	r2, #3
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a029a:	2310      	movs	r3, #16
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
 80a029c:	a807      	add	r0, sp, #28
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a029e:	2500      	movs	r5, #0
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
 80a02a0:	494c      	ldr	r1, [pc, #304]	; (80a03d4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x208>)
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a02a2:	9309      	str	r3, [sp, #36]	; 0x24
 80a02a4:	9508      	str	r5, [sp, #32]
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
 80a02a6:	f7ff ff53 	bl	80a0150 <_ZN10BlynkParam3addEPKvj>
    } break;
    case BLYNK_HW_DR: {
        char mem[16];
        BlynkParam rsp(mem, 0, sizeof(mem));
        rsp.add("dw");
        rsp.add(pin);
 80a02aa:	a807      	add	r0, sp, #28
 80a02ac:	4621      	mov	r1, r4
 80a02ae:	f7ff ff5f 	bl	80a0170 <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
 80a02b2:	4620      	mov	r0, r4
 80a02b4:	f001 fd50 	bl	80a1d58 <digitalRead>
 80a02b8:	e026      	b.n	80a0308 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13c>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
    } break;
    case BLYNK_HW_DW: {
        // Should be 1 parameter (value)
        if (++it >= param.end())
 80a02ba:	a805      	add	r0, sp, #20
 80a02bc:	f7ff ff39 	bl	80a0132 <_ZN10BlynkParam8iteratorppEv>
 80a02c0:	6803      	ldr	r3, [r0, #0]
 80a02c2:	429e      	cmp	r6, r3
 80a02c4:	d97c      	bls.n	80a03c0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>
#ifdef ESP8266
        // Disable PWM...
        analogWrite(pin, 0);
#endif
#ifndef BLYNK_MINIMIZE_PINMODE_USAGE
        pinMode(pin, OUTPUT);
 80a02c6:	b2a4      	uxth	r4, r4
 80a02c8:	2101      	movs	r1, #1
 80a02ca:	4620      	mov	r0, r4
 80a02cc:	f001 fd1a 	bl	80a1d04 <pinMode>
#endif
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
 80a02d0:	a805      	add	r0, sp, #20
 80a02d2:	f7ff ff24 	bl	80a011e <_ZNK10BlynkParam8iterator5asIntEv>
 80a02d6:	1c01      	adds	r1, r0, #0
 80a02d8:	bf18      	it	ne
 80a02da:	2101      	movne	r1, #1
 80a02dc:	4620      	mov	r0, r4
 80a02de:	f001 fd22 	bl	80a1d26 <digitalWrite>
    } break;
 80a02e2:	e06d      	b.n	80a03c0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a02e4:	ab0a      	add	r3, sp, #40	; 0x28
 80a02e6:	9307      	str	r3, [sp, #28]
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
 80a02e8:	2203      	movs	r2, #3
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a02ea:	2310      	movs	r3, #16
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
 80a02ec:	493a      	ldr	r1, [pc, #232]	; (80a03d8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x20c>)
 80a02ee:	a807      	add	r0, sp, #28
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a02f0:	2500      	movs	r5, #0
 80a02f2:	9309      	str	r3, [sp, #36]	; 0x24
 80a02f4:	9508      	str	r5, [sp, #32]
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
 80a02f6:	f7ff ff2b 	bl	80a0150 <_ZN10BlynkParam3addEPKvj>
    case BLYNK_HW_AR: {
        char mem[16];
        BlynkParam rsp(mem, 0, sizeof(mem));
        rsp.add("aw");
        rsp.add(pin);
 80a02fa:	a807      	add	r0, sp, #28
 80a02fc:	4621      	mov	r1, r4
 80a02fe:	f7ff ff37 	bl	80a0170 <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
 80a0302:	4620      	mov	r0, r4
 80a0304:	f001 fd3b 	bl	80a1d7e <analogRead>
 80a0308:	4601      	mov	r1, r0
 80a030a:	a807      	add	r0, sp, #28
 80a030c:	f7ff ff42 	bl	80a0194 <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
 80a0310:	462a      	mov	r2, r5
 80a0312:	9b08      	ldr	r3, [sp, #32]
 80a0314:	9502      	str	r5, [sp, #8]
 80a0316:	3b01      	subs	r3, #1
 80a0318:	9300      	str	r3, [sp, #0]
 80a031a:	9b07      	ldr	r3, [sp, #28]
 80a031c:	9501      	str	r5, [sp, #4]
 80a031e:	2114      	movs	r1, #20
 80a0320:	4640      	mov	r0, r8
 80a0322:	f000 faa9 	bl	80a0878 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    } break;
 80a0326:	e04b      	b.n	80a03c0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>
    case BLYNK_HW_AW: {
        // Should be 1 parameter (value)
        if (++it >= param.end())
 80a0328:	a805      	add	r0, sp, #20
 80a032a:	f7ff ff02 	bl	80a0132 <_ZN10BlynkParam8iteratorppEv>
 80a032e:	6803      	ldr	r3, [r0, #0]
 80a0330:	429e      	cmp	r6, r3
 80a0332:	d945      	bls.n	80a03c0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>
            return;

#ifndef BLYNK_MINIMIZE_PINMODE_USAGE
        pinMode(pin, OUTPUT);
 80a0334:	b2a4      	uxth	r4, r4
 80a0336:	2101      	movs	r1, #1
 80a0338:	4620      	mov	r0, r4
 80a033a:	f001 fce3 	bl	80a1d04 <pinMode>
#endif
        analogWrite(pin, it.asInt());
 80a033e:	a805      	add	r0, sp, #20
 80a0340:	f7ff feed 	bl	80a011e <_ZNK10BlynkParam8iterator5asIntEv>
 80a0344:	4601      	mov	r1, r0
 80a0346:	4620      	mov	r0, r4
 80a0348:	f001 fd30 	bl	80a1dac <_Z11analogWritetm>
    } break;
 80a034c:	e038      	b.n	80a03c0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>

#endif

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
 80a034e:	ad0e      	add	r5, sp, #56	; 0x38
        WidgetReadHandler handler = GetReadHandler(pin);
 80a0350:	4620      	mov	r0, r4
    } break;

#endif

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
 80a0352:	f805 4d10 	strb.w	r4, [r5, #-16]!
        WidgetReadHandler handler = GetReadHandler(pin);
 80a0356:	f000 fbf7 	bl	80a0b48 <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
 80a035a:	4603      	mov	r3, r0
            handler(req);
 80a035c:	4628      	mov	r0, r5
#endif

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
        WidgetReadHandler handler = GetReadHandler(pin);
        if (handler && (handler != BlynkWidgetRead)) {
 80a035e:	b123      	cbz	r3, 80a036a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19e>
 80a0360:	4a1e      	ldr	r2, [pc, #120]	; (80a03dc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x210>)
 80a0362:	4293      	cmp	r3, r2
 80a0364:	d001      	beq.n	80a036a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19e>
            handler(req);
 80a0366:	4798      	blx	r3
 80a0368:	e02a      	b.n	80a03c0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>
        } else {
            BlynkWidgetReadDefault(req);
 80a036a:	f000 fbe9 	bl	80a0b40 <BlynkWidgetRead>
        }
    } break;
 80a036e:	e027      	b.n	80a03c0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>
    case BLYNK_HW_VW: {
        ++it;
 80a0370:	a805      	add	r0, sp, #20
 80a0372:	f7ff fede 	bl	80a0132 <_ZN10BlynkParam8iteratorppEv>
 80a0376:	9b05      	ldr	r3, [sp, #20]
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
        BlynkReq req = { pin };
        WidgetWriteHandler handler = GetWriteHandler(pin);
 80a0378:	4620      	mov	r0, r4
        }
    } break;
    case BLYNK_HW_VW: {
        ++it;
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
 80a037a:	1b5d      	subs	r5, r3, r5
 80a037c:	1b7d      	subs	r5, r7, r5
    };

public:
    explicit
    BlynkParam(const void* addr, size_t length)
        : buff((char*)addr), len(length), buff_size(length)
 80a037e:	930a      	str	r3, [sp, #40]	; 0x28
 80a0380:	950b      	str	r5, [sp, #44]	; 0x2c
 80a0382:	950c      	str	r5, [sp, #48]	; 0x30
        BlynkReq req = { pin };
 80a0384:	f88d 401c 	strb.w	r4, [sp, #28]
        WidgetWriteHandler handler = GetWriteHandler(pin);
 80a0388:	f000 fbe8 	bl	80a0b5c <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
 80a038c:	4603      	mov	r3, r0
            handler(req, param2);
 80a038e:	a90a      	add	r1, sp, #40	; 0x28
 80a0390:	a807      	add	r0, sp, #28
        ++it;
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
        BlynkReq req = { pin };
        WidgetWriteHandler handler = GetWriteHandler(pin);
        if (handler && (handler != BlynkWidgetWrite)) {
 80a0392:	b123      	cbz	r3, 80a039e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1d2>
 80a0394:	4a12      	ldr	r2, [pc, #72]	; (80a03e0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x214>)
 80a0396:	4293      	cmp	r3, r2
 80a0398:	d001      	beq.n	80a039e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1d2>
            handler(req, param2);
 80a039a:	4798      	blx	r3
 80a039c:	e010      	b.n	80a03c0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>
        } else {
            BlynkWidgetWriteDefault(req, param2);
 80a039e:	f000 fbd0 	bl	80a0b42 <BlynkWidgetWrite>
        }
    } break;
 80a03a2:	e00d      	b.n	80a03c0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
 80a03a4:	2300      	movs	r3, #0
 80a03a6:	2102      	movs	r1, #2
 80a03a8:	9100      	str	r1, [sp, #0]
 80a03aa:	f8b8 201a 	ldrh.w	r2, [r8, #26]
 80a03ae:	9302      	str	r3, [sp, #8]
 80a03b0:	9301      	str	r3, [sp, #4]
 80a03b2:	4619      	mov	r1, r3
 80a03b4:	e7b4      	b.n	80a0320 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x154>
            pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
                pinMode(pin, OUTPUT);
 80a03b6:	2101      	movs	r1, #1
 80a03b8:	4628      	mov	r0, r5
 80a03ba:	f001 fca3 	bl	80a1d04 <pinMode>
 80a03be:	e762      	b.n	80a0286 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xba>
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
    }
}
 80a03c0:	b00e      	add	sp, #56	; 0x38
 80a03c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a03c6:	bf00      	nop
 80a03c8:	080a295d 	.word	0x080a295d
 80a03cc:	080a2960 	.word	0x080a2960
 80a03d0:	080a2964 	.word	0x080a2964
 80a03d4:	080a2968 	.word	0x080a2968
 80a03d8:	080a296b 	.word	0x080a296b
 80a03dc:	080a0b41 	.word	0x080a0b41
 80a03e0:	080a0b43 	.word	0x080a0b43

080a03e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
 80a03e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a03e8:	b08e      	sub	sp, #56	; 0x38
 80a03ea:	af04      	add	r7, sp, #16
 80a03ec:	4605      	mov	r5, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
 80a03ee:	2205      	movs	r2, #5
 80a03f0:	f107 010c 	add.w	r1, r7, #12
 80a03f4:	6800      	ldr	r0, [r0, #0]
 80a03f6:	f000 ffe5 	bl	80a13c4 <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
 80a03fa:	2800      	cmp	r0, #0
 80a03fc:	f000 8119 	beq.w	80a0632 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24e>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
 80a0400:	2805      	cmp	r0, #5
 80a0402:	d001      	beq.n	80a0408 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>

    if (ret < 0 || hdr.msg_id == 0) {
#ifdef BLYNK_DEBUG
        BLYNK_LOG2(BLYNK_F("Bad hdr len: "), ret);
#endif
        return false;
 80a0404:	2000      	movs	r0, #0
 80a0406:	e119      	b.n	80a063c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x258>
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
 80a0408:	f8b7 200d 	ldrh.w	r2, [r7, #13]
    hdr.length = ntohs(hdr.length);
 80a040c:	f8b7 400f 	ldrh.w	r4, [r7, #15]
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
 80a0410:	0a13      	lsrs	r3, r2, #8
 80a0412:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    hdr.length = ntohs(hdr.length);
 80a0416:	0a23      	lsrs	r3, r4, #8
 80a0418:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
 80a041c:	b292      	uxth	r2, r2
    hdr.length = ntohs(hdr.length);
 80a041e:	b2a4      	uxth	r4, r4
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
 80a0420:	f8a7 200d 	strh.w	r2, [r7, #13]
    hdr.length = ntohs(hdr.length);
 80a0424:	f8a7 400f 	strh.w	r4, [r7, #15]

    if (ret == 0) {
        return true; // Considered OK (no data on input)
    }

    if (ret < 0 || hdr.msg_id == 0) {
 80a0428:	2a00      	cmp	r2, #0
 80a042a:	d0eb      	beq.n	80a0404 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x20>
        BLYNK_LOG2(BLYNK_F("Bad hdr len: "), ret);
#endif
        return false;
    }

    if (hdr.type == BLYNK_CMD_RESPONSE) {
 80a042c:	7b3b      	ldrb	r3, [r7, #12]
 80a042e:	b9f3      	cbnz	r3, 80a046e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8a>
        lastActivityIn = BlynkMillis();
 80a0430:	f000 fb82 	bl	80a0b38 <_Z11BlynkMillisv>

#ifndef BLYNK_USE_DIRECT_CONNECT
        if (state == CONNECTING && (1 == hdr.msg_id)) {
 80a0434:	7f6b      	ldrb	r3, [r5, #29]
#endif
        return false;
    }

    if (hdr.type == BLYNK_CMD_RESPONSE) {
        lastActivityIn = BlynkMillis();
 80a0436:	60e8      	str	r0, [r5, #12]
 80a0438:	f8b7 200f 	ldrh.w	r2, [r7, #15]

#ifndef BLYNK_USE_DIRECT_CONNECT
        if (state == CONNECTING && (1 == hdr.msg_id)) {
 80a043c:	b99b      	cbnz	r3, 80a0466 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
 80a043e:	f8b7 100d 	ldrh.w	r1, [r7, #13]
 80a0442:	2901      	cmp	r1, #1
 80a0444:	d10f      	bne.n	80a0466 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
            switch (hdr.length) {
 80a0446:	2a04      	cmp	r2, #4
 80a0448:	d001      	beq.n	80a044e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x6a>
 80a044a:	2ac8      	cmp	r2, #200	; 0xc8
 80a044c:	d1da      	bne.n	80a0404 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x20>
            case BLYNK_SUCCESS:
            case BLYNK_ALREADY_REGISTERED:
                BLYNK_LOG3(BLYNK_F("Ready (ping: "), lastActivityIn-lastHeartbeat, BLYNK_F("ms)."));
                lastHeartbeat = lastActivityIn;
                state = CONNECTED;
 80a044e:	2401      	movs	r4, #1
        if (state == CONNECTING && (1 == hdr.msg_id)) {
            switch (hdr.length) {
            case BLYNK_SUCCESS:
            case BLYNK_ALREADY_REGISTERED:
                BLYNK_LOG3(BLYNK_F("Ready (ping: "), lastActivityIn-lastHeartbeat, BLYNK_F("ms)."));
                lastHeartbeat = lastActivityIn;
 80a0450:	6168      	str	r0, [r5, #20]
                state = CONNECTED;
 80a0452:	776c      	strb	r4, [r5, #29]
#ifdef BLYNK_DEBUG
                if (size_t ram = BlynkFreeRam()) {
                    BLYNK_LOG2(BLYNK_F("Free RAM: "), ram);
                }
#endif
                this->sendInfo();
 80a0454:	4628      	mov	r0, r5
 80a0456:	f000 fac7 	bl	80a09e8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
 80a045a:	f7ff fe2b 	bl	80a00b4 <_ZN10CloudClass7processEv>
                BlynkOnConnected();
 80a045e:	f000 fb71 	bl	80a0b44 <BlynkNoOpCbk>
                return true;
 80a0462:	4620      	mov	r0, r4
 80a0464:	e0ea      	b.n	80a063c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x258>
            default:
                BLYNK_LOG2(BLYNK_F("Connect failed. code: "), hdr.length);
            }
            return false;
        }
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
 80a0466:	1f50      	subs	r0, r2, #5
 80a0468:	bf18      	it	ne
 80a046a:	2001      	movne	r0, #1
 80a046c:	e0e6      	b.n	80a063c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x258>
#endif
        // TODO: return code may indicate App presence
        return true;
    }

    if (hdr.length > BLYNK_MAX_READBYTES) {
 80a046e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80a0472:	d903      	bls.n	80a047c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x98>
        BLYNK_LOG2(BLYNK_F("Packet too big: "), hdr.length);
        // TODO: Flush
        internalReconnect();
 80a0474:	4628      	mov	r0, r5
 80a0476:	f7ff fe9f 	bl	80a01b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
 80a047a:	e0da      	b.n	80a0632 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24e>
        return true;
    }

    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
 80a047c:	f104 0308 	add.w	r3, r4, #8
 80a0480:	f023 0307 	bic.w	r3, r3, #7
 80a0484:	46e8      	mov	r8, sp
 80a0486:	ebad 0d03 	sub.w	sp, sp, r3
 80a048a:	ae04      	add	r6, sp, #16
 80a048c:	4622      	mov	r2, r4
 80a048e:	4631      	mov	r1, r6
 80a0490:	6828      	ldr	r0, [r5, #0]
 80a0492:	f000 ff97 	bl	80a13c4 <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
 80a0496:	4284      	cmp	r4, r0
 80a0498:	f04f 0400 	mov.w	r4, #0
 80a049c:	f040 80c4 	bne.w	80a0628 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x244>
#ifdef BLYNK_DEBUG
        BLYNK_LOG1(BLYNK_F("Can't read body"));
#endif
        return false;
    }
    inputBuffer[hdr.length] = '\0';
 80a04a0:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 80a04a4:	54f4      	strb	r4, [r6, r3]

    BLYNK_DBG_DUMP(">", inputBuffer, hdr.length);

    lastActivityIn = BlynkMillis();
 80a04a6:	f000 fb47 	bl	80a0b38 <_Z11BlynkMillisv>

    switch (hdr.type)
 80a04aa:	7b3b      	ldrb	r3, [r7, #12]
    }
    inputBuffer[hdr.length] = '\0';

    BLYNK_DBG_DUMP(">", inputBuffer, hdr.length);

    lastActivityIn = BlynkMillis();
 80a04ac:	60e8      	str	r0, [r5, #12]

    switch (hdr.type)
 80a04ae:	2b11      	cmp	r3, #17
 80a04b0:	d072      	beq.n	80a0598 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b4>
 80a04b2:	d806      	bhi.n	80a04c2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xde>
 80a04b4:	2b06      	cmp	r3, #6
 80a04b6:	d020      	beq.n	80a04fa <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x116>
 80a04b8:	2b0f      	cmp	r3, #15
 80a04ba:	d060      	beq.n	80a057e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x19a>
 80a04bc:	2b02      	cmp	r3, #2
 80a04be:	d009      	beq.n	80a04d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xf0>
 80a04c0:	e0ae      	b.n	80a0620 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
 80a04c2:	2b29      	cmp	r3, #41	; 0x29
 80a04c4:	d025      	beq.n	80a0512 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x12e>
 80a04c6:	2b37      	cmp	r3, #55	; 0x37
 80a04c8:	f000 80b0 	beq.w	80a062c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
 80a04cc:	2b14      	cmp	r3, #20
 80a04ce:	f040 80a7 	bne.w	80a0620 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
 80a04d2:	e054      	b.n	80a057e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x19a>
            BLYNK_LOG1(BLYNK_F("Invalid token"));
            sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_INVALID_TOKEN);
            break;
        }
#endif
        if (state == CONNECTING) {
 80a04d4:	7f6b      	ldrb	r3, [r5, #29]
 80a04d6:	b943      	cbnz	r3, 80a04ea <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x106>
            BLYNK_LOG1(BLYNK_F("Ready"));
            state = CONNECTED;
 80a04d8:	2301      	movs	r3, #1
 80a04da:	776b      	strb	r3, [r5, #29]
#ifdef BLYNK_DEBUG
            if (size_t ram = BlynkFreeRam()) {
                BLYNK_LOG2(BLYNK_F("Free RAM: "), ram);
            }
#endif
            this->sendInfo();
 80a04dc:	4628      	mov	r0, r5
 80a04de:	f000 fa83 	bl	80a09e8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
 80a04e2:	f7ff fde7 	bl	80a00b4 <_ZN10CloudClass7processEv>
            BlynkOnConnected();
 80a04e6:	f000 fb2d 	bl	80a0b44 <BlynkNoOpCbk>
        }
        sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_SUCCESS);
 80a04ea:	2300      	movs	r3, #0
 80a04ec:	21c8      	movs	r1, #200	; 0xc8
 80a04ee:	f8b7 200d 	ldrh.w	r2, [r7, #13]
 80a04f2:	9302      	str	r3, [sp, #8]
 80a04f4:	9301      	str	r3, [sp, #4]
 80a04f6:	9100      	str	r1, [sp, #0]
 80a04f8:	e006      	b.n	80a0508 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x124>
    } break;
    case BLYNK_CMD_PING: {
        sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_SUCCESS);
 80a04fa:	23c8      	movs	r3, #200	; 0xc8
 80a04fc:	f8b7 200d 	ldrh.w	r2, [r7, #13]
 80a0500:	9300      	str	r3, [sp, #0]
 80a0502:	4623      	mov	r3, r4
 80a0504:	9402      	str	r4, [sp, #8]
 80a0506:	9401      	str	r4, [sp, #4]
 80a0508:	4619      	mov	r1, r3
 80a050a:	4628      	mov	r0, r5
 80a050c:	f000 f9b4 	bl	80a0878 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
 80a0510:	e08c      	b.n	80a062c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
    } break;
    case BLYNK_CMD_REDIRECT: {
        if (!redir_serv) {
 80a0512:	68ab      	ldr	r3, [r5, #8]
 80a0514:	b91b      	cbnz	r3, 80a051e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x13a>
             redir_serv = (char*)malloc(32);
 80a0516:	2020      	movs	r0, #32
 80a0518:	f000 fe00 	bl	80a111c <malloc>
 80a051c:	60a8      	str	r0, [r5, #8]
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
 80a051e:	f8b7 400f 	ldrh.w	r4, [r7, #15]
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
 80a0522:	61fe      	str	r6, [r7, #28]
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
 80a0524:	4434      	add	r4, r6
        }
        BlynkParam param(inputBuffer, hdr.length);
        uint16_t redir_port = BLYNK_DEFAULT_PORT; // TODO: Fixit

        BlynkParam::iterator it = param.begin();
        if (it >= param.end())
 80a0526:	42a6      	cmp	r6, r4
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
 80a0528:	623c      	str	r4, [r7, #32]
 80a052a:	d301      	bcc.n	80a0530 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x14c>
            return false;
 80a052c:	2000      	movs	r0, #0
 80a052e:	e07e      	b.n	80a062e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24a>
        strncpy(redir_serv, it.asStr(), 32);
 80a0530:	2220      	movs	r2, #32
 80a0532:	4631      	mov	r1, r6
 80a0534:	68a8      	ldr	r0, [r5, #8]
 80a0536:	f002 f933 	bl	80a27a0 <strncpy>
        if (++it < param.end())
 80a053a:	f107 001c 	add.w	r0, r7, #28
 80a053e:	f7ff fdf8 	bl	80a0132 <_ZN10BlynkParam8iteratorppEv>
 80a0542:	6803      	ldr	r3, [r0, #0]
 80a0544:	42a3      	cmp	r3, r4
 80a0546:	d207      	bcs.n	80a0558 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x174>
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
 80a0548:	69f8      	ldr	r0, [r7, #28]
 80a054a:	b118      	cbz	r0, 80a0554 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x170>
 80a054c:	6a3b      	ldr	r3, [r7, #32]
 80a054e:	4298      	cmp	r0, r3
 80a0550:	d371      	bcc.n	80a0636 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x252>
        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
 80a0552:	2000      	movs	r0, #0
            redir_port = it.asLong();
 80a0554:	b284      	uxth	r4, r0
 80a0556:	e000      	b.n	80a055a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x176>
    case BLYNK_CMD_REDIRECT: {
        if (!redir_serv) {
             redir_serv = (char*)malloc(32);
        }
        BlynkParam param(inputBuffer, hdr.length);
        uint16_t redir_port = BLYNK_DEFAULT_PORT; // TODO: Fixit
 80a0558:	2450      	movs	r4, #80	; 0x50
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
 80a055a:	6828      	ldr	r0, [r5, #0]
 80a055c:	f001 f89a 	bl	80a1694 <_ZN9TCPClient4stopEv>
        strncpy(redir_serv, it.asStr(), 32);
        if (++it < param.end())
            redir_port = it.asLong();
        BLYNK_LOG4(BLYNK_F("Redirecting to "), redir_serv, ':', redir_port);
        conn.disconnect();
        conn.begin(redir_serv, redir_port);
 80a0560:	682b      	ldr	r3, [r5, #0]
 80a0562:	68aa      	ldr	r2, [r5, #8]
        addr = a;
    }

    void begin(const char* d, uint16_t p) {
        domain = d;
        port = p;
 80a0564:	871c      	strh	r4, [r3, #56]	; 0x38
        port = p;
        addr = a;
    }

    void begin(const char* d, uint16_t p) {
        domain = d;
 80a0566:	635a      	str	r2, [r3, #52]	; 0x34
        state = CONNECTING;
 80a0568:	2300      	movs	r3, #0
 80a056a:	776b      	strb	r3, [r5, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
 80a056c:	f000 fae4 	bl	80a0b38 <_Z11BlynkMillisv>
 80a0570:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
 80a0574:	3808      	subs	r0, #8
 80a0576:	6128      	str	r0, [r5, #16]
 80a0578:	60e8      	str	r0, [r5, #12]
 80a057a:	6168      	str	r0, [r5, #20]
 80a057c:	e056      	b.n	80a062c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
    } break;
    case BLYNK_CMD_HARDWARE:
    case BLYNK_CMD_BRIDGE: {
        msgIdOutOverride = hdr.msg_id;
 80a057e:	68fb      	ldr	r3, [r7, #12]
        this->processCmd(inputBuffer, hdr.length);
 80a0580:	f8b7 200f 	ldrh.w	r2, [r7, #15]
        state = CONNECTING;
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
    } break;
    case BLYNK_CMD_HARDWARE:
    case BLYNK_CMD_BRIDGE: {
        msgIdOutOverride = hdr.msg_id;
 80a0584:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80a0588:	836b      	strh	r3, [r5, #26]
        this->processCmd(inputBuffer, hdr.length);
 80a058a:	4631      	mov	r1, r6
 80a058c:	4628      	mov	r0, r5
 80a058e:	f7ff fe1d 	bl	80a01cc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
 80a0592:	2300      	movs	r3, #0
 80a0594:	836b      	strh	r3, [r5, #26]
 80a0596:	e049      	b.n	80a062c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
 80a0598:	f8b7 300f 	ldrh.w	r3, [r7, #15]
    } break;
    case BLYNK_CMD_INTERNAL: {
        BlynkReq req = { 0 };
 80a059c:	713c      	strb	r4, [r7, #4]
 80a059e:	4433      	add	r3, r6
        BlynkParam param(inputBuffer, hdr.length);
        BlynkParam::iterator it = param.begin();
        if (it >= param.end())
 80a05a0:	429e      	cmp	r6, r3
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
 80a05a2:	617e      	str	r6, [r7, #20]
 80a05a4:	61bb      	str	r3, [r7, #24]
 80a05a6:	d241      	bcs.n	80a062c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
            return true;

        uint32_t cmd32;
        memcpy(&cmd32, it.asStr(), sizeof(cmd32));
 80a05a8:	6830      	ldr	r0, [r6, #0]
 80a05aa:	60b8      	str	r0, [r7, #8]

        ++it;
 80a05ac:	f107 0014 	add.w	r0, r7, #20
 80a05b0:	f7ff fdbf 	bl	80a0132 <_ZN10BlynkParam8iteratorppEv>
 80a05b4:	697a      	ldr	r2, [r7, #20]
        char* start = (char*)(it).asStr();
        unsigned length = hdr.length - (start - (char*)inputBuffer);
 80a05b6:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 80a05ba:	1b96      	subs	r6, r2, r6
 80a05bc:	1b9e      	subs	r6, r3, r6
    };

public:
    explicit
    BlynkParam(const void* addr, size_t length)
        : buff((char*)addr), len(length), buff_size(length)
 80a05be:	61fa      	str	r2, [r7, #28]
        BlynkParam param2(start, length);

        switch (cmd32) {
 80a05c0:	68bb      	ldr	r3, [r7, #8]
 80a05c2:	4a20      	ldr	r2, [pc, #128]	; (80a0644 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x260>)
 80a05c4:	623e      	str	r6, [r7, #32]
 80a05c6:	4293      	cmp	r3, r2
 80a05c8:	627e      	str	r6, [r7, #36]	; 0x24
 80a05ca:	d01d      	beq.n	80a0608 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x224>
 80a05cc:	d80b      	bhi.n	80a05e6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x202>
 80a05ce:	f102 32fd 	add.w	r2, r2, #4261281277	; 0xfdfdfdfd
 80a05d2:	f102 2202 	add.w	r2, r2, #33554944	; 0x2000200
 80a05d6:	4293      	cmp	r3, r2
 80a05d8:	d128      	bne.n	80a062c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
 80a05da:	f107 011c 	add.w	r1, r7, #28
 80a05de:	1d38      	adds	r0, r7, #4
 80a05e0:	f000 faaf 	bl	80a0b42 <BlynkWidgetWrite>
 80a05e4:	e022      	b.n	80a062c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
        ++it;
        char* start = (char*)(it).asStr();
        unsigned length = hdr.length - (start - (char*)inputBuffer);
        BlynkParam param2(start, length);

        switch (cmd32) {
 80a05e6:	4a18      	ldr	r2, [pc, #96]	; (80a0648 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x264>)
 80a05e8:	4293      	cmp	r3, r2
 80a05ea:	d013      	beq.n	80a0614 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x230>
 80a05ec:	f102 629f 	add.w	r2, r2, #83361792	; 0x4f80000
 80a05f0:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
 80a05f4:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80a05f8:	4293      	cmp	r3, r2
 80a05fa:	d117      	bne.n	80a062c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
 80a05fc:	f107 011c 	add.w	r1, r7, #28
 80a0600:	1d38      	adds	r0, r7, #4
 80a0602:	f000 fa9e 	bl	80a0b42 <BlynkWidgetWrite>
 80a0606:	e011      	b.n	80a062c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
        char* start = (char*)(it).asStr();
        unsigned length = hdr.length - (start - (char*)inputBuffer);
        BlynkParam param2(start, length);

        switch (cmd32) {
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
 80a0608:	f107 011c 	add.w	r1, r7, #28
 80a060c:	1d38      	adds	r0, r7, #4
 80a060e:	f000 fa98 	bl	80a0b42 <BlynkWidgetWrite>
 80a0612:	e00b      	b.n	80a062c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
 80a0614:	f107 011c 	add.w	r1, r7, #28
 80a0618:	1d38      	adds	r0, r7, #4
 80a061a:	f000 fa92 	bl	80a0b42 <BlynkWidgetWrite>
 80a061e:	e005      	b.n	80a062c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
    default: {
#ifdef BLYNK_DEBUG
        BLYNK_LOG2(BLYNK_F("Invalid header type: "), hdr.type);
#endif
        // TODO: Flush
        internalReconnect();
 80a0620:	4628      	mov	r0, r5
 80a0622:	f7ff fdc9 	bl	80a01b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
 80a0626:	e001      	b.n	80a062c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
#ifdef BLYNK_DEBUG
        BLYNK_LOG1(BLYNK_F("Can't read body"));
#endif
        return false;
 80a0628:	4620      	mov	r0, r4
 80a062a:	e000      	b.n	80a062e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24a>
        // TODO: Flush
        internalReconnect();
    } break;
    }

    return true;
 80a062c:	2001      	movs	r0, #1
 80a062e:	46c5      	mov	sp, r8
 80a0630:	e004      	b.n	80a063c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x258>
{
    BlynkHeader hdr;
    const int ret = readHeader(hdr);

    if (ret == 0) {
        return true; // Considered OK (no data on input)
 80a0632:	2001      	movs	r0, #1
 80a0634:	e002      	b.n	80a063c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x258>
        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
 80a0636:	f002 f853 	bl	80a26e0 <atol>
 80a063a:	e78b      	b.n	80a0554 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x170>
        internalReconnect();
    } break;
    }

    return true;
}
 80a063c:	3728      	adds	r7, #40	; 0x28
 80a063e:	46bd      	mov	sp, r7
 80a0640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0644:	00637472 	.word	0x00637472
 80a0648:	6e6f6361 	.word	0x6e6f6361

080a064c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>:
protected:
    BlynkState state;
};

template <class Transp>
bool BlynkProtocol<Transp>::run(bool avail)
 80a064c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0650:	4604      	mov	r4, r0
 80a0652:	b08a      	sub	sp, #40	; 0x28
 80a0654:	460d      	mov	r5, r1
{
    BLYNK_RUN_YIELD();
 80a0656:	f7ff fd2d 	bl	80a00b4 <_ZN10CloudClass7processEv>

    if (state == DISCONNECTED) {
 80a065a:	7f63      	ldrb	r3, [r4, #29]
 80a065c:	2b02      	cmp	r3, #2
 80a065e:	f000 809d 	beq.w	80a079c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x150>
      avg -= 1;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
 80a0662:	7f23      	ldrb	r3, [r4, #28]
        return false;
    }

    // Detect nesting
    BlynkHelperAutoInc guard(nesting);
    if (msgIdOutOverride || nesting > 2) {
 80a0664:	8b62      	ldrh	r2, [r4, #26]
 80a0666:	3301      	adds	r3, #1
 80a0668:	b2db      	uxtb	r3, r3
 80a066a:	7723      	strb	r3, [r4, #28]
 80a066c:	2a00      	cmp	r2, #0
 80a066e:	d141      	bne.n	80a06f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
 80a0670:	2b02      	cmp	r3, #2
 80a0672:	d83f      	bhi.n	80a06f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
 80a0674:	6820      	ldr	r0, [r4, #0]
 80a0676:	f001 f911 	bl	80a189c <_ZN9TCPClient9connectedEv>
      //BLYNK_LOG1(BLYNK_F("Nested run() skipped"));
      return true;
    }

    if (conn.connected()) {
 80a067a:	b140      	cbz	r0, 80a068e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x42>
        while (avail || conn.available() > 0) {
 80a067c:	2d00      	cmp	r5, #0
 80a067e:	f040 808f 	bne.w	80a07a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x154>
    int available() { return client.available(); }
 80a0682:	6820      	ldr	r0, [r4, #0]
 80a0684:	f000 ffc8 	bl	80a1618 <_ZN9TCPClient9availableEv>
 80a0688:	2800      	cmp	r0, #0
 80a068a:	f300 8089 	bgt.w	80a07a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x154>
            avail = false;
            //BLYNK_LOG2(BLYNK_F("Proc time: "), micros() - t);
        }
    }

    const millis_time_t t = BlynkMillis();
 80a068e:	f000 fa53 	bl	80a0b38 <_Z11BlynkMillisv>
 80a0692:	4606      	mov	r6, r0
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
 80a0694:	6820      	ldr	r0, [r4, #0]
 80a0696:	f001 f901 	bl	80a189c <_ZN9TCPClient9connectedEv>

    // Update connection status after running commands
    const bool tconn = conn.connected();

    if (state == CONNECTED) {
 80a069a:	7f67      	ldrb	r7, [r4, #29]
 80a069c:	4605      	mov	r5, r0
 80a069e:	2f01      	cmp	r7, #1
 80a06a0:	d12a      	bne.n	80a06f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xac>
        if (!tconn) {
 80a06a2:	b920      	cbnz	r0, 80a06ae <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
            lastHeartbeat = t;
 80a06a4:	6166      	str	r6, [r4, #20]
            internalReconnect();
 80a06a6:	4620      	mov	r0, r4
 80a06a8:	f7ff fd86 	bl	80a01b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
 80a06ac:	e072      	b.n	80a0794 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
        }

        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
 80a06ae:	f644 2238 	movw	r2, #19000	; 0x4a38
 80a06b2:	68e3      	ldr	r3, [r4, #12]
 80a06b4:	1af3      	subs	r3, r6, r3
 80a06b6:	4293      	cmp	r3, r2
 80a06b8:	d904      	bls.n	80a06c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x78>
#ifdef BLYNK_DEBUG
            BLYNK_LOG6(BLYNK_F("Heartbeat timeout: "), t, BLYNK_F(", "), lastActivityIn, BLYNK_F(", "), lastHeartbeat);
#else
            BLYNK_LOG1(BLYNK_F("Heartbeat timeout"));
#endif
            internalReconnect();
 80a06ba:	4620      	mov	r0, r4
 80a06bc:	f7ff fd7c 	bl	80a01b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
 80a06c0:	2500      	movs	r5, #0
 80a06c2:	e067      	b.n	80a0794 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
 80a06c4:	f242 7210 	movw	r2, #10000	; 0x2710
 80a06c8:	4293      	cmp	r3, r2
 80a06ca:	d803      	bhi.n	80a06d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x88>
 80a06cc:	6923      	ldr	r3, [r4, #16]
 80a06ce:	1af3      	subs	r3, r6, r3
 80a06d0:	4293      	cmp	r3, r2
 80a06d2:	d90f      	bls.n	80a06f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
 80a06d4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80a06d8:	6963      	ldr	r3, [r4, #20]
 80a06da:	1af3      	subs	r3, r6, r3
 80a06dc:	4293      	cmp	r3, r2
 80a06de:	d909      	bls.n	80a06f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
        {
            // Send ping if we didn't either send or receive something
            // for BLYNK_HEARTBEAT seconds
            sendCmd(BLYNK_CMD_PING);
 80a06e0:	2300      	movs	r3, #0
 80a06e2:	9302      	str	r3, [sp, #8]
 80a06e4:	9301      	str	r3, [sp, #4]
 80a06e6:	9300      	str	r3, [sp, #0]
 80a06e8:	461a      	mov	r2, r3
 80a06ea:	2106      	movs	r1, #6
 80a06ec:	4620      	mov	r0, r4
 80a06ee:	f000 f8c3 	bl	80a0878 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastHeartbeat = t;
 80a06f2:	6166      	str	r6, [r4, #20]
            lastLogin = lastActivityOut;
            return true;
        }
#endif
    }
    return true;
 80a06f4:	2501      	movs	r5, #1
 80a06f6:	e04d      	b.n	80a0794 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
            // Send ping if we didn't either send or receive something
            // for BLYNK_HEARTBEAT seconds
            sendCmd(BLYNK_CMD_PING);
            lastHeartbeat = t;
        }
    } else if (state == CONNECTING) {
 80a06f8:	2f00      	cmp	r7, #0
 80a06fa:	d1fb      	bne.n	80a06f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
 80a06fc:	6962      	ldr	r2, [r4, #20]
#ifdef BLYNK_USE_DIRECT_CONNECT
        if (!tconn)
            conn.connect();
#else
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
 80a06fe:	b150      	cbz	r0, 80a0716 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xca>
 80a0700:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80a0704:	1ab6      	subs	r6, r6, r2
 80a0706:	429e      	cmp	r6, r3
 80a0708:	d9f4      	bls.n	80a06f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
 80a070a:	6820      	ldr	r0, [r4, #0]
 80a070c:	f000 ffc2 	bl	80a1694 <_ZN9TCPClient4stopEv>
            BLYNK_LOG1(BLYNK_F("Login timeout"));
            conn.disconnect();
            state = CONNECTING;
            return false;
 80a0710:	463d      	mov	r5, r7
            conn.connect();
#else
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
            BLYNK_LOG1(BLYNK_F("Login timeout"));
            conn.disconnect();
            state = CONNECTING;
 80a0712:	7767      	strb	r7, [r4, #29]
            return false;
 80a0714:	e03e      	b.n	80a0794 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
 80a0716:	f241 3388 	movw	r3, #5000	; 0x1388
 80a071a:	1ab2      	subs	r2, r6, r2
 80a071c:	429a      	cmp	r2, r3
 80a071e:	d9e9      	bls.n	80a06f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
 80a0720:	6820      	ldr	r0, [r4, #0]
 80a0722:	f000 ffb7 	bl	80a1694 <_ZN9TCPClient4stopEv>
            conn.disconnect();
            if (!conn.connect()) {
 80a0726:	f8d4 e000 	ldr.w	lr, [r4]
        domain = d;
        port = p;
    }

    bool connect() {
        if (domain) {
 80a072a:	f8de c034 	ldr.w	ip, [lr, #52]	; 0x34
 80a072e:	f8be 8038 	ldrh.w	r8, [lr, #56]	; 0x38
 80a0732:	f1bc 0f00 	cmp.w	ip, #0
 80a0736:	d006      	beq.n	80a0746 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xfa>
            BLYNK_LOG4(BLYNK_F("Connecting to "), domain, ':', port);
            return (1 == client.connect(domain, port));
 80a0738:	462b      	mov	r3, r5
 80a073a:	4642      	mov	r2, r8
 80a073c:	4661      	mov	r1, ip
 80a073e:	4670      	mov	r0, lr
 80a0740:	f000 fea4 	bl	80a148c <_ZN9TCPClient7connectEPKctm>
 80a0744:	e00e      	b.n	80a0764 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x118>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a0746:	4b1f      	ldr	r3, [pc, #124]	; (80a07c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x178>)
 80a0748:	ad05      	add	r5, sp, #20
 80a074a:	f10e 0720 	add.w	r7, lr, #32
 80a074e:	9304      	str	r3, [sp, #16]
 80a0750:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80a0752:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a0754:	683b      	ldr	r3, [r7, #0]
        } else {
            BLYNK_LOG_IP("Connecting to ", addr);
            return (1 == client.connect(addr, port));
 80a0756:	4642      	mov	r2, r8
 80a0758:	702b      	strb	r3, [r5, #0]
 80a075a:	a904      	add	r1, sp, #16
 80a075c:	4663      	mov	r3, ip
 80a075e:	4670      	mov	r0, lr
 80a0760:	f000 fff4 	bl	80a174c <_ZN9TCPClient7connectE9IPAddresstm>
 80a0764:	1e43      	subs	r3, r0, #1
 80a0766:	425d      	negs	r5, r3
 80a0768:	415d      	adcs	r5, r3
 80a076a:	b90d      	cbnz	r5, 80a0770 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x124>
                lastLogin = t;
 80a076c:	6166      	str	r6, [r4, #20]
                return false;
 80a076e:	e011      	b.n	80a0794 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
            }

            msgIdOut = 1;
            sendCmd(BLYNK_CMD_LOGIN, 1, authkey, strlen(authkey));
 80a0770:	6867      	ldr	r7, [r4, #4]
            if (!conn.connect()) {
                lastLogin = t;
                return false;
            }

            msgIdOut = 1;
 80a0772:	2601      	movs	r6, #1
 80a0774:	8326      	strh	r6, [r4, #24]
            sendCmd(BLYNK_CMD_LOGIN, 1, authkey, strlen(authkey));
 80a0776:	4638      	mov	r0, r7
 80a0778:	f002 f80a 	bl	80a2790 <strlen>
 80a077c:	2300      	movs	r3, #0
 80a077e:	e88d 0009 	stmia.w	sp, {r0, r3}
 80a0782:	9302      	str	r3, [sp, #8]
 80a0784:	4632      	mov	r2, r6
 80a0786:	463b      	mov	r3, r7
 80a0788:	2102      	movs	r1, #2
 80a078a:	4620      	mov	r0, r4
 80a078c:	f000 f874 	bl	80a0878 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
 80a0790:	6923      	ldr	r3, [r4, #16]
 80a0792:	6163      	str	r3, [r4, #20]
    ~BlynkHelperAutoInc() { --c; }
 80a0794:	7f23      	ldrb	r3, [r4, #28]
 80a0796:	3b01      	subs	r3, #1
 80a0798:	7723      	strb	r3, [r4, #28]
 80a079a:	e00e      	b.n	80a07ba <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x16e>
bool BlynkProtocol<Transp>::run(bool avail)
{
    BLYNK_RUN_YIELD();

    if (state == DISCONNECTED) {
        return false;
 80a079c:	2500      	movs	r5, #0
 80a079e:	e00c      	b.n	80a07ba <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x16e>

    if (conn.connected()) {
        while (avail || conn.available() > 0) {
            //BLYNK_LOG2(BLYNK_F("Available: "), conn.available());
            //const unsigned long t = micros();
            if (!processInput()) {
 80a07a0:	4620      	mov	r0, r4
 80a07a2:	f7ff fe1f 	bl	80a03e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
 80a07a6:	4605      	mov	r5, r0
 80a07a8:	2800      	cmp	r0, #0
 80a07aa:	f47f af6a 	bne.w	80a0682 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x36>
        }
        return 0;
    }

    void disconnect() { client.stop(); }
 80a07ae:	6820      	ldr	r0, [r4, #0]
 80a07b0:	f000 ff70 	bl	80a1694 <_ZN9TCPClient4stopEv>
                conn.disconnect();
// TODO: Only when in direct mode?
#ifdef BLYNK_USE_DIRECT_CONNECT
                state = CONNECTING;
#endif
                BlynkOnDisconnected();
 80a07b4:	f000 f9c6 	bl	80a0b44 <BlynkNoOpCbk>
                return false;
 80a07b8:	e7ec      	b.n	80a0794 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
            return true;
        }
#endif
    }
    return true;
}
 80a07ba:	4628      	mov	r0, r5
 80a07bc:	b00a      	add	sp, #40	; 0x28
 80a07be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a07c2:	bf00      	nop
 80a07c4:	080a2db8 	.word	0x080a2db8

080a07c8 <setup>:
#define PIN_ULTRASONIC D2
Ultrasonic ultrasonic(PIN_ULTRASONIC);

// setup() runs once, when the device is first turned on.
void setup()
{
 80a07c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  Serial.begin(9600);
 80a07ca:	f001 f963 	bl	80a1a94 <_Z16_fetch_usbserialv>
 80a07ce:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a07d2:	f001 f945 	bl	80a1a60 <_ZN9USBSerial5beginEl>
  pinMode(PIN_BUZZER, OUTPUT);
 80a07d6:	2101      	movs	r1, #1
 80a07d8:	2006      	movs	r0, #6
 80a07da:	f001 fa93 	bl	80a1d04 <pinMode>
  pinMode(PIN_LED, OUTPUT);
 80a07de:	2101      	movs	r1, #1
 80a07e0:	2004      	movs	r0, #4
 80a07e2:	f001 fa8f 	bl	80a1d04 <pinMode>
  Serial.begin(9600);
 80a07e6:	f001 f955 	bl	80a1a94 <_Z16_fetch_usbserialv>
 80a07ea:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a07ee:	f001 f937 	bl	80a1a60 <_ZN9USBSerial5beginEl>

  // Setup Blynk
  delay(5000);
 80a07f2:	f241 3088 	movw	r0, #5000	; 0x1388
 80a07f6:	f000 fca9 	bl	80a114c <delay>
  timer.setInterval(1000L, sendRange);
 80a07fa:	4a1a      	ldr	r2, [pc, #104]	; (80a0864 <setup+0x9c>)
 80a07fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80a0800:	4819      	ldr	r0, [pc, #100]	; (80a0868 <setup+0xa0>)
 80a0802:	f000 fa12 	bl	80a0c2a <_ZN10BlynkTimer11setIntervalEmPFvvE>

    void begin( const char* auth,
                const char* domain = BLYNK_DEFAULT_DOMAIN,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
 80a0806:	f640 30b8 	movw	r0, #3000	; 0xbb8
    int readHeader(BlynkHeader& hdr);
    uint16_t getNextMsgId();

protected:
    void begin(const char* auth) {
        this->authkey = auth;
 80a080a:	4c18      	ldr	r4, [pc, #96]	; (80a086c <setup+0xa4>)
 80a080c:	f000 f992 	bl	80a0b34 <_Z10BlynkDelaym>
 80a0810:	4b17      	ldr	r3, [pc, #92]	; (80a0870 <setup+0xa8>)

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
        conn.disconnect();
        state = CONNECTING;
        millis_time_t started = BlynkMillis();
        while ((state != CONNECTED) &&
 80a0812:	f242 3627 	movw	r6, #8999	; 0x2327
    int readHeader(BlynkHeader& hdr);
    uint16_t getNextMsgId();

protected:
    void begin(const char* auth) {
        this->authkey = auth;
 80a0816:	6063      	str	r3, [r4, #4]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
 80a0818:	f000 f98e 	bl	80a0b38 <_Z11BlynkMillisv>
    void config(const char* auth,
                const char* domain = BLYNK_DEFAULT_DOMAIN,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        Base::begin(auth);
        this->conn.begin(domain, port);
 80a081c:	6823      	ldr	r3, [r4, #0]
        port = p;
        addr = a;
    }

    void begin(const char* d, uint16_t p) {
        domain = d;
 80a081e:	4a15      	ldr	r2, [pc, #84]	; (80a0874 <setup+0xac>)
 80a0820:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
 80a0824:	3808      	subs	r0, #8
 80a0826:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
 80a0828:	2250      	movs	r2, #80	; 0x50
 80a082a:	6120      	str	r0, [r4, #16]
 80a082c:	60e0      	str	r0, [r4, #12]
 80a082e:	6160      	str	r0, [r4, #20]
 80a0830:	871a      	strh	r2, [r3, #56]	; 0x38

    bool connected() { return state == CONNECTED; }

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
        conn.disconnect();
        state = CONNECTING;
 80a0832:	2500      	movs	r5, #0
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
 80a0834:	6820      	ldr	r0, [r4, #0]
 80a0836:	f000 ff2d 	bl	80a1694 <_ZN9TCPClient4stopEv>
 80a083a:	7765      	strb	r5, [r4, #29]
        millis_time_t started = BlynkMillis();
 80a083c:	f000 f97c 	bl	80a0b38 <_Z11BlynkMillisv>
 80a0840:	4607      	mov	r7, r0
        while ((state != CONNECTED) &&
 80a0842:	7f63      	ldrb	r3, [r4, #29]
 80a0844:	2b01      	cmp	r3, #1
 80a0846:	d009      	beq.n	80a085c <setup+0x94>
               (BlynkMillis() - started < timeout))
 80a0848:	f000 f976 	bl	80a0b38 <_Z11BlynkMillisv>

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
        conn.disconnect();
        state = CONNECTING;
        millis_time_t started = BlynkMillis();
        while ((state != CONNECTED) &&
 80a084c:	1bc0      	subs	r0, r0, r7
 80a084e:	42b0      	cmp	r0, r6
 80a0850:	d804      	bhi.n	80a085c <setup+0x94>
               (BlynkMillis() - started < timeout))
        {
            run();
 80a0852:	2100      	movs	r1, #0
 80a0854:	4805      	ldr	r0, [pc, #20]	; (80a086c <setup+0xa4>)
 80a0856:	f7ff fef9 	bl	80a064c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
 80a085a:	e7f2      	b.n	80a0842 <setup+0x7a>
                const char* domain = BLYNK_DEFAULT_DOMAIN,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
        config(auth, domain, port);
        while(this->connect() != true) {}
 80a085c:	7f63      	ldrb	r3, [r4, #29]
 80a085e:	2b01      	cmp	r3, #1
 80a0860:	d1e8      	bne.n	80a0834 <setup+0x6c>
  Blynk.begin(blynkAuth);
}
 80a0862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0864:	080a0a81 	.word	0x080a0a81
 80a0868:	20000398 	.word	0x20000398
 80a086c:	200005dc 	.word	0x200005dc
 80a0870:	20000300 	.word	0x20000300
 80a0874:	080a296e 	.word	0x080a296e

080a0878 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
 80a0878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a087c:	b083      	sub	sp, #12
 80a087e:	4604      	mov	r4, r0
 80a0880:	af00      	add	r7, sp, #0
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
 80a0882:	6800      	ldr	r0, [r0, #0]
 80a0884:	4689      	mov	r9, r1
 80a0886:	4616      	mov	r6, r2
 80a0888:	469b      	mov	fp, r3
 80a088a:	6b3d      	ldr	r5, [r7, #48]	; 0x30
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
 80a088c:	46ea      	mov	sl, sp
 80a088e:	f001 f805 	bl	80a189c <_ZN9TCPClient9connectedEv>
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
{
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && state != CONNECTED) ) {
 80a0892:	2800      	cmp	r0, #0
 80a0894:	d061      	beq.n	80a095a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe2>
 80a0896:	f019 0ffd 	tst.w	r9, #253	; 0xfd
 80a089a:	f000 80a1 	beq.w	80a09e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x168>
 80a089e:	f1b9 0f06 	cmp.w	r9, #6
 80a08a2:	f000 809d 	beq.w	80a09e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x168>
 80a08a6:	7f63      	ldrb	r3, [r4, #29]
 80a08a8:	2b01      	cmp	r3, #1
 80a08aa:	d156      	bne.n	80a095a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe2>
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
#endif
        return;
    }

    if (0 == id) {
 80a08ac:	b916      	cbnz	r6, 80a08b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x3c>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
 80a08ae:	8b66      	ldrh	r6, [r4, #26]
 80a08b0:	2e00      	cmp	r6, #0
 80a08b2:	d057      	beq.n	80a0964 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xec>
    if (0 == id) {
        id = getNextMsgId();
    }

#if defined(BLYNK_MSG_LIMIT) && BLYNK_MSG_LIMIT > 0
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
 80a08b4:	f1a9 030c 	sub.w	r3, r9, #12
 80a08b8:	2b08      	cmp	r3, #8
 80a08ba:	d95b      	bls.n	80a0974 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xfc>
    }
#endif

    const size_t full_length = (sizeof(BlynkHeader)) +
                               (data  ? length  : 0) +
                               (data2 ? length2 : 0);
 80a08bc:	f1bb 0f00 	cmp.w	fp, #0
 80a08c0:	bf18      	it	ne
 80a08c2:	46a8      	movne	r8, r5
 80a08c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80a08c6:	bf08      	it	eq
 80a08c8:	f04f 0800 	moveq.w	r8, #0
 80a08cc:	2a00      	cmp	r2, #0
 80a08ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80a08d0:	f108 0305 	add.w	r3, r8, #5
 80a08d4:	bf14      	ite	ne
 80a08d6:	4690      	movne	r8, r2
 80a08d8:	f04f 0800 	moveq.w	r8, #0
 80a08dc:	4498      	add	r8, r3

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];
 80a08de:	f108 0307 	add.w	r3, r8, #7
 80a08e2:	f023 0307 	bic.w	r3, r3, #7

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);
 80a08e6:	18aa      	adds	r2, r5, r2
                               (data2 ? length2 : 0);

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];
 80a08e8:	ebad 0d03 	sub.w	sp, sp, r3

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);
 80a08ec:	f3c2 2307 	ubfx	r3, r2, #8, #8

    uint8_t buff[full_length];

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
 80a08f0:	ba76      	rev16	r6, r6
    hdr->length = htons(length+length2);
 80a08f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                               (data2 ? length2 : 0);

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];
 80a08f6:	f8c7 d004 	str.w	sp, [r7, #4]

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
 80a08fa:	f88d 9000 	strb.w	r9, [sp]
    hdr->msg_id = htons(id);
 80a08fe:	f8ad 6001 	strh.w	r6, [sp, #1]
    hdr->length = htons(length+length2);
 80a0902:	f8ad 3003 	strh.w	r3, [sp, #3]

    size_t pos = sizeof(BlynkHeader);
    if (data && length) {
 80a0906:	f1bb 0f00 	cmp.w	fp, #0
 80a090a:	d052      	beq.n	80a09b2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13a>
 80a090c:	2d00      	cmp	r5, #0
 80a090e:	d050      	beq.n	80a09b2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13a>
        memcpy(buff + pos, data, length);
 80a0910:	462a      	mov	r2, r5
 80a0912:	4659      	mov	r1, fp
 80a0914:	f10d 0005 	add.w	r0, sp, #5
 80a0918:	f001 fef4 	bl	80a2704 <memcpy>
        pos += length;
 80a091c:	1d68      	adds	r0, r5, #5
    }
    if (data2 && length2) {
 80a091e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80a0920:	2b00      	cmp	r3, #0
 80a0922:	d148      	bne.n	80a09b6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);

    size_t pos = sizeof(BlynkHeader);
 80a0924:	2500      	movs	r5, #0
    if (data2 && length2) {
        memcpy(buff + pos, data2, length2);
    }

    size_t wlen = 0;
    while (wlen < full_length) {
 80a0926:	4545      	cmp	r5, r8
 80a0928:	d251      	bcs.n	80a09ce <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x156>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
 80a092a:	ebc5 0208 	rsb	r2, r5, r8
    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
    }

    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
 80a092e:	687b      	ldr	r3, [r7, #4]
 80a0930:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80a0934:	bf28      	it	cs
 80a0936:	f44f 6280 	movcs.w	r2, #1024	; 0x400
 80a093a:	1959      	adds	r1, r3, r5
 80a093c:	6820      	ldr	r0, [r4, #0]
 80a093e:	f000 fd84 	bl	80a144a <_ZN9TCPClient5writeEPKhj>
 80a0942:	4606      	mov	r6, r0
        BLYNK_DBG_DUMP("<", buff + wlen, chunk);
        const size_t w = conn.write(buff + wlen, chunk);
        BlynkDelay(BLYNK_SEND_THROTTLE);
 80a0944:	2000      	movs	r0, #0
 80a0946:	f000 f8f5 	bl	80a0b34 <_Z10BlynkDelaym>
        if (w == 0) {
 80a094a:	2e00      	cmp	r6, #0
 80a094c:	d13d      	bne.n	80a09ca <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x152>
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
 80a094e:	6820      	ldr	r0, [r4, #0]
 80a0950:	f000 fea0 	bl	80a1694 <_ZN9TCPClient4stopEv>
#ifdef BLYNK_DEBUG
            BLYNK_LOG1(BLYNK_F("Cmd error"));
#endif
            conn.disconnect();
            state = CONNECTING;
 80a0954:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
 80a0956:	f000 f8f5 	bl	80a0b44 <BlynkNoOpCbk>
{
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && state != CONNECTED) ) {
#ifdef BLYNK_DEBUG_ALL
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
#endif
        return;
 80a095a:	46d5      	mov	sp, sl
        return;
    }

    lastActivityOut = BlynkMillis();

}
 80a095c:	370c      	adds	r7, #12
 80a095e:	46bd      	mov	sp, r7
 80a0960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
        return msgIdOutOverride;
    if (++msgIdOut == 0)
 80a0964:	8b23      	ldrh	r3, [r4, #24]
 80a0966:	3301      	adds	r3, #1
 80a0968:	b29b      	uxth	r3, r3
 80a096a:	b903      	cbnz	r3, 80a096e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xf6>
        msgIdOut = 1;
 80a096c:	2301      	movs	r3, #1
 80a096e:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
 80a0970:	8b26      	ldrh	r6, [r4, #24]
 80a0972:	e79f      	b.n	80a08b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x3c>
        id = getNextMsgId();
    }

#if defined(BLYNK_MSG_LIMIT) && BLYNK_MSG_LIMIT > 0
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
 80a0974:	68e3      	ldr	r3, [r4, #12]
 80a0976:	6922      	ldr	r2, [r4, #16]
 80a0978:	4293      	cmp	r3, r2
 80a097a:	bf38      	it	cc
 80a097c:	4613      	movcc	r3, r2
 80a097e:	f103 0842 	add.w	r8, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
 80a0982:	f000 f8d9 	bl	80a0b38 <_Z11BlynkMillisv>
        if (wait_time >= 0) {
 80a0986:	ebc0 0008 	rsb	r0, r0, r8
 80a098a:	2800      	cmp	r0, #0
 80a098c:	db0a      	blt.n	80a09a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12c>
#ifdef BLYNK_DEBUG_ALL
            BLYNK_LOG2(BLYNK_F("Waiting:"), wait_time);
#endif
            while (wait_time >= 0) {
                run();
 80a098e:	2100      	movs	r1, #0
 80a0990:	4620      	mov	r0, r4
 80a0992:	f7ff fe5b 	bl	80a064c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
                wait_time = allowed_time - BlynkMillis();
 80a0996:	f000 f8cf 	bl	80a0b38 <_Z11BlynkMillisv>
        int32_t wait_time = allowed_time - BlynkMillis();
        if (wait_time >= 0) {
#ifdef BLYNK_DEBUG_ALL
            BLYNK_LOG2(BLYNK_F("Waiting:"), wait_time);
#endif
            while (wait_time >= 0) {
 80a099a:	ebc0 0008 	rsb	r0, r0, r8
 80a099e:	2800      	cmp	r0, #0
 80a09a0:	daf5      	bge.n	80a098e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x116>
 80a09a2:	e78b      	b.n	80a08bc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
                run();
                wait_time = allowed_time - BlynkMillis();
            }
        } else if (nesting == 0) {
 80a09a4:	7f21      	ldrb	r1, [r4, #28]
 80a09a6:	2900      	cmp	r1, #0
 80a09a8:	d188      	bne.n	80a08bc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
            run();
 80a09aa:	4620      	mov	r0, r4
 80a09ac:	f7ff fe4e 	bl	80a064c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
 80a09b0:	e784      	b.n	80a08bc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);

    size_t pos = sizeof(BlynkHeader);
 80a09b2:	2005      	movs	r0, #5
 80a09b4:	e7b3      	b.n	80a091e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xa6>
    if (data && length) {
        memcpy(buff + pos, data, length);
        pos += length;
    }
    if (data2 && length2) {
 80a09b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80a09b8:	2b00      	cmp	r3, #0
 80a09ba:	d0b3      	beq.n	80a0924 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xac>
        memcpy(buff + pos, data2, length2);
 80a09bc:	461a      	mov	r2, r3
 80a09be:	687b      	ldr	r3, [r7, #4]
 80a09c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80a09c2:	4418      	add	r0, r3
 80a09c4:	f001 fe9e 	bl	80a2704 <memcpy>
 80a09c8:	e7ac      	b.n	80a0924 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xac>
            conn.disconnect();
            state = CONNECTING;
            BlynkOnDisconnected();
            return;
        }
        wlen += w;
 80a09ca:	4435      	add	r5, r6
    if (data2 && length2) {
        memcpy(buff + pos, data2, length2);
    }

    size_t wlen = 0;
    while (wlen < full_length) {
 80a09cc:	e7ab      	b.n	80a0926 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xae>
        }
    }

#endif

    if (wlen != full_length) {
 80a09ce:	d003      	beq.n	80a09d8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x160>
#ifdef BLYNK_DEBUG
        BLYNK_LOG4(BLYNK_F("Sent "), wlen, '/', full_length);
#endif
        internalReconnect();
 80a09d0:	4620      	mov	r0, r4
 80a09d2:	f7ff fbf1 	bl	80a01b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
 80a09d6:	e7c0      	b.n	80a095a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe2>
    }

    lastActivityOut = BlynkMillis();
 80a09d8:	f000 f8ae 	bl	80a0b38 <_Z11BlynkMillisv>
 80a09dc:	6120      	str	r0, [r4, #16]
 80a09de:	e7bc      	b.n	80a095a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe2>
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
#endif
        return;
    }

    if (0 == id) {
 80a09e0:	2e00      	cmp	r6, #0
 80a09e2:	f47f af6b 	bne.w	80a08bc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
 80a09e6:	e762      	b.n	80a08ae <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x36>

080a09e8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:

#else

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::sendInfo()
 80a09e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
#ifdef BLYNK_HAS_PROGMEM
    char mem[profile_len];
    memcpy_P(mem, profile+8, profile_len);
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, mem, profile_len);
#else
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len);
 80a09ea:	2200      	movs	r2, #0
 80a09ec:	2350      	movs	r3, #80	; 0x50
 80a09ee:	9300      	str	r3, [sp, #0]
 80a09f0:	9202      	str	r2, [sp, #8]
 80a09f2:	9201      	str	r2, [sp, #4]
 80a09f4:	4b03      	ldr	r3, [pc, #12]	; (80a0a04 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x1c>)
 80a09f6:	2111      	movs	r1, #17
 80a09f8:	f7ff ff3e 	bl	80a0878 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
#endif
    return;
}
 80a09fc:	b005      	add	sp, #20
 80a09fe:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0a02:	bf00      	nop
 80a0a04:	080a2904 	.word	0x080a2904

080a0a08 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
 80a0a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0a0c:	460d      	mov	r5, r1
 80a0a0e:	4690      	mov	r8, r2
 80a0a10:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a0a14:	ab08      	add	r3, sp, #32
 80a0a16:	2400      	movs	r4, #0
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
 80a0a18:	2203      	movs	r2, #3
 80a0a1a:	4606      	mov	r6, r0
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a0a1c:	9305      	str	r3, [sp, #20]
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
 80a0a1e:	a805      	add	r0, sp, #20
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a0a20:	f44f 6380 	mov.w	r3, #1024	; 0x400
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
 80a0a24:	4914      	ldr	r1, [pc, #80]	; (80a0a78 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_+0x70>)
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a0a26:	9307      	str	r3, [sp, #28]
 80a0a28:	9406      	str	r4, [sp, #24]
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
 80a0a2a:	f7ff fb91 	bl	80a0150 <_ZN10BlynkParam3addEPKvj>
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
        cmd.add(pin);
 80a0a2e:	4629      	mov	r1, r5
 80a0a30:	a805      	add	r0, sp, #20
 80a0a32:	f7ff fb9d 	bl	80a0170 <_ZN10BlynkParam3addEi>
#else

    inline
    void BlynkParam::add(float value)
    {
        len += snprintf(buff+len, buff_size-len, "%2.3f", value)+1;
 80a0a36:	9b06      	ldr	r3, [sp, #24]
 80a0a38:	9907      	ldr	r1, [sp, #28]
 80a0a3a:	9d05      	ldr	r5, [sp, #20]
 80a0a3c:	4640      	mov	r0, r8
 80a0a3e:	1acf      	subs	r7, r1, r3
 80a0a40:	441d      	add	r5, r3
 80a0a42:	f001 fce7 	bl	80a2414 <__aeabi_f2d>
 80a0a46:	4a0d      	ldr	r2, [pc, #52]	; (80a0a7c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_+0x74>)
 80a0a48:	e9cd 0100 	strd	r0, r1, [sp]
 80a0a4c:	4639      	mov	r1, r7
 80a0a4e:	4628      	mov	r0, r5
 80a0a50:	f000 fb74 	bl	80a113c <snprintf>
 80a0a54:	9b06      	ldr	r3, [sp, #24]
 80a0a56:	3001      	adds	r0, #1
 80a0a58:	4418      	add	r0, r3
 80a0a5a:	9006      	str	r0, [sp, #24]
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
 80a0a5c:	3801      	subs	r0, #1
 80a0a5e:	9000      	str	r0, [sp, #0]
 80a0a60:	9402      	str	r4, [sp, #8]
 80a0a62:	9401      	str	r4, [sp, #4]
 80a0a64:	9b05      	ldr	r3, [sp, #20]
 80a0a66:	4622      	mov	r2, r4
 80a0a68:	2114      	movs	r1, #20
 80a0a6a:	4630      	mov	r0, r6
 80a0a6c:	f7ff ff04 	bl	80a0878 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
 80a0a70:	f50d 6d84 	add.w	sp, sp, #1056	; 0x420
 80a0a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0a78:	080a297e 	.word	0x080a297e
 80a0a7c:	080a2981 	.word	0x080a2981

080a0a80 <_Z9sendRangev>:

// Read from ultrasonic ranger and write to Blynk V0
void sendRange()
{
 80a0a80:	b508      	push	{r3, lr}
  float cm = ultrasonic.MeasureInCentimeters();
 80a0a82:	4805      	ldr	r0, [pc, #20]	; (80a0a98 <_Z9sendRangev+0x18>)
 80a0a84:	f000 f942 	bl	80a0d0c <_ZN10Ultrasonic20MeasureInCentimetersEv>
  Blynk.virtualWrite(0, cm);
 80a0a88:	f001 fdd2 	bl	80a2630 <__aeabi_i2f>
 80a0a8c:	2100      	movs	r1, #0
 80a0a8e:	4602      	mov	r2, r0
 80a0a90:	4802      	ldr	r0, [pc, #8]	; (80a0a9c <_Z9sendRangev+0x1c>)
 80a0a92:	f7ff ffb9 	bl	80a0a08 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
 80a0a96:	bd08      	pop	{r3, pc}
 80a0a98:	20000394 	.word	0x20000394
 80a0a9c:	200005dc 	.word	0x200005dc

080a0aa0 <loop>:
}

// loop() runs over and over again, as quickly as it can execute.
void loop()
{
 80a0aa0:	b508      	push	{r3, lr}
  Blynk.run();
 80a0aa2:	2100      	movs	r1, #0
 80a0aa4:	4803      	ldr	r0, [pc, #12]	; (80a0ab4 <loop+0x14>)
 80a0aa6:	f7ff fdd1 	bl	80a064c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
  timer.run();
}
 80a0aaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

// loop() runs over and over again, as quickly as it can execute.
void loop()
{
  Blynk.run();
  timer.run();
 80a0aae:	4802      	ldr	r0, [pc, #8]	; (80a0ab8 <loop+0x18>)
 80a0ab0:	f000 b8dd 	b.w	80a0c6e <_ZN10BlynkTimer3runEv>
 80a0ab4:	200005dc 	.word	0x200005dc
 80a0ab8:	20000398 	.word	0x20000398

080a0abc <_GLOBAL__sub_I_Blynk>:
}
 80a0abc:	b538      	push	{r3, r4, r5, lr}

class BlynkTransportParticle
{
public:
    BlynkTransportParticle()
        : domain(NULL), port(0)
 80a0abe:	4d13      	ldr	r5, [pc, #76]	; (80a0b0c <_GLOBAL__sub_I_Blynk+0x50>)
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0ac0:	f000 f986 	bl	80a0dd0 <HAL_Pin_Map>
 80a0ac4:	4628      	mov	r0, r5
 80a0ac6:	f000 fe37 	bl	80a1738 <_ZN9TCPClientC1Ev>
 80a0aca:	f105 001c 	add.w	r0, r5, #28
 80a0ace:	2400      	movs	r4, #0
 80a0ad0:	f000 fbaa 	bl	80a1228 <_ZN9IPAddressC1Ev>
#ifndef BlynkSimpleParticle_h
#define BlynkSimpleParticle_h

#include "BlynkParticle.h"

static BlynkTransportParticle _blynkTransport;
 80a0ad4:	490e      	ldr	r1, [pc, #56]	; (80a0b10 <_GLOBAL__sub_I_Blynk+0x54>)
 80a0ad6:	4a0f      	ldr	r2, [pc, #60]	; (80a0b14 <_GLOBAL__sub_I_Blynk+0x58>)
 80a0ad8:	4628      	mov	r0, r5
 80a0ada:	636c      	str	r4, [r5, #52]	; 0x34
 80a0adc:	872c      	strh	r4, [r5, #56]	; 0x38
 80a0ade:	f001 f9e7 	bl	80a1eb0 <__aeabi_atexit>
        , lastActivityOut(0)
        , lastHeartbeat(0)
        , msgIdOut(0)
        , msgIdOutOverride(0)
        , nesting(0)
        , state(CONNECTING)
 80a0ae2:	4b0d      	ldr	r3, [pc, #52]	; (80a0b18 <_GLOBAL__sub_I_Blynk+0x5c>)
#include "Ultrasonic.h"

#define BLYNK_PRINT Serial
//#define BLYNK_DEBUG
char blynkAuth[] = "74dab704d1824061bb43cf03df866244";
BlynkTimer timer;
 80a0ae4:	480d      	ldr	r0, [pc, #52]	; (80a0b1c <_GLOBAL__sub_I_Blynk+0x60>)
 80a0ae6:	601d      	str	r5, [r3, #0]
 80a0ae8:	605c      	str	r4, [r3, #4]
 80a0aea:	609c      	str	r4, [r3, #8]
 80a0aec:	60dc      	str	r4, [r3, #12]
 80a0aee:	611c      	str	r4, [r3, #16]
 80a0af0:	615c      	str	r4, [r3, #20]
 80a0af2:	831c      	strh	r4, [r3, #24]
 80a0af4:	835c      	strh	r4, [r3, #26]
 80a0af6:	771c      	strb	r4, [r3, #28]
 80a0af8:	775c      	strb	r4, [r3, #29]
 80a0afa:	f000 f83b 	bl	80a0b74 <_ZN10BlynkTimerC1Ev>
// loop() runs over and over again, as quickly as it can execute.
void loop()
{
  Blynk.run();
  timer.run();
}
 80a0afe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
BlynkTimer timer;

#define PIN_BUZZER D6
#define PIN_LED D4
#define PIN_ULTRASONIC D2
Ultrasonic ultrasonic(PIN_ULTRASONIC);
 80a0b02:	2102      	movs	r1, #2
 80a0b04:	4806      	ldr	r0, [pc, #24]	; (80a0b20 <_GLOBAL__sub_I_Blynk+0x64>)
 80a0b06:	f000 b8fe 	b.w	80a0d06 <_ZN10UltrasonicC1Ei>
 80a0b0a:	bf00      	nop
 80a0b0c:	200005fc 	.word	0x200005fc
 80a0b10:	080a0101 	.word	0x080a0101
 80a0b14:	20000390 	.word	0x20000390
 80a0b18:	200005dc 	.word	0x200005dc
 80a0b1c:	20000398 	.word	0x20000398
 80a0b20:	20000394 	.word	0x20000394

080a0b24 <_GLOBAL__sub_I__ZN3DHTC2Ehhh>:
 80a0b24:	b508      	push	{r3, lr}
 80a0b26:	f000 f953 	bl	80a0dd0 <HAL_Pin_Map>
 80a0b2a:	4b01      	ldr	r3, [pc, #4]	; (80a0b30 <_GLOBAL__sub_I__ZN3DHTC2Ehhh+0xc>)
 80a0b2c:	6018      	str	r0, [r3, #0]
 80a0b2e:	bd08      	pop	{r3, pc}
 80a0b30:	20000638 	.word	0x20000638

080a0b34 <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
 80a0b34:	f000 bb0a 	b.w	80a114c <delay>

080a0b38 <_Z11BlynkMillisv>:
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0b38:	f000 b942 	b.w	80a0dc0 <HAL_Timer_Get_Milli_Seconds>

080a0b3c <_GLOBAL__sub_I__Z10BlynkResetv>:
 80a0b3c:	f000 b948 	b.w	80a0dd0 <HAL_Pin_Map>

080a0b40 <BlynkWidgetRead>:

void BlynkNoOpCbk()
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
 80a0b40:	4770      	bx	lr

080a0b42 <BlynkWidgetWrite>:
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
 80a0b42:	4770      	bx	lr

080a0b44 <BlynkNoOpCbk>:
#include <Blynk/BlynkConfig.h>
#include <Blynk/BlynkHandlers.h>
#include <Blynk/BlynkDebug.h>

void BlynkNoOpCbk()
{}
 80a0b44:	4770      	bx	lr
	...

080a0b48 <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
 80a0b48:	287f      	cmp	r0, #127	; 0x7f
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
 80a0b4a:	bf9a      	itte	ls
 80a0b4c:	4b02      	ldrls	r3, [pc, #8]	; (80a0b58 <GetReadHandler+0x10>)
 80a0b4e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
        return NULL;
 80a0b52:	2000      	movhi	r0, #0
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
#endif
}
 80a0b54:	4770      	bx	lr
 80a0b56:	bf00      	nop
 80a0b58:	080a2b88 	.word	0x080a2b88

080a0b5c <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
 80a0b5c:	287f      	cmp	r0, #127	; 0x7f
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
 80a0b5e:	bf9a      	itte	ls
 80a0b60:	4b02      	ldrls	r3, [pc, #8]	; (80a0b6c <GetWriteHandler+0x10>)
 80a0b62:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
}

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
        return NULL;
 80a0b66:	2000      	movhi	r0, #0
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
#endif
}
 80a0b68:	4770      	bx	lr
 80a0b6a:	bf00      	nop
 80a0b6c:	080a2988 	.word	0x080a2988

080a0b70 <_GLOBAL__sub_I_BlynkNoOpCbk>:
 80a0b70:	f000 b92e 	b.w	80a0dd0 <HAL_Pin_Map>

080a0b74 <_ZN10BlynkTimerC1Ev>:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }


SimpleTimer::SimpleTimer()
    : numTimers (-1)
 80a0b74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a0b78:	f8c0 3240 	str.w	r3, [r0, #576]	; 0x240
{
}
 80a0b7c:	4770      	bx	lr

080a0b7e <_ZN10BlynkTimer4initEv>:

void SimpleTimer::init() {
 80a0b7e:	b570      	push	{r4, r5, r6, lr}
 80a0b80:	4605      	mov	r5, r0
#include "Blynk/BlynkTimer.h"
#include <string.h>

// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }
 80a0b82:	f7ff ffd9 	bl	80a0b38 <_Z11BlynkMillisv>
 80a0b86:	4606      	mov	r6, r0
 80a0b88:	2400      	movs	r4, #0

void SimpleTimer::init() {
    unsigned long current_millis = elapsed();

    for (int i = 0; i < MAX_TIMERS; i++) {
        memset(&timer[i], 0, sizeof (timer_t));
 80a0b8a:	1928      	adds	r0, r5, r4
 80a0b8c:	2224      	movs	r2, #36	; 0x24
 80a0b8e:	2100      	movs	r1, #0
 80a0b90:	f001 fdc3 	bl	80a271a <memset>
        timer[i].prev_millis = current_millis;
 80a0b94:	512e      	str	r6, [r5, r4]
 80a0b96:	3424      	adds	r4, #36	; 0x24
}

void SimpleTimer::init() {
    unsigned long current_millis = elapsed();

    for (int i = 0; i < MAX_TIMERS; i++) {
 80a0b98:	f5b4 7f10 	cmp.w	r4, #576	; 0x240
 80a0b9c:	d1f5      	bne.n	80a0b8a <_ZN10BlynkTimer4initEv+0xc>
        memset(&timer[i], 0, sizeof (timer_t));
        timer[i].prev_millis = current_millis;
    }

    numTimers = 0;
 80a0b9e:	2300      	movs	r3, #0
 80a0ba0:	f8c5 3240 	str.w	r3, [r5, #576]	; 0x240
 80a0ba4:	bd70      	pop	{r4, r5, r6, pc}

080a0ba6 <_ZN10BlynkTimer17findFirstFreeSlotEv>:

// find the first available slot
// return -1 if none found
int SimpleTimer::findFirstFreeSlot() {
    // all slots are used
    if (numTimers >= MAX_TIMERS) {
 80a0ba6:	f8d0 3240 	ldr.w	r3, [r0, #576]	; 0x240
 80a0baa:	2b0f      	cmp	r3, #15
 80a0bac:	dc08      	bgt.n	80a0bc0 <_ZN10BlynkTimer17findFirstFreeSlotEv+0x1a>
 80a0bae:	2300      	movs	r3, #0
        return -1;
    }

    // return the first slot with no callback (i.e. free)
    for (int i = 0; i < MAX_TIMERS; i++) {
        if (timer[i].callback == NULL) {
 80a0bb0:	2224      	movs	r2, #36	; 0x24
 80a0bb2:	fb02 0103 	mla	r1, r2, r3, r0
 80a0bb6:	6849      	ldr	r1, [r1, #4]
 80a0bb8:	b129      	cbz	r1, 80a0bc6 <_ZN10BlynkTimer17findFirstFreeSlotEv+0x20>
    if (numTimers >= MAX_TIMERS) {
        return -1;
    }

    // return the first slot with no callback (i.e. free)
    for (int i = 0; i < MAX_TIMERS; i++) {
 80a0bba:	3301      	adds	r3, #1
 80a0bbc:	2b10      	cmp	r3, #16
 80a0bbe:	d1f8      	bne.n	80a0bb2 <_ZN10BlynkTimer17findFirstFreeSlotEv+0xc>
// find the first available slot
// return -1 if none found
int SimpleTimer::findFirstFreeSlot() {
    // all slots are used
    if (numTimers >= MAX_TIMERS) {
        return -1;
 80a0bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a0bc4:	4770      	bx	lr
 80a0bc6:	4618      	mov	r0, r3
        }
    }

    // no free slots found
    return -1;
}
 80a0bc8:	4770      	bx	lr

080a0bca <_ZN10BlynkTimer10setupTimerEmPvS0_bj>:


int SimpleTimer::setupTimer(unsigned long d, void* f, void* p, bool h, unsigned n) {
 80a0bca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a0bce:	4698      	mov	r8, r3
    int freeTimer;

    if (numTimers < 0) {
 80a0bd0:	f8d0 3240 	ldr.w	r3, [r0, #576]	; 0x240
    // no free slots found
    return -1;
}


int SimpleTimer::setupTimer(unsigned long d, void* f, void* p, bool h, unsigned n) {
 80a0bd4:	4605      	mov	r5, r0
    int freeTimer;

    if (numTimers < 0) {
 80a0bd6:	2b00      	cmp	r3, #0
    // no free slots found
    return -1;
}


int SimpleTimer::setupTimer(unsigned long d, void* f, void* p, bool h, unsigned n) {
 80a0bd8:	4689      	mov	r9, r1
 80a0bda:	4617      	mov	r7, r2
    int freeTimer;

    if (numTimers < 0) {
 80a0bdc:	da01      	bge.n	80a0be2 <_ZN10BlynkTimer10setupTimerEmPvS0_bj+0x18>
        init();
 80a0bde:	f7ff ffce 	bl	80a0b7e <_ZN10BlynkTimer4initEv>
    }

    freeTimer = findFirstFreeSlot();
 80a0be2:	4628      	mov	r0, r5
 80a0be4:	f7ff ffdf 	bl	80a0ba6 <_ZN10BlynkTimer17findFirstFreeSlotEv>
    if (freeTimer < 0) {
 80a0be8:	1e04      	subs	r4, r0, #0
 80a0bea:	db1a      	blt.n	80a0c22 <_ZN10BlynkTimer10setupTimerEmPvS0_bj+0x58>
        return -1;
    }

    if (f == NULL) {
 80a0bec:	b1cf      	cbz	r7, 80a0c22 <_ZN10BlynkTimer10setupTimerEmPvS0_bj+0x58>
        return -1;
    }

    timer[freeTimer].delay = d;
 80a0bee:	2624      	movs	r6, #36	; 0x24
 80a0bf0:	4366      	muls	r6, r4
    timer[freeTimer].callback = f;
    timer[freeTimer].param = p;
    timer[freeTimer].hasParam = h;
 80a0bf2:	f89d 2020 	ldrb.w	r2, [sp, #32]

    if (f == NULL) {
        return -1;
    }

    timer[freeTimer].delay = d;
 80a0bf6:	19ab      	adds	r3, r5, r6
    timer[freeTimer].callback = f;
    timer[freeTimer].param = p;
    timer[freeTimer].hasParam = h;
 80a0bf8:	731a      	strb	r2, [r3, #12]
    timer[freeTimer].maxNumRuns = n;
 80a0bfa:	9a09      	ldr	r2, [sp, #36]	; 0x24

    if (f == NULL) {
        return -1;
    }

    timer[freeTimer].delay = d;
 80a0bfc:	f8c3 9010 	str.w	r9, [r3, #16]
    timer[freeTimer].callback = f;
    timer[freeTimer].param = p;
    timer[freeTimer].hasParam = h;
    timer[freeTimer].maxNumRuns = n;
 80a0c00:	615a      	str	r2, [r3, #20]
    timer[freeTimer].enabled = true;
 80a0c02:	2201      	movs	r2, #1
    if (f == NULL) {
        return -1;
    }

    timer[freeTimer].delay = d;
    timer[freeTimer].callback = f;
 80a0c04:	605f      	str	r7, [r3, #4]
    timer[freeTimer].param = p;
 80a0c06:	f8c3 8008 	str.w	r8, [r3, #8]
    timer[freeTimer].hasParam = h;
    timer[freeTimer].maxNumRuns = n;
    timer[freeTimer].enabled = true;
 80a0c0a:	771a      	strb	r2, [r3, #28]
#include "Blynk/BlynkTimer.h"
#include <string.h>

// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }
 80a0c0c:	f7ff ff94 	bl	80a0b38 <_Z11BlynkMillisv>
    timer[freeTimer].callback = f;
    timer[freeTimer].param = p;
    timer[freeTimer].hasParam = h;
    timer[freeTimer].maxNumRuns = n;
    timer[freeTimer].enabled = true;
    timer[freeTimer].prev_millis = elapsed();
 80a0c10:	51a8      	str	r0, [r5, r6]

    numTimers++;
 80a0c12:	f8d5 3240 	ldr.w	r3, [r5, #576]	; 0x240

    return freeTimer;
 80a0c16:	4620      	mov	r0, r4
    timer[freeTimer].hasParam = h;
    timer[freeTimer].maxNumRuns = n;
    timer[freeTimer].enabled = true;
    timer[freeTimer].prev_millis = elapsed();

    numTimers++;
 80a0c18:	3301      	adds	r3, #1
 80a0c1a:	f8c5 3240 	str.w	r3, [r5, #576]	; 0x240

    return freeTimer;
 80a0c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        init();
    }

    freeTimer = findFirstFreeSlot();
    if (freeTimer < 0) {
        return -1;
 80a0c22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    timer[freeTimer].prev_millis = elapsed();

    numTimers++;

    return freeTimer;
}
 80a0c26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a0c2a <_ZN10BlynkTimer11setIntervalEmPFvvE>:

int SimpleTimer::setTimer(unsigned long d, timer_callback_p f, void* p, unsigned n) {
  return setupTimer(d, (void *)f, p, true, n);
}

int SimpleTimer::setInterval(unsigned long d, timer_callback f) {
 80a0c2a:	b507      	push	{r0, r1, r2, lr}
    return setupTimer(d, (void *)f, NULL, false, RUN_FOREVER);
 80a0c2c:	2300      	movs	r3, #0
 80a0c2e:	9301      	str	r3, [sp, #4]
 80a0c30:	9300      	str	r3, [sp, #0]
 80a0c32:	f7ff ffca 	bl	80a0bca <_ZN10BlynkTimer10setupTimerEmPvS0_bj>
}
 80a0c36:	b003      	add	sp, #12
 80a0c38:	f85d fb04 	ldr.w	pc, [sp], #4

080a0c3c <_ZN10BlynkTimer11deleteTimerEj>:
    // false return for non-used numTimer, no callback
    return false;
}

void SimpleTimer::deleteTimer(unsigned timerId) {
    if (timerId >= MAX_TIMERS) {
 80a0c3c:	290f      	cmp	r1, #15
    }
    // false return for non-used numTimer, no callback
    return false;
}

void SimpleTimer::deleteTimer(unsigned timerId) {
 80a0c3e:	b538      	push	{r3, r4, r5, lr}
 80a0c40:	4604      	mov	r4, r0
    if (timerId >= MAX_TIMERS) {
 80a0c42:	d813      	bhi.n	80a0c6c <_ZN10BlynkTimer11deleteTimerEj+0x30>
        return;
    }

    // nothing to delete if no timers are in use
    if (numTimers == 0) {
 80a0c44:	f8d0 3240 	ldr.w	r3, [r0, #576]	; 0x240
 80a0c48:	b183      	cbz	r3, 80a0c6c <_ZN10BlynkTimer11deleteTimerEj+0x30>
 80a0c4a:	2224      	movs	r2, #36	; 0x24
 80a0c4c:	fb02 f501 	mul.w	r5, r2, r1
 80a0c50:	4428      	add	r0, r5
        return;
    }

    // don't decrease the number of timers if the
    // specified slot is already empty
    if (timer[timerId].callback != NULL) {
 80a0c52:	6843      	ldr	r3, [r0, #4]
 80a0c54:	b153      	cbz	r3, 80a0c6c <_ZN10BlynkTimer11deleteTimerEj+0x30>
        memset(&timer[timerId], 0, sizeof (timer_t));
 80a0c56:	2100      	movs	r1, #0
 80a0c58:	f001 fd5f 	bl	80a271a <memset>
#include "Blynk/BlynkTimer.h"
#include <string.h>

// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }
 80a0c5c:	f7ff ff6c 	bl	80a0b38 <_Z11BlynkMillisv>

    // don't decrease the number of timers if the
    // specified slot is already empty
    if (timer[timerId].callback != NULL) {
        memset(&timer[timerId], 0, sizeof (timer_t));
        timer[timerId].prev_millis = elapsed();
 80a0c60:	5160      	str	r0, [r4, r5]

        // update number of timers
        numTimers--;
 80a0c62:	f8d4 3240 	ldr.w	r3, [r4, #576]	; 0x240
 80a0c66:	3b01      	subs	r3, #1
 80a0c68:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
 80a0c6c:	bd38      	pop	{r3, r4, r5, pc}

080a0c6e <_ZN10BlynkTimer3runEv>:

    numTimers = 0;
}


void SimpleTimer::run() {
 80a0c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0c72:	4605      	mov	r5, r0
                    if (timer[i].maxNumRuns == RUN_FOREVER) {
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
                    }
                    // other timers get executed the specified number of times
                    else if (timer[i].numRuns < timer[i].maxNumRuns) {
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
 80a0c74:	2601      	movs	r6, #1
#include "Blynk/BlynkTimer.h"
#include <string.h>

// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }
 80a0c76:	f7ff ff5f 	bl	80a0b38 <_Z11BlynkMillisv>
 80a0c7a:	f505 7711 	add.w	r7, r5, #580	; 0x244
 80a0c7e:	1d2b      	adds	r3, r5, #4
    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {

        timer[i].toBeCalled = DEFCALL_DONTRUN;
 80a0c80:	f04f 0e00 	mov.w	lr, #0
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
                        timer[i].numRuns++;

                        // after the last run, delete the timer
                        if (timer[i].numRuns >= timer[i].maxNumRuns) {
                            timer[i].toBeCalled = DEFCALL_RUNANDDEL;
 80a0c84:	f04f 0c02 	mov.w	ip, #2
    for (i = 0; i < MAX_TIMERS; i++) {

        timer[i].toBeCalled = DEFCALL_DONTRUN;

        // no callback == no timer, i.e. jump over empty slots
        if (timer[i].callback != NULL) {
 80a0c88:	681a      	ldr	r2, [r3, #0]
    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {

        timer[i].toBeCalled = DEFCALL_DONTRUN;
 80a0c8a:	f8c3 e01c 	str.w	lr, [r3, #28]

        // no callback == no timer, i.e. jump over empty slots
        if (timer[i].callback != NULL) {
 80a0c8e:	b1e2      	cbz	r2, 80a0cca <_ZN10BlynkTimer3runEv+0x5c>

            // is it time to process this timer ?
            // see http://arduino.cc/forum/index.php/topic,124048.msg932592.html#msg932592

            if ((current_millis - timer[i].prev_millis) >= timer[i].delay) {
 80a0c90:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80a0c94:	68dc      	ldr	r4, [r3, #12]
 80a0c96:	ebc8 0200 	rsb	r2, r8, r0
 80a0c9a:	42a2      	cmp	r2, r4
 80a0c9c:	d315      	bcc.n	80a0cca <_ZN10BlynkTimer3runEv+0x5c>

                unsigned long skipTimes = (current_millis - timer[i].prev_millis) / timer[i].delay;
                // update time
                timer[i].prev_millis += timer[i].delay * skipTimes;
 80a0c9e:	fbb2 f1f4 	udiv	r1, r2, r4
 80a0ca2:	fb04 8201 	mla	r2, r4, r1, r8
 80a0ca6:	f843 2c04 	str.w	r2, [r3, #-4]

                // check if the timer callback has to be executed
                if (timer[i].enabled) {
 80a0caa:	7e1a      	ldrb	r2, [r3, #24]
 80a0cac:	b16a      	cbz	r2, 80a0cca <_ZN10BlynkTimer3runEv+0x5c>

                    // "run forever" timers must always be executed
                    if (timer[i].maxNumRuns == RUN_FOREVER) {
 80a0cae:	6919      	ldr	r1, [r3, #16]
 80a0cb0:	b909      	cbnz	r1, 80a0cb6 <_ZN10BlynkTimer3runEv+0x48>
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
 80a0cb2:	61de      	str	r6, [r3, #28]
 80a0cb4:	e009      	b.n	80a0cca <_ZN10BlynkTimer3runEv+0x5c>
                    }
                    // other timers get executed the specified number of times
                    else if (timer[i].numRuns < timer[i].maxNumRuns) {
 80a0cb6:	695a      	ldr	r2, [r3, #20]
 80a0cb8:	4291      	cmp	r1, r2
 80a0cba:	d906      	bls.n	80a0cca <_ZN10BlynkTimer3runEv+0x5c>
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
                        timer[i].numRuns++;
 80a0cbc:	3201      	adds	r2, #1

                        // after the last run, delete the timer
                        if (timer[i].numRuns >= timer[i].maxNumRuns) {
 80a0cbe:	4291      	cmp	r1, r2
                    if (timer[i].maxNumRuns == RUN_FOREVER) {
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
                    }
                    // other timers get executed the specified number of times
                    else if (timer[i].numRuns < timer[i].maxNumRuns) {
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
 80a0cc0:	61de      	str	r6, [r3, #28]
                        timer[i].numRuns++;
 80a0cc2:	615a      	str	r2, [r3, #20]

                        // after the last run, delete the timer
                        if (timer[i].numRuns >= timer[i].maxNumRuns) {
                            timer[i].toBeCalled = DEFCALL_RUNANDDEL;
 80a0cc4:	bf98      	it	ls
 80a0cc6:	f8c3 c01c 	strls.w	ip, [r3, #28]
 80a0cca:	3324      	adds	r3, #36	; 0x24
    unsigned long current_millis;

    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {
 80a0ccc:	42bb      	cmp	r3, r7
 80a0cce:	d1db      	bne.n	80a0c88 <_ZN10BlynkTimer3runEv+0x1a>
 80a0cd0:	462c      	mov	r4, r5
 80a0cd2:	2600      	movs	r6, #0
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
        if (timer[i].toBeCalled == DEFCALL_DONTRUN)
 80a0cd4:	6a23      	ldr	r3, [r4, #32]
 80a0cd6:	b16b      	cbz	r3, 80a0cf4 <_ZN10BlynkTimer3runEv+0x86>
            continue;

        if (timer[i].hasParam)
 80a0cd8:	7b22      	ldrb	r2, [r4, #12]
 80a0cda:	6863      	ldr	r3, [r4, #4]
 80a0cdc:	b112      	cbz	r2, 80a0ce4 <_ZN10BlynkTimer3runEv+0x76>
            (*(timer_callback_p)timer[i].callback)(timer[i].param);
 80a0cde:	68a0      	ldr	r0, [r4, #8]
 80a0ce0:	4798      	blx	r3
 80a0ce2:	e000      	b.n	80a0ce6 <_ZN10BlynkTimer3runEv+0x78>
        else
            (*(timer_callback)timer[i].callback)();
 80a0ce4:	4798      	blx	r3

        if (timer[i].toBeCalled == DEFCALL_RUNANDDEL)
 80a0ce6:	6a23      	ldr	r3, [r4, #32]
 80a0ce8:	2b02      	cmp	r3, #2
 80a0cea:	d103      	bne.n	80a0cf4 <_ZN10BlynkTimer3runEv+0x86>
            deleteTimer(i);
 80a0cec:	4631      	mov	r1, r6
 80a0cee:	4628      	mov	r0, r5
 80a0cf0:	f7ff ffa4 	bl	80a0c3c <_ZN10BlynkTimer11deleteTimerEj>
                }
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
 80a0cf4:	3601      	adds	r6, #1
 80a0cf6:	2e10      	cmp	r6, #16
 80a0cf8:	f104 0424 	add.w	r4, r4, #36	; 0x24
 80a0cfc:	d1ea      	bne.n	80a0cd4 <_ZN10BlynkTimer3runEv+0x66>
            (*(timer_callback)timer[i].callback)();

        if (timer[i].toBeCalled == DEFCALL_RUNANDDEL)
            deleteTimer(i);
    }
}
 80a0cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0d02 <_GLOBAL__sub_I__ZN10BlynkTimerC2Ev>:
 80a0d02:	f000 b865 	b.w	80a0dd0 <HAL_Pin_Map>

080a0d06 <_ZN10UltrasonicC1Ei>:

#endif

Ultrasonic::Ultrasonic(int pin)
{
	_pin = pin;
 80a0d06:	6001      	str	r1, [r0, #0]
}
 80a0d08:	4770      	bx	lr
	...

080a0d0c <_ZN10Ultrasonic20MeasureInCentimetersEv>:
/*The measured distance from the range 0 to 400 Centimeters*/
long Ultrasonic::MeasureInCentimeters(void)
{
 80a0d0c:	b570      	push	{r4, r5, r6, lr}
 80a0d0e:	4604      	mov	r4, r0
	pinMode(_pin, OUTPUT);
 80a0d10:	2101      	movs	r1, #1
 80a0d12:	8800      	ldrh	r0, [r0, #0]
 80a0d14:	f000 fff6 	bl	80a1d04 <pinMode>
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
}

inline void pinResetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 80a0d18:	8823      	ldrh	r3, [r4, #0]
 80a0d1a:	251c      	movs	r5, #28
 80a0d1c:	4e13      	ldr	r6, [pc, #76]	; (80a0d6c <_ZN10Ultrasonic20MeasureInCentimetersEv+0x60>)
 80a0d1e:	436b      	muls	r3, r5
 80a0d20:	6832      	ldr	r2, [r6, #0]
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a0d22:	2002      	movs	r0, #2
 80a0d24:	18d1      	adds	r1, r2, r3
 80a0d26:	58d3      	ldr	r3, [r2, r3]
 80a0d28:	888a      	ldrh	r2, [r1, #4]
 80a0d2a:	835a      	strh	r2, [r3, #26]
 80a0d2c:	f000 f840 	bl	80a0db0 <HAL_Delay_Microseconds>
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80a0d30:	8823      	ldrh	r3, [r4, #0]
 80a0d32:	6832      	ldr	r2, [r6, #0]
 80a0d34:	436b      	muls	r3, r5
 80a0d36:	18d1      	adds	r1, r2, r3
 80a0d38:	58d3      	ldr	r3, [r2, r3]
 80a0d3a:	888a      	ldrh	r2, [r1, #4]
 80a0d3c:	2005      	movs	r0, #5
 80a0d3e:	831a      	strh	r2, [r3, #24]
 80a0d40:	f000 f836 	bl	80a0db0 <HAL_Delay_Microseconds>
}

inline void pinResetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 80a0d44:	8823      	ldrh	r3, [r4, #0]
	pinResetFast(_pin);
	delayMicroseconds(2);
	pinSetFast(_pin);
	delayMicroseconds(5);
	pinResetFast(_pin);
	pinMode(_pin,INPUT);
 80a0d46:	2100      	movs	r1, #0
 80a0d48:	435d      	muls	r5, r3
 80a0d4a:	6833      	ldr	r3, [r6, #0]
 80a0d4c:	195a      	adds	r2, r3, r5
 80a0d4e:	8892      	ldrh	r2, [r2, #4]
 80a0d50:	595b      	ldr	r3, [r3, r5]
 80a0d52:	835a      	strh	r2, [r3, #26]
 80a0d54:	8820      	ldrh	r0, [r4, #0]
 80a0d56:	f000 ffd5 	bl	80a1d04 <pinMode>
	long duration;
	duration = pulseIn(_pin,HIGH);
 80a0d5a:	2101      	movs	r1, #1
 80a0d5c:	8820      	ldrh	r0, [r4, #0]
 80a0d5e:	f001 f84b 	bl	80a1df8 <pulseIn>
	long RangeInCentimeters;
	RangeInCentimeters = duration/29/2;
	return RangeInCentimeters;
}
 80a0d62:	233a      	movs	r3, #58	; 0x3a
 80a0d64:	fb90 f0f3 	sdiv	r0, r0, r3
 80a0d68:	bd70      	pop	{r4, r5, r6, pc}
 80a0d6a:	bf00      	nop
 80a0d6c:	2000063c 	.word	0x2000063c

080a0d70 <_GLOBAL__sub_I__ZN10UltrasonicC2Ei>:
	long duration;
	duration = pulseIn(_pin,HIGH);
	long RangeInInches;
	RangeInInches = duration/74/2;
	return RangeInInches;
}
 80a0d70:	b508      	push	{r3, lr}
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0d72:	f000 f82d 	bl	80a0dd0 <HAL_Pin_Map>
 80a0d76:	4b01      	ldr	r3, [pc, #4]	; (80a0d7c <_GLOBAL__sub_I__ZN10UltrasonicC2Ei+0xc>)
 80a0d78:	6018      	str	r0, [r3, #0]
 80a0d7a:	bd08      	pop	{r3, pc}
 80a0d7c:	2000063c 	.word	0x2000063c

080a0d80 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a0d80:	b508      	push	{r3, lr}
 80a0d82:	4b02      	ldr	r3, [pc, #8]	; (80a0d8c <os_mutex_create+0xc>)
 80a0d84:	681b      	ldr	r3, [r3, #0]
 80a0d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0d88:	9301      	str	r3, [sp, #4]
 80a0d8a:	bd08      	pop	{r3, pc}
 80a0d8c:	080601d0 	.word	0x080601d0

080a0d90 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 80a0d90:	b508      	push	{r3, lr}
 80a0d92:	4b02      	ldr	r3, [pc, #8]	; (80a0d9c <HAL_Core_Get_Last_Reset_Info+0xc>)
 80a0d94:	681b      	ldr	r3, [r3, #0]
 80a0d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0d98:	9301      	str	r3, [sp, #4]
 80a0d9a:	bd08      	pop	{r3, pc}
 80a0d9c:	080601b8 	.word	0x080601b8

080a0da0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0da0:	b508      	push	{r3, lr}
 80a0da2:	4b02      	ldr	r3, [pc, #8]	; (80a0dac <HAL_RNG_GetRandomNumber+0xc>)
 80a0da4:	681b      	ldr	r3, [r3, #0]
 80a0da6:	685b      	ldr	r3, [r3, #4]
 80a0da8:	9301      	str	r3, [sp, #4]
 80a0daa:	bd08      	pop	{r3, pc}
 80a0dac:	0806019c 	.word	0x0806019c

080a0db0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a0db0:	b508      	push	{r3, lr}
 80a0db2:	4b02      	ldr	r3, [pc, #8]	; (80a0dbc <HAL_Delay_Microseconds+0xc>)
 80a0db4:	681b      	ldr	r3, [r3, #0]
 80a0db6:	68db      	ldr	r3, [r3, #12]
 80a0db8:	9301      	str	r3, [sp, #4]
 80a0dba:	bd08      	pop	{r3, pc}
 80a0dbc:	0806019c 	.word	0x0806019c

080a0dc0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0dc0:	b508      	push	{r3, lr}
 80a0dc2:	4b02      	ldr	r3, [pc, #8]	; (80a0dcc <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0dc4:	681b      	ldr	r3, [r3, #0]
 80a0dc6:	695b      	ldr	r3, [r3, #20]
 80a0dc8:	9301      	str	r3, [sp, #4]
 80a0dca:	bd08      	pop	{r3, pc}
 80a0dcc:	0806019c 	.word	0x0806019c

080a0dd0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a0dd0:	b508      	push	{r3, lr}
 80a0dd2:	4b02      	ldr	r3, [pc, #8]	; (80a0ddc <HAL_Pin_Map+0xc>)
 80a0dd4:	681b      	ldr	r3, [r3, #0]
 80a0dd6:	681b      	ldr	r3, [r3, #0]
 80a0dd8:	9301      	str	r3, [sp, #4]
 80a0dda:	bd08      	pop	{r3, pc}
 80a0ddc:	080601b0 	.word	0x080601b0

080a0de0 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a0de0:	b508      	push	{r3, lr}
 80a0de2:	4b02      	ldr	r3, [pc, #8]	; (80a0dec <HAL_Validate_Pin_Function+0xc>)
 80a0de4:	681b      	ldr	r3, [r3, #0]
 80a0de6:	685b      	ldr	r3, [r3, #4]
 80a0de8:	9301      	str	r3, [sp, #4]
 80a0dea:	bd08      	pop	{r3, pc}
 80a0dec:	080601b0 	.word	0x080601b0

080a0df0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0df0:	b508      	push	{r3, lr}
 80a0df2:	4b02      	ldr	r3, [pc, #8]	; (80a0dfc <HAL_Pin_Mode+0xc>)
 80a0df4:	681b      	ldr	r3, [r3, #0]
 80a0df6:	689b      	ldr	r3, [r3, #8]
 80a0df8:	9301      	str	r3, [sp, #4]
 80a0dfa:	bd08      	pop	{r3, pc}
 80a0dfc:	080601b0 	.word	0x080601b0

080a0e00 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0e00:	b508      	push	{r3, lr}
 80a0e02:	4b02      	ldr	r3, [pc, #8]	; (80a0e0c <HAL_Get_Pin_Mode+0xc>)
 80a0e04:	681b      	ldr	r3, [r3, #0]
 80a0e06:	68db      	ldr	r3, [r3, #12]
 80a0e08:	9301      	str	r3, [sp, #4]
 80a0e0a:	bd08      	pop	{r3, pc}
 80a0e0c:	080601b0 	.word	0x080601b0

080a0e10 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0e10:	b508      	push	{r3, lr}
 80a0e12:	4b02      	ldr	r3, [pc, #8]	; (80a0e1c <HAL_GPIO_Write+0xc>)
 80a0e14:	681b      	ldr	r3, [r3, #0]
 80a0e16:	691b      	ldr	r3, [r3, #16]
 80a0e18:	9301      	str	r3, [sp, #4]
 80a0e1a:	bd08      	pop	{r3, pc}
 80a0e1c:	080601b0 	.word	0x080601b0

080a0e20 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a0e20:	b508      	push	{r3, lr}
 80a0e22:	4b02      	ldr	r3, [pc, #8]	; (80a0e2c <HAL_GPIO_Read+0xc>)
 80a0e24:	681b      	ldr	r3, [r3, #0]
 80a0e26:	695b      	ldr	r3, [r3, #20]
 80a0e28:	9301      	str	r3, [sp, #4]
 80a0e2a:	bd08      	pop	{r3, pc}
 80a0e2c:	080601b0 	.word	0x080601b0

080a0e30 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
 80a0e30:	b508      	push	{r3, lr}
 80a0e32:	4b02      	ldr	r3, [pc, #8]	; (80a0e3c <HAL_DAC_Write+0xc>)
 80a0e34:	681b      	ldr	r3, [r3, #0]
 80a0e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0e38:	9301      	str	r3, [sp, #4]
 80a0e3a:	bd08      	pop	{r3, pc}
 80a0e3c:	080601b0 	.word	0x080601b0

080a0e40 <HAL_ADC_Read>:
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 80a0e40:	b508      	push	{r3, lr}
 80a0e42:	4b02      	ldr	r3, [pc, #8]	; (80a0e4c <HAL_ADC_Read+0xc>)
 80a0e44:	681b      	ldr	r3, [r3, #0]
 80a0e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0e48:	9301      	str	r3, [sp, #4]
 80a0e4a:	bd08      	pop	{r3, pc}
 80a0e4c:	080601b0 	.word	0x080601b0

080a0e50 <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
 80a0e50:	b508      	push	{r3, lr}
 80a0e52:	4b02      	ldr	r3, [pc, #8]	; (80a0e5c <HAL_Pulse_In+0xc>)
 80a0e54:	681b      	ldr	r3, [r3, #0]
 80a0e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0e58:	9301      	str	r3, [sp, #4]
 80a0e5a:	bd08      	pop	{r3, pc}
 80a0e5c:	080601b0 	.word	0x080601b0

080a0e60 <HAL_PWM_Write_Ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
 80a0e60:	b508      	push	{r3, lr}
 80a0e62:	4b02      	ldr	r3, [pc, #8]	; (80a0e6c <HAL_PWM_Write_Ext+0xc>)
 80a0e64:	681b      	ldr	r3, [r3, #0]
 80a0e66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80a0e68:	9301      	str	r3, [sp, #4]
 80a0e6a:	bd08      	pop	{r3, pc}
 80a0e6c:	080601b0 	.word	0x080601b0

080a0e70 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a0e70:	b508      	push	{r3, lr}
 80a0e72:	4b02      	ldr	r3, [pc, #8]	; (80a0e7c <HAL_I2C_Write_Data+0xc>)
 80a0e74:	681b      	ldr	r3, [r3, #0]
 80a0e76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0e78:	9301      	str	r3, [sp, #4]
 80a0e7a:	bd08      	pop	{r3, pc}
 80a0e7c:	080601ac 	.word	0x080601ac

080a0e80 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a0e80:	b508      	push	{r3, lr}
 80a0e82:	4b02      	ldr	r3, [pc, #8]	; (80a0e8c <HAL_I2C_Available_Data+0xc>)
 80a0e84:	681b      	ldr	r3, [r3, #0]
 80a0e86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0e88:	9301      	str	r3, [sp, #4]
 80a0e8a:	bd08      	pop	{r3, pc}
 80a0e8c:	080601ac 	.word	0x080601ac

080a0e90 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a0e90:	b508      	push	{r3, lr}
 80a0e92:	4b02      	ldr	r3, [pc, #8]	; (80a0e9c <HAL_I2C_Read_Data+0xc>)
 80a0e94:	681b      	ldr	r3, [r3, #0]
 80a0e96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0e98:	9301      	str	r3, [sp, #4]
 80a0e9a:	bd08      	pop	{r3, pc}
 80a0e9c:	080601ac 	.word	0x080601ac

080a0ea0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0ea0:	b508      	push	{r3, lr}
 80a0ea2:	4b02      	ldr	r3, [pc, #8]	; (80a0eac <HAL_I2C_Peek_Data+0xc>)
 80a0ea4:	681b      	ldr	r3, [r3, #0]
 80a0ea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0ea8:	9301      	str	r3, [sp, #4]
 80a0eaa:	bd08      	pop	{r3, pc}
 80a0eac:	080601ac 	.word	0x080601ac

080a0eb0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a0eb0:	b508      	push	{r3, lr}
 80a0eb2:	4b02      	ldr	r3, [pc, #8]	; (80a0ebc <HAL_I2C_Flush_Data+0xc>)
 80a0eb4:	681b      	ldr	r3, [r3, #0]
 80a0eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0eb8:	9301      	str	r3, [sp, #4]
 80a0eba:	bd08      	pop	{r3, pc}
 80a0ebc:	080601ac 	.word	0x080601ac

080a0ec0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a0ec0:	b508      	push	{r3, lr}
 80a0ec2:	4b02      	ldr	r3, [pc, #8]	; (80a0ecc <HAL_I2C_Is_Enabled+0xc>)
 80a0ec4:	681b      	ldr	r3, [r3, #0]
 80a0ec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0ec8:	9301      	str	r3, [sp, #4]
 80a0eca:	bd08      	pop	{r3, pc}
 80a0ecc:	080601ac 	.word	0x080601ac

080a0ed0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a0ed0:	b508      	push	{r3, lr}
 80a0ed2:	4b03      	ldr	r3, [pc, #12]	; (80a0ee0 <HAL_I2C_Init+0x10>)
 80a0ed4:	681b      	ldr	r3, [r3, #0]
 80a0ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0eda:	9301      	str	r3, [sp, #4]
 80a0edc:	bd08      	pop	{r3, pc}
 80a0ede:	0000      	.short	0x0000
 80a0ee0:	080601ac 	.word	0x080601ac

080a0ee4 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a0ee4:	b508      	push	{r3, lr}
 80a0ee6:	4b02      	ldr	r3, [pc, #8]	; (80a0ef0 <socket_active_status+0xc>)
 80a0ee8:	681b      	ldr	r3, [r3, #0]
 80a0eea:	681b      	ldr	r3, [r3, #0]
 80a0eec:	9301      	str	r3, [sp, #4]
 80a0eee:	bd08      	pop	{r3, pc}
 80a0ef0:	080601bc 	.word	0x080601bc

080a0ef4 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a0ef4:	b508      	push	{r3, lr}
 80a0ef6:	4b02      	ldr	r3, [pc, #8]	; (80a0f00 <socket_handle_valid+0xc>)
 80a0ef8:	681b      	ldr	r3, [r3, #0]
 80a0efa:	685b      	ldr	r3, [r3, #4]
 80a0efc:	9301      	str	r3, [sp, #4]
 80a0efe:	bd08      	pop	{r3, pc}
 80a0f00:	080601bc 	.word	0x080601bc

080a0f04 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a0f04:	b508      	push	{r3, lr}
 80a0f06:	4b02      	ldr	r3, [pc, #8]	; (80a0f10 <socket_create+0xc>)
 80a0f08:	681b      	ldr	r3, [r3, #0]
 80a0f0a:	689b      	ldr	r3, [r3, #8]
 80a0f0c:	9301      	str	r3, [sp, #4]
 80a0f0e:	bd08      	pop	{r3, pc}
 80a0f10:	080601bc 	.word	0x080601bc

080a0f14 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a0f14:	b508      	push	{r3, lr}
 80a0f16:	4b02      	ldr	r3, [pc, #8]	; (80a0f20 <socket_connect+0xc>)
 80a0f18:	681b      	ldr	r3, [r3, #0]
 80a0f1a:	68db      	ldr	r3, [r3, #12]
 80a0f1c:	9301      	str	r3, [sp, #4]
 80a0f1e:	bd08      	pop	{r3, pc}
 80a0f20:	080601bc 	.word	0x080601bc

080a0f24 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a0f24:	b508      	push	{r3, lr}
 80a0f26:	4b02      	ldr	r3, [pc, #8]	; (80a0f30 <socket_receive+0xc>)
 80a0f28:	681b      	ldr	r3, [r3, #0]
 80a0f2a:	691b      	ldr	r3, [r3, #16]
 80a0f2c:	9301      	str	r3, [sp, #4]
 80a0f2e:	bd08      	pop	{r3, pc}
 80a0f30:	080601bc 	.word	0x080601bc

080a0f34 <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a0f34:	b508      	push	{r3, lr}
 80a0f36:	4b02      	ldr	r3, [pc, #8]	; (80a0f40 <socket_close+0xc>)
 80a0f38:	681b      	ldr	r3, [r3, #0]
 80a0f3a:	6a1b      	ldr	r3, [r3, #32]
 80a0f3c:	9301      	str	r3, [sp, #4]
 80a0f3e:	bd08      	pop	{r3, pc}
 80a0f40:	080601bc 	.word	0x080601bc

080a0f44 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a0f44:	b508      	push	{r3, lr}
 80a0f46:	4b02      	ldr	r3, [pc, #8]	; (80a0f50 <socket_handle_invalid+0xc>)
 80a0f48:	681b      	ldr	r3, [r3, #0]
 80a0f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0f4c:	9301      	str	r3, [sp, #4]
 80a0f4e:	bd08      	pop	{r3, pc}
 80a0f50:	080601bc 	.word	0x080601bc

080a0f54 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a0f54:	b508      	push	{r3, lr}
 80a0f56:	4b02      	ldr	r3, [pc, #8]	; (80a0f60 <socket_send_ex+0xc>)
 80a0f58:	681b      	ldr	r3, [r3, #0]
 80a0f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0f5c:	9301      	str	r3, [sp, #4]
 80a0f5e:	bd08      	pop	{r3, pc}
 80a0f60:	080601bc 	.word	0x080601bc

080a0f64 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0f64:	b508      	push	{r3, lr}
 80a0f66:	4b02      	ldr	r3, [pc, #8]	; (80a0f70 <HAL_SPI_Init+0xc>)
 80a0f68:	681b      	ldr	r3, [r3, #0]
 80a0f6a:	69db      	ldr	r3, [r3, #28]
 80a0f6c:	9301      	str	r3, [sp, #4]
 80a0f6e:	bd08      	pop	{r3, pc}
 80a0f70:	080601b4 	.word	0x080601b4

080a0f74 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a0f74:	b508      	push	{r3, lr}
 80a0f76:	4b02      	ldr	r3, [pc, #8]	; (80a0f80 <HAL_SPI_Is_Enabled+0xc>)
 80a0f78:	681b      	ldr	r3, [r3, #0]
 80a0f7a:	6a1b      	ldr	r3, [r3, #32]
 80a0f7c:	9301      	str	r3, [sp, #4]
 80a0f7e:	bd08      	pop	{r3, pc}
 80a0f80:	080601b4 	.word	0x080601b4

080a0f84 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0f84:	b508      	push	{r3, lr}
 80a0f86:	4b02      	ldr	r3, [pc, #8]	; (80a0f90 <HAL_USART_Init+0xc>)
 80a0f88:	681b      	ldr	r3, [r3, #0]
 80a0f8a:	699b      	ldr	r3, [r3, #24]
 80a0f8c:	9301      	str	r3, [sp, #4]
 80a0f8e:	bd08      	pop	{r3, pc}
 80a0f90:	080601c4 	.word	0x080601c4

080a0f94 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0f94:	b508      	push	{r3, lr}
 80a0f96:	4b02      	ldr	r3, [pc, #8]	; (80a0fa0 <HAL_USART_Write_Data+0xc>)
 80a0f98:	681b      	ldr	r3, [r3, #0]
 80a0f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0f9c:	9301      	str	r3, [sp, #4]
 80a0f9e:	bd08      	pop	{r3, pc}
 80a0fa0:	080601c4 	.word	0x080601c4

080a0fa4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0fa4:	b508      	push	{r3, lr}
 80a0fa6:	4b02      	ldr	r3, [pc, #8]	; (80a0fb0 <HAL_USART_Available_Data+0xc>)
 80a0fa8:	681b      	ldr	r3, [r3, #0]
 80a0faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0fac:	9301      	str	r3, [sp, #4]
 80a0fae:	bd08      	pop	{r3, pc}
 80a0fb0:	080601c4 	.word	0x080601c4

080a0fb4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0fb4:	b508      	push	{r3, lr}
 80a0fb6:	4b02      	ldr	r3, [pc, #8]	; (80a0fc0 <HAL_USART_Read_Data+0xc>)
 80a0fb8:	681b      	ldr	r3, [r3, #0]
 80a0fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0fbc:	9301      	str	r3, [sp, #4]
 80a0fbe:	bd08      	pop	{r3, pc}
 80a0fc0:	080601c4 	.word	0x080601c4

080a0fc4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0fc4:	b508      	push	{r3, lr}
 80a0fc6:	4b02      	ldr	r3, [pc, #8]	; (80a0fd0 <HAL_USART_Peek_Data+0xc>)
 80a0fc8:	681b      	ldr	r3, [r3, #0]
 80a0fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0fcc:	9301      	str	r3, [sp, #4]
 80a0fce:	bd08      	pop	{r3, pc}
 80a0fd0:	080601c4 	.word	0x080601c4

080a0fd4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0fd4:	b508      	push	{r3, lr}
 80a0fd6:	4b02      	ldr	r3, [pc, #8]	; (80a0fe0 <HAL_USART_Flush_Data+0xc>)
 80a0fd8:	681b      	ldr	r3, [r3, #0]
 80a0fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0fdc:	9301      	str	r3, [sp, #4]
 80a0fde:	bd08      	pop	{r3, pc}
 80a0fe0:	080601c4 	.word	0x080601c4

080a0fe4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0fe4:	b508      	push	{r3, lr}
 80a0fe6:	4b02      	ldr	r3, [pc, #8]	; (80a0ff0 <HAL_USART_Is_Enabled+0xc>)
 80a0fe8:	681b      	ldr	r3, [r3, #0]
 80a0fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0fec:	9301      	str	r3, [sp, #4]
 80a0fee:	bd08      	pop	{r3, pc}
 80a0ff0:	080601c4 	.word	0x080601c4

080a0ff4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0ff4:	b508      	push	{r3, lr}
 80a0ff6:	4b02      	ldr	r3, [pc, #8]	; (80a1000 <HAL_USART_Available_Data_For_Write+0xc>)
 80a0ff8:	681b      	ldr	r3, [r3, #0]
 80a0ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0ffc:	9301      	str	r3, [sp, #4]
 80a0ffe:	bd08      	pop	{r3, pc}
 80a1000:	080601c4 	.word	0x080601c4

080a1004 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1004:	b508      	push	{r3, lr}
 80a1006:	4b02      	ldr	r3, [pc, #8]	; (80a1010 <HAL_USB_USART_Init+0xc>)
 80a1008:	681b      	ldr	r3, [r3, #0]
 80a100a:	681b      	ldr	r3, [r3, #0]
 80a100c:	9301      	str	r3, [sp, #4]
 80a100e:	bd08      	pop	{r3, pc}
 80a1010:	080601d8 	.word	0x080601d8

080a1014 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a1014:	b508      	push	{r3, lr}
 80a1016:	4b02      	ldr	r3, [pc, #8]	; (80a1020 <HAL_USB_USART_Begin+0xc>)
 80a1018:	681b      	ldr	r3, [r3, #0]
 80a101a:	685b      	ldr	r3, [r3, #4]
 80a101c:	9301      	str	r3, [sp, #4]
 80a101e:	bd08      	pop	{r3, pc}
 80a1020:	080601d8 	.word	0x080601d8

080a1024 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1024:	b508      	push	{r3, lr}
 80a1026:	4b02      	ldr	r3, [pc, #8]	; (80a1030 <HAL_USB_USART_Available_Data+0xc>)
 80a1028:	681b      	ldr	r3, [r3, #0]
 80a102a:	691b      	ldr	r3, [r3, #16]
 80a102c:	9301      	str	r3, [sp, #4]
 80a102e:	bd08      	pop	{r3, pc}
 80a1030:	080601d8 	.word	0x080601d8

080a1034 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1034:	b508      	push	{r3, lr}
 80a1036:	4b02      	ldr	r3, [pc, #8]	; (80a1040 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1038:	681b      	ldr	r3, [r3, #0]
 80a103a:	695b      	ldr	r3, [r3, #20]
 80a103c:	9301      	str	r3, [sp, #4]
 80a103e:	bd08      	pop	{r3, pc}
 80a1040:	080601d8 	.word	0x080601d8

080a1044 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1044:	b508      	push	{r3, lr}
 80a1046:	4b02      	ldr	r3, [pc, #8]	; (80a1050 <HAL_USB_USART_Receive_Data+0xc>)
 80a1048:	681b      	ldr	r3, [r3, #0]
 80a104a:	699b      	ldr	r3, [r3, #24]
 80a104c:	9301      	str	r3, [sp, #4]
 80a104e:	bd08      	pop	{r3, pc}
 80a1050:	080601d8 	.word	0x080601d8

080a1054 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1054:	b508      	push	{r3, lr}
 80a1056:	4b02      	ldr	r3, [pc, #8]	; (80a1060 <HAL_USB_USART_Send_Data+0xc>)
 80a1058:	681b      	ldr	r3, [r3, #0]
 80a105a:	69db      	ldr	r3, [r3, #28]
 80a105c:	9301      	str	r3, [sp, #4]
 80a105e:	bd08      	pop	{r3, pc}
 80a1060:	080601d8 	.word	0x080601d8

080a1064 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1064:	b508      	push	{r3, lr}
 80a1066:	4b02      	ldr	r3, [pc, #8]	; (80a1070 <HAL_USB_USART_Flush_Data+0xc>)
 80a1068:	681b      	ldr	r3, [r3, #0]
 80a106a:	6a1b      	ldr	r3, [r3, #32]
 80a106c:	9301      	str	r3, [sp, #4]
 80a106e:	bd08      	pop	{r3, pc}
 80a1070:	080601d8 	.word	0x080601d8

080a1074 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, void(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a1074:	b508      	push	{r3, lr}
 80a1076:	4b02      	ldr	r3, [pc, #8]	; (80a1080 <HAL_NET_SetNetWatchDog+0xc>)
 80a1078:	681b      	ldr	r3, [r3, #0]
 80a107a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a107c:	9301      	str	r3, [sp, #4]
 80a107e:	bd08      	pop	{r3, pc}
 80a1080:	080601c0 	.word	0x080601c0

080a1084 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1084:	b508      	push	{r3, lr}
 80a1086:	4b02      	ldr	r3, [pc, #8]	; (80a1090 <inet_gethostbyname+0xc>)
 80a1088:	681b      	ldr	r3, [r3, #0]
 80a108a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a108c:	9301      	str	r3, [sp, #4]
 80a108e:	bd08      	pop	{r3, pc}
 80a1090:	080601c0 	.word	0x080601c0

080a1094 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a1094:	b508      	push	{r3, lr}
 80a1096:	4b02      	ldr	r3, [pc, #8]	; (80a10a0 <log_message+0xc>)
 80a1098:	681b      	ldr	r3, [r3, #0]
 80a109a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a109c:	9301      	str	r3, [sp, #4]
 80a109e:	bd08      	pop	{r3, pc}
 80a10a0:	080201a8 	.word	0x080201a8

080a10a4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a10a4:	b508      	push	{r3, lr}
 80a10a6:	4b02      	ldr	r3, [pc, #8]	; (80a10b0 <set_system_mode+0xc>)
 80a10a8:	681b      	ldr	r3, [r3, #0]
 80a10aa:	685b      	ldr	r3, [r3, #4]
 80a10ac:	9301      	str	r3, [sp, #4]
 80a10ae:	bd08      	pop	{r3, pc}
 80a10b0:	080601a4 	.word	0x080601a4

080a10b4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a10b4:	b508      	push	{r3, lr}
 80a10b6:	4b02      	ldr	r3, [pc, #8]	; (80a10c0 <system_delay_ms+0xc>)
 80a10b8:	681b      	ldr	r3, [r3, #0]
 80a10ba:	695b      	ldr	r3, [r3, #20]
 80a10bc:	9301      	str	r3, [sp, #4]
 80a10be:	bd08      	pop	{r3, pc}
 80a10c0:	080601a4 	.word	0x080601a4

080a10c4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a10c4:	b508      	push	{r3, lr}
 80a10c6:	4b03      	ldr	r3, [pc, #12]	; (80a10d4 <system_ctrl_set_app_request_handler+0x10>)
 80a10c8:	681b      	ldr	r3, [r3, #0]
 80a10ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a10ce:	9301      	str	r3, [sp, #4]
 80a10d0:	bd08      	pop	{r3, pc}
 80a10d2:	0000      	.short	0x0000
 80a10d4:	080601a4 	.word	0x080601a4

080a10d8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a10d8:	b508      	push	{r3, lr}
 80a10da:	4b03      	ldr	r3, [pc, #12]	; (80a10e8 <system_ctrl_set_result+0x10>)
 80a10dc:	681b      	ldr	r3, [r3, #0]
 80a10de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a10e2:	9301      	str	r3, [sp, #4]
 80a10e4:	bd08      	pop	{r3, pc}
 80a10e6:	0000      	.short	0x0000
 80a10e8:	080601a4 	.word	0x080601a4

080a10ec <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a10ec:	b508      	push	{r3, lr}
 80a10ee:	4b02      	ldr	r3, [pc, #8]	; (80a10f8 <spark_process+0xc>)
 80a10f0:	681b      	ldr	r3, [r3, #0]
 80a10f2:	689b      	ldr	r3, [r3, #8]
 80a10f4:	9301      	str	r3, [sp, #4]
 80a10f6:	bd08      	pop	{r3, pc}
 80a10f8:	080601cc 	.word	0x080601cc

080a10fc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a10fc:	b508      	push	{r3, lr}
 80a10fe:	4b02      	ldr	r3, [pc, #8]	; (80a1108 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1100:	681b      	ldr	r3, [r3, #0]
 80a1102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1104:	9301      	str	r3, [sp, #4]
 80a1106:	bd08      	pop	{r3, pc}
 80a1108:	080601cc 	.word	0x080601cc

080a110c <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a110c:	b508      	push	{r3, lr}
 80a110e:	4b02      	ldr	r3, [pc, #8]	; (80a1118 <network_ready+0xc>)
 80a1110:	681b      	ldr	r3, [r3, #0]
 80a1112:	691b      	ldr	r3, [r3, #16]
 80a1114:	9301      	str	r3, [sp, #4]
 80a1116:	bd08      	pop	{r3, pc}
 80a1118:	080601c8 	.word	0x080601c8

080a111c <malloc>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a111c:	b508      	push	{r3, lr}
 80a111e:	4b02      	ldr	r3, [pc, #8]	; (80a1128 <malloc+0xc>)
 80a1120:	681b      	ldr	r3, [r3, #0]
 80a1122:	681b      	ldr	r3, [r3, #0]
 80a1124:	9301      	str	r3, [sp, #4]
 80a1126:	bd08      	pop	{r3, pc}
 80a1128:	080601a0 	.word	0x080601a0

080a112c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a112c:	b508      	push	{r3, lr}
 80a112e:	4b02      	ldr	r3, [pc, #8]	; (80a1138 <free+0xc>)
 80a1130:	681b      	ldr	r3, [r3, #0]
 80a1132:	685b      	ldr	r3, [r3, #4]
 80a1134:	9301      	str	r3, [sp, #4]
 80a1136:	bd08      	pop	{r3, pc}
 80a1138:	080601a0 	.word	0x080601a0

080a113c <snprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80a113c:	b508      	push	{r3, lr}
 80a113e:	4b02      	ldr	r3, [pc, #8]	; (80a1148 <snprintf+0xc>)
 80a1140:	681b      	ldr	r3, [r3, #0]
 80a1142:	69db      	ldr	r3, [r3, #28]
 80a1144:	9301      	str	r3, [sp, #4]
 80a1146:	bd08      	pop	{r3, pc}
 80a1148:	080601a0 	.word	0x080601a0

080a114c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a114c:	2100      	movs	r1, #0
 80a114e:	f7ff bfb1 	b.w	80a10b4 <system_delay_ms>

080a1152 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1152:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a1154:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1156:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a1158:	b113      	cbz	r3, 80a1160 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a115a:	2203      	movs	r2, #3
 80a115c:	4601      	mov	r1, r0
 80a115e:	4798      	blx	r3
    }
 80a1160:	4620      	mov	r0, r4
 80a1162:	bd10      	pop	{r4, pc}

080a1164 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a1164:	4770      	bx	lr

080a1166 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1166:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1168:	4606      	mov	r6, r0
 80a116a:	4615      	mov	r5, r2
 80a116c:	460c      	mov	r4, r1
 80a116e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1170:	42bc      	cmp	r4, r7
 80a1172:	d006      	beq.n	80a1182 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1174:	6833      	ldr	r3, [r6, #0]
 80a1176:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a117a:	689b      	ldr	r3, [r3, #8]
 80a117c:	4630      	mov	r0, r6
 80a117e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1180:	e7f6      	b.n	80a1170 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a1182:	4628      	mov	r0, r5
 80a1184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1186 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a1186:	2200      	movs	r2, #0
 80a1188:	7c00      	ldrb	r0, [r0, #16]
 80a118a:	f7ff be71 	b.w	80a0e70 <HAL_I2C_Write_Data>

080a118e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a118e:	2100      	movs	r1, #0
 80a1190:	7c00      	ldrb	r0, [r0, #16]
 80a1192:	f7ff be75 	b.w	80a0e80 <HAL_I2C_Available_Data>

080a1196 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a1196:	2100      	movs	r1, #0
 80a1198:	7c00      	ldrb	r0, [r0, #16]
 80a119a:	f7ff be79 	b.w	80a0e90 <HAL_I2C_Read_Data>

080a119e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a119e:	2100      	movs	r1, #0
 80a11a0:	7c00      	ldrb	r0, [r0, #16]
 80a11a2:	f7ff be7d 	b.w	80a0ea0 <HAL_I2C_Peek_Data>

080a11a6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a11a6:	2100      	movs	r1, #0
 80a11a8:	7c00      	ldrb	r0, [r0, #16]
 80a11aa:	f7ff be81 	b.w	80a0eb0 <HAL_I2C_Flush_Data>

080a11ae <_ZN7TwoWireD0Ev>:
 80a11ae:	b510      	push	{r4, lr}
 80a11b0:	4604      	mov	r4, r0
 80a11b2:	f7fe ff74 	bl	80a009e <_ZdlPv>
 80a11b6:	4620      	mov	r0, r4
 80a11b8:	bd10      	pop	{r4, pc}
	...

080a11bc <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a11bc:	b510      	push	{r4, lr}
 80a11be:	4604      	mov	r4, r0
 80a11c0:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a11c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a11c6:	60a3      	str	r3, [r4, #8]
 80a11c8:	4b04      	ldr	r3, [pc, #16]	; (80a11dc <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a11ca:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a11cc:	7420      	strb	r0, [r4, #16]
 80a11ce:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a11d0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a11d2:	f7ff fe7d 	bl	80a0ed0 <HAL_I2C_Init>

}
 80a11d6:	4620      	mov	r0, r4
 80a11d8:	bd10      	pop	{r4, pc}
 80a11da:	bf00      	nop
 80a11dc:	080a2d90 	.word	0x080a2d90

080a11e0 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a11e0:	2100      	movs	r1, #0
 80a11e2:	7c00      	ldrb	r0, [r0, #16]
 80a11e4:	f7ff be6c 	b.w	80a0ec0 <HAL_I2C_Is_Enabled>

080a11e8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a11e8:	4770      	bx	lr

080a11ea <_ZN9IPAddressD0Ev>:
 80a11ea:	b510      	push	{r4, lr}
 80a11ec:	4604      	mov	r4, r0
 80a11ee:	f7fe ff56 	bl	80a009e <_ZdlPv>
 80a11f2:	4620      	mov	r0, r4
 80a11f4:	bd10      	pop	{r4, pc}

080a11f6 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a11f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a11f8:	460f      	mov	r7, r1
 80a11fa:	f100 0608 	add.w	r6, r0, #8
 80a11fe:	1d05      	adds	r5, r0, #4
 80a1200:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1202:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a1206:	220a      	movs	r2, #10
 80a1208:	4638      	mov	r0, r7
 80a120a:	f000 f890 	bl	80a132e <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a120e:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1210:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1212:	d007      	beq.n	80a1224 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a1214:	2c00      	cmp	r4, #0
 80a1216:	d0f4      	beq.n	80a1202 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1218:	212e      	movs	r1, #46	; 0x2e
 80a121a:	4638      	mov	r0, r7
 80a121c:	f000 f85a 	bl	80a12d4 <_ZN5Print5printEc>
 80a1220:	4404      	add	r4, r0
 80a1222:	e7ee      	b.n	80a1202 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a1224:	4620      	mov	r0, r4
 80a1226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1228 <_ZN9IPAddressC1Ev>:
#include "spark_wiring_ipaddress.h"
#include "spark_wiring_print.h"
#include "spark_wiring_platform.h"
#include "string.h"

IPAddress::IPAddress()
 80a1228:	b510      	push	{r4, lr}
 80a122a:	4604      	mov	r4, r0
 80a122c:	4b04      	ldr	r3, [pc, #16]	; (80a1240 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a122e:	2211      	movs	r2, #17
 80a1230:	f840 3b04 	str.w	r3, [r0], #4
 80a1234:	2100      	movs	r1, #0
 80a1236:	f001 fa70 	bl	80a271a <memset>
{
    clear();
}
 80a123a:	4620      	mov	r0, r4
 80a123c:	bd10      	pop	{r4, pc}
 80a123e:	bf00      	nop
 80a1240:	080a2db8 	.word	0x080a2db8

080a1244 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a1244:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1246:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a124a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a124e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a1252:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a1256:	2304      	movs	r3, #4
 80a1258:	6041      	str	r1, [r0, #4]
 80a125a:	7503      	strb	r3, [r0, #20]
 80a125c:	bd10      	pop	{r4, pc}
	...

080a1260 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1260:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1262:	4d04      	ldr	r5, [pc, #16]	; (80a1274 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1264:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1266:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a126a:	9500      	str	r5, [sp, #0]
 80a126c:	f7ff ffea 	bl	80a1244 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1270:	b003      	add	sp, #12
 80a1272:	bd30      	pop	{r4, r5, pc}
 80a1274:	080a2db8 	.word	0x080a2db8

080a1278 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1278:	4a01      	ldr	r2, [pc, #4]	; (80a1280 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a127a:	4b02      	ldr	r3, [pc, #8]	; (80a1284 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a127c:	601a      	str	r2, [r3, #0]
 80a127e:	4770      	bx	lr
 80a1280:	080a2e7a 	.word	0x080a2e7a
 80a1284:	20000640 	.word	0x20000640

080a1288 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a128a:	4606      	mov	r6, r0
 80a128c:	460d      	mov	r5, r1
 80a128e:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a1290:	2400      	movs	r4, #0
  while (size--) {
 80a1292:	42bd      	cmp	r5, r7
 80a1294:	d00c      	beq.n	80a12b0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1296:	6833      	ldr	r3, [r6, #0]
 80a1298:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a129c:	689b      	ldr	r3, [r3, #8]
 80a129e:	4630      	mov	r0, r6
 80a12a0:	4798      	blx	r3
     if (chunk>=0)
 80a12a2:	2800      	cmp	r0, #0
 80a12a4:	db01      	blt.n	80a12aa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a12a6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a12a8:	e7f3      	b.n	80a1292 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a12aa:	2c00      	cmp	r4, #0
 80a12ac:	bf08      	it	eq
 80a12ae:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a12b0:	4620      	mov	r0, r4
 80a12b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a12b4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a12b4:	b570      	push	{r4, r5, r6, lr}
 80a12b6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a12b8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a12ba:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a12bc:	b149      	cbz	r1, 80a12d2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a12be:	f001 fa67 	bl	80a2790 <strlen>
 80a12c2:	682b      	ldr	r3, [r5, #0]
 80a12c4:	4602      	mov	r2, r0
 80a12c6:	4621      	mov	r1, r4
 80a12c8:	4628      	mov	r0, r5
    }
 80a12ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a12ce:	68db      	ldr	r3, [r3, #12]
 80a12d0:	4718      	bx	r3
    }
 80a12d2:	bd70      	pop	{r4, r5, r6, pc}

080a12d4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a12d4:	6803      	ldr	r3, [r0, #0]
 80a12d6:	689b      	ldr	r3, [r3, #8]
 80a12d8:	4718      	bx	r3

080a12da <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a12da:	2a01      	cmp	r2, #1
 80a12dc:	bf98      	it	ls
 80a12de:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a12e0:	b530      	push	{r4, r5, lr}
 80a12e2:	460b      	mov	r3, r1
 80a12e4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a12e6:	2100      	movs	r1, #0
 80a12e8:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a12ec:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a12f0:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a12f4:	fb05 3312 	mls	r3, r5, r2, r3
 80a12f8:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a12fa:	2b09      	cmp	r3, #9
 80a12fc:	bf94      	ite	ls
 80a12fe:	3330      	addls	r3, #48	; 0x30
 80a1300:	3337      	addhi	r3, #55	; 0x37
 80a1302:	b2db      	uxtb	r3, r3
 80a1304:	4621      	mov	r1, r4
 80a1306:	f804 3901 	strb.w	r3, [r4], #-1
 80a130a:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a130c:	2d00      	cmp	r5, #0
 80a130e:	d1ef      	bne.n	80a12f0 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1310:	f7ff ffd0 	bl	80a12b4 <_ZN5Print5writeEPKc>
}
 80a1314:	b00b      	add	sp, #44	; 0x2c
 80a1316:	bd30      	pop	{r4, r5, pc}

080a1318 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a1318:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a131a:	b922      	cbnz	r2, 80a1326 <_ZN5Print5printEmi+0xe>
 80a131c:	6803      	ldr	r3, [r0, #0]
 80a131e:	b2c9      	uxtb	r1, r1
 80a1320:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a1322:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a1324:	4718      	bx	r3
  else return printNumber(n, base);
 80a1326:	b2d2      	uxtb	r2, r2
}
 80a1328:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a132a:	f7ff bfd6 	b.w	80a12da <_ZN5Print11printNumberEmh>

080a132e <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a132e:	f7ff bff3 	b.w	80a1318 <_ZN5Print5printEmi>

080a1332 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a1332:	b510      	push	{r4, lr}
 80a1334:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1336:	f7ff ff0c 	bl	80a1152 <_ZNSt14_Function_baseD1Ev>
 80a133a:	4620      	mov	r0, r4
 80a133c:	bd10      	pop	{r4, pc}
	...

080a1340 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1340:	4803      	ldr	r0, [pc, #12]	; (80a1350 <_GLOBAL__sub_I_RGB+0x10>)
 80a1342:	2300      	movs	r3, #0
 80a1344:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a1346:	4a03      	ldr	r2, [pc, #12]	; (80a1354 <_GLOBAL__sub_I_RGB+0x14>)
 80a1348:	4903      	ldr	r1, [pc, #12]	; (80a1358 <_GLOBAL__sub_I_RGB+0x18>)
 80a134a:	f000 bdb1 	b.w	80a1eb0 <__aeabi_atexit>
 80a134e:	bf00      	nop
 80a1350:	20000644 	.word	0x20000644
 80a1354:	20000390 	.word	0x20000390
 80a1358:	080a1333 	.word	0x080a1333

080a135c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a135c:	4770      	bx	lr

080a135e <_ZN8SPIClassD0Ev>:
 80a135e:	b510      	push	{r4, lr}
 80a1360:	4604      	mov	r4, r0
 80a1362:	f7fe fe9c 	bl	80a009e <_ZdlPv>
 80a1366:	4620      	mov	r0, r4
 80a1368:	bd10      	pop	{r4, pc}
	...

080a136c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a136c:	b570      	push	{r4, r5, r6, lr}
 80a136e:	4604      	mov	r4, r0
 80a1370:	460e      	mov	r6, r1
 80a1372:	4b07      	ldr	r3, [pc, #28]	; (80a1390 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a1374:	2500      	movs	r5, #0
 80a1376:	6003      	str	r3, [r0, #0]
 80a1378:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a137c:	f7ff fd00 	bl	80a0d80 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a1380:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a1382:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a1384:	f7ff fdee 	bl	80a0f64 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a1388:	60a5      	str	r5, [r4, #8]
}
 80a138a:	4620      	mov	r0, r4
 80a138c:	bd70      	pop	{r4, r5, r6, pc}
 80a138e:	bf00      	nop
 80a1390:	080a2eac 	.word	0x080a2eac

080a1394 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a1394:	7900      	ldrb	r0, [r0, #4]
 80a1396:	f7ff bded 	b.w	80a0f74 <HAL_SPI_Is_Enabled>

080a139a <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
 80a139a:	b510      	push	{r4, lr}
 80a139c:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a139e:	f7ff fd0f 	bl	80a0dc0 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
 80a13a2:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 80a13a4:	6823      	ldr	r3, [r4, #0]
 80a13a6:	4620      	mov	r0, r4
 80a13a8:	695b      	ldr	r3, [r3, #20]
 80a13aa:	4798      	blx	r3
    if (c >= 0) return c;
 80a13ac:	2800      	cmp	r0, #0
 80a13ae:	da08      	bge.n	80a13c2 <_ZN6Stream9timedReadEv+0x28>
 80a13b0:	f7ff fd06 	bl	80a0dc0 <HAL_Timer_Get_Milli_Seconds>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
 80a13b4:	68e3      	ldr	r3, [r4, #12]
 80a13b6:	1ac0      	subs	r0, r0, r3
 80a13b8:	68a3      	ldr	r3, [r4, #8]
 80a13ba:	4298      	cmp	r0, r3
 80a13bc:	d3f2      	bcc.n	80a13a4 <_ZN6Stream9timedReadEv+0xa>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
 80a13be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a13c2:	bd10      	pop	{r4, pc}

080a13c4 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
 80a13c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a13c8:	4680      	mov	r8, r0
 80a13ca:	460d      	mov	r5, r1
 80a13cc:	460c      	mov	r4, r1
 80a13ce:	188f      	adds	r7, r1, r2
  size_t count = 0;
  while (count < length) {
 80a13d0:	42bc      	cmp	r4, r7
 80a13d2:	eba4 0605 	sub.w	r6, r4, r5
 80a13d6:	d007      	beq.n	80a13e8 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
 80a13d8:	4640      	mov	r0, r8
 80a13da:	f7ff ffde 	bl	80a139a <_ZN6Stream9timedReadEv>
    if (c < 0) break;
 80a13de:	2800      	cmp	r0, #0
 80a13e0:	db02      	blt.n	80a13e8 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
 80a13e2:	f804 0b01 	strb.w	r0, [r4], #1
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
  size_t count = 0;
  while (count < length) {
 80a13e6:	e7f3      	b.n	80a13d0 <_ZN6Stream9readBytesEPcj+0xc>
    if (c < 0) break;
    *buffer++ = (char)c;
    count++;
  }
  return count;
}
 80a13e8:	4630      	mov	r0, r6
 80a13ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080a13f0 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a13f0:	f64f 739c 	movw	r3, #65436	; 0xff9c
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
}
 80a13f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a13f6:	4c0d      	ldr	r4, [pc, #52]	; (80a142c <_GLOBAL__sub_I_System+0x3c>)
 80a13f8:	2500      	movs	r5, #0
 80a13fa:	8063      	strh	r3, [r4, #2]
 80a13fc:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1400:	4628      	mov	r0, r5
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a1402:	80a3      	strh	r3, [r4, #4]
 80a1404:	7025      	strb	r5, [r4, #0]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1406:	f7ff fe4d 	bl	80a10a4 <set_system_mode>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 80a140a:	a802      	add	r0, sp, #8
 80a140c:	f840 5d04 	str.w	r5, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80a1410:	462a      	mov	r2, r5
 80a1412:	4629      	mov	r1, r5
 80a1414:	f7ff fcbc 	bl	80a0d90 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 80a1418:	9b01      	ldr	r3, [sp, #4]
class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
        if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
 80a141a:	2b1e      	cmp	r3, #30
 80a141c:	d104      	bne.n	80a1428 <_GLOBAL__sub_I_System+0x38>
            // Woken up from standby mode
            sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
 80a141e:	2303      	movs	r3, #3
 80a1420:	7023      	strb	r3, [r4, #0]
 80a1422:	2311      	movs	r3, #17
 80a1424:	8065      	strh	r5, [r4, #2]
 80a1426:	80a3      	strh	r3, [r4, #4]
 80a1428:	b003      	add	sp, #12
 80a142a:	bd30      	pop	{r4, r5, pc}
 80a142c:	20000654 	.word	0x20000654

080a1430 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a1430:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1432:	ac02      	add	r4, sp, #8
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a1434:	6803      	ldr	r3, [r0, #0]
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a1436:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a143a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a143c:	2201      	movs	r2, #1
 80a143e:	f247 5330 	movw	r3, #30000	; 0x7530
 80a1442:	4621      	mov	r1, r4
 80a1444:	47a8      	blx	r5
}
 80a1446:	b003      	add	sp, #12
 80a1448:	bd30      	pop	{r4, r5, pc}

080a144a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a144a:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a144c:	6803      	ldr	r3, [r0, #0]
 80a144e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a1450:	f247 5330 	movw	r3, #30000	; 0x7530
 80a1454:	46a4      	mov	ip, r4
}
 80a1456:	bc10      	pop	{r4}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a1458:	4760      	bx	ip

080a145a <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a145a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a145c:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
 80a145e:	6803      	ldr	r3, [r0, #0]
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a1460:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
 80a1464:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a1466:	4621      	mov	r1, r4
 80a1468:	4613      	mov	r3, r2
 80a146a:	2201      	movs	r2, #1
 80a146c:	47a8      	blx	r5
}
 80a146e:	b003      	add	sp, #12
 80a1470:	bd30      	pop	{r4, r5, pc}

080a1472 <_ZN9TCPClient5flushEv>:
  d_->offset = 0;
  d_->total = 0;
}

void TCPClient::flush()
{
 80a1472:	4770      	bx	lr

080a1474 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a1474:	4770      	bx	lr

080a1476 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
 80a1476:	2000      	movs	r0, #0
 80a1478:	4770      	bx	lr

080a147a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a147a:	b510      	push	{r4, lr}
 80a147c:	4604      	mov	r4, r0
 80a147e:	f7fe fe0e 	bl	80a009e <_ZdlPv>
 80a1482:	4620      	mov	r0, r4
 80a1484:	bd10      	pop	{r4, pc}

080a1486 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a1486:	f7fe be0a 	b.w	80a009e <_ZdlPv>
	...

080a148c <_ZN9TCPClient7connectEPKctm>:
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a148c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1490:	461f      	mov	r7, r3
    stop();
 80a1492:	6803      	ldr	r3, [r0, #0]
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a1494:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a1496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a1498:	4606      	mov	r6, r0
 80a149a:	460c      	mov	r4, r1
 80a149c:	4690      	mov	r8, r2
    stop();
 80a149e:	4798      	blx	r3
      int rv = 0;
      if(Network.ready())
 80a14a0:	4b13      	ldr	r3, [pc, #76]	; (80a14f0 <_ZN9TCPClient7connectEPKctm+0x64>)
 80a14a2:	6818      	ldr	r0, [r3, #0]
 80a14a4:	6803      	ldr	r3, [r0, #0]
 80a14a6:	681b      	ldr	r3, [r3, #0]
 80a14a8:	4798      	blx	r3
 80a14aa:	b1f0      	cbz	r0, 80a14ea <_ZN9TCPClient7connectEPKctm+0x5e>
      {
        IPAddress ip_addr;
 80a14ac:	a802      	add	r0, sp, #8
 80a14ae:	f7ff febb 	bl	80a1228 <_ZN9IPAddressC1Ev>

        if((rv = inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL)) == 0)
 80a14b2:	4620      	mov	r0, r4
 80a14b4:	f001 f96c 	bl	80a2790 <strlen>
 80a14b8:	2300      	movs	r3, #0
 80a14ba:	9300      	str	r3, [sp, #0]
 80a14bc:	b281      	uxth	r1, r0
 80a14be:	463b      	mov	r3, r7
 80a14c0:	aa03      	add	r2, sp, #12
 80a14c2:	4620      	mov	r0, r4
 80a14c4:	f7ff fdde 	bl	80a1084 <inet_gethostbyname>
 80a14c8:	b978      	cbnz	r0, 80a14ea <_ZN9TCPClient7connectEPKctm+0x5e>
        {
                return connect(ip_addr, port, nif);
 80a14ca:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a14cc:	ad09      	add	r5, sp, #36	; 0x24
 80a14ce:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a14d2:	4b08      	ldr	r3, [pc, #32]	; (80a14f4 <_ZN9TCPClient7connectEPKctm+0x68>)
 80a14d4:	ac03      	add	r4, sp, #12
 80a14d6:	9308      	str	r3, [sp, #32]
 80a14d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a14da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a14dc:	6823      	ldr	r3, [r4, #0]
 80a14de:	4642      	mov	r2, r8
 80a14e0:	702b      	strb	r3, [r5, #0]
 80a14e2:	a908      	add	r1, sp, #32
 80a14e4:	463b      	mov	r3, r7
 80a14e6:	4630      	mov	r0, r6
 80a14e8:	47c8      	blx	r9
        }
        else
            DEBUG("unable to get IP for hostname");
      }
      return rv;
}
 80a14ea:	b00f      	add	sp, #60	; 0x3c
 80a14ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a14f0:	080a2fcc 	.word	0x080a2fcc
 80a14f4:	080a2db8 	.word	0x080a2db8

080a14f8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.30>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a14f8:	b510      	push	{r4, lr}
 80a14fa:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80a14fc:	6803      	ldr	r3, [r0, #0]
 80a14fe:	689b      	ldr	r3, [r3, #8]
 80a1500:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a1502:	68a3      	ldr	r3, [r4, #8]
 80a1504:	3b01      	subs	r3, #1
 80a1506:	60a3      	str	r3, [r4, #8]
 80a1508:	b92b      	cbnz	r3, 80a1516 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.30+0x1e>
            _M_destroy();
 80a150a:	6823      	ldr	r3, [r4, #0]
 80a150c:	4620      	mov	r0, r4
        }
    }
 80a150e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80a1512:	68db      	ldr	r3, [r3, #12]
 80a1514:	4718      	bx	r3
 80a1516:	bd10      	pop	{r4, pc}

080a1518 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a1518:	b570      	push	{r4, r5, r6, lr}
 80a151a:	4604      	mov	r4, r0
 80a151c:	4606      	mov	r6, r0
 80a151e:	694d      	ldr	r5, [r1, #20]
 80a1520:	4b04      	ldr	r3, [pc, #16]	; (80a1534 <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a1522:	358c      	adds	r5, #140	; 0x8c
 80a1524:	f844 3b04 	str.w	r3, [r4], #4
 80a1528:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a152a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a152c:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a152e:	4630      	mov	r0, r6
 80a1530:	7023      	strb	r3, [r4, #0]
 80a1532:	bd70      	pop	{r4, r5, r6, pc}
 80a1534:	080a2db8 	.word	0x080a2db8

080a1538 <_ZN9TCPClient4peekEv>:
        }
        return read;
}

int TCPClient::peek()
{
 80a1538:	b510      	push	{r4, lr}
 80a153a:	6943      	ldr	r3, [r0, #20]
 80a153c:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a153e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1542:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a1546:	429a      	cmp	r2, r3
 80a1548:	d005      	beq.n	80a1556 <_ZN9TCPClient4peekEv+0x1e>
 80a154a:	6962      	ldr	r2, [r4, #20]
 80a154c:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a1550:	4413      	add	r3, r2
 80a1552:	7918      	ldrb	r0, [r3, #4]
 80a1554:	bd10      	pop	{r4, pc}
 80a1556:	6803      	ldr	r3, [r0, #0]
 80a1558:	691b      	ldr	r3, [r3, #16]
 80a155a:	4798      	blx	r3
 80a155c:	2800      	cmp	r0, #0
 80a155e:	d1f4      	bne.n	80a154a <_ZN9TCPClient4peekEv+0x12>
 80a1560:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a1564:	bd10      	pop	{r4, pc}

080a1566 <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 80a1566:	b510      	push	{r4, lr}
 80a1568:	6943      	ldr	r3, [r0, #20]
 80a156a:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a156c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1570:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a1574:	429a      	cmp	r2, r3
 80a1576:	d008      	beq.n	80a158a <_ZN9TCPClient4readEv+0x24>
 80a1578:	6962      	ldr	r2, [r4, #20]
 80a157a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a157e:	1c59      	adds	r1, r3, #1
 80a1580:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 80a1584:	4413      	add	r3, r2
 80a1586:	7918      	ldrb	r0, [r3, #4]
 80a1588:	bd10      	pop	{r4, pc}
 80a158a:	6803      	ldr	r3, [r0, #0]
 80a158c:	691b      	ldr	r3, [r3, #16]
 80a158e:	4798      	blx	r3
 80a1590:	2800      	cmp	r0, #0
 80a1592:	d1f1      	bne.n	80a1578 <_ZN9TCPClient4readEv+0x12>
 80a1594:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a1598:	bd10      	pop	{r4, pc}

080a159a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
 80a159a:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80a159c:	6904      	ldr	r4, [r0, #16]
                offset(0),
                total(0) {
        }

        ~Data() {
            if (socket_handle_valid(sock)) {
 80a159e:	6820      	ldr	r0, [r4, #0]
 80a15a0:	f7ff fca8 	bl	80a0ef4 <socket_handle_valid>
 80a15a4:	b110      	cbz	r0, 80a15ac <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x12>
                socket_close(sock);
 80a15a6:	6820      	ldr	r0, [r4, #0]
 80a15a8:	f7ff fcc4 	bl	80a0f34 <socket_close>
 80a15ac:	4620      	mov	r0, r4
 80a15ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a15b2:	f7fe bd74 	b.w	80a009e <_ZdlPv>

080a15b6 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a15b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a15b8:	6943      	ldr	r3, [r0, #20]
 80a15ba:	4617      	mov	r7, r2
        int read = -1;
        if (bufferCount() || available())
 80a15bc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a15c0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a15c4:	4605      	mov	r5, r0
        int read = -1;
        if (bufferCount() || available())
 80a15c6:	429a      	cmp	r2, r3
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a15c8:	460e      	mov	r6, r1
        int read = -1;
        if (bufferCount() || available())
 80a15ca:	d106      	bne.n	80a15da <_ZN9TCPClient4readEPhj+0x24>
 80a15cc:	6803      	ldr	r3, [r0, #0]
 80a15ce:	691b      	ldr	r3, [r3, #16]
 80a15d0:	4798      	blx	r3
 80a15d2:	b910      	cbnz	r0, 80a15da <_ZN9TCPClient4readEPhj+0x24>
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
 80a15d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80a15d8:	e014      	b.n	80a1604 <_ZN9TCPClient4readEPhj+0x4e>
 80a15da:	6969      	ldr	r1, [r5, #20]
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a15dc:	4630      	mov	r0, r6
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a15de:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a15e2:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a15e6:	4419      	add	r1, r3
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a15e8:	1ae4      	subs	r4, r4, r3
int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a15ea:	42bc      	cmp	r4, r7
 80a15ec:	bf28      	it	cs
 80a15ee:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a15f0:	3104      	adds	r1, #4
 80a15f2:	4622      	mov	r2, r4
 80a15f4:	f001 f886 	bl	80a2704 <memcpy>
 80a15f8:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a15fa:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a15fe:	4423      	add	r3, r4
 80a1600:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
        }
        return read;
}
 80a1604:	4620      	mov	r0, r4
 80a1606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1608 <_ZN9TCPClient12flush_bufferEv>:
{
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer()
{
 80a1608:	6942      	ldr	r2, [r0, #20]
  d_->offset = 0;
 80a160a:	2300      	movs	r3, #0
 80a160c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a1610:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a1612:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 80a1616:	4770      	bx	lr

080a1618 <_ZN9TCPClient9availableEv>:
{
  return d_->total - d_->offset;
}

int TCPClient::available()
{
 80a1618:	b538      	push	{r3, r4, r5, lr}
 80a161a:	6942      	ldr	r2, [r0, #20]
 80a161c:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
 80a161e:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a1622:	b11b      	cbz	r3, 80a162c <_ZN9TCPClient9availableEv+0x14>
 80a1624:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a1628:	429a      	cmp	r2, r3
 80a162a:	d00b      	beq.n	80a1644 <_ZN9TCPClient9availableEv+0x2c>
    }


    static NetworkClass& from(network_interface_t nif) {
        // hard-code for now until multiple-networks are implemented.
        return Network;
 80a162c:	4b18      	ldr	r3, [pc, #96]	; (80a1690 <_ZN9TCPClient9availableEv+0x78>)
 80a162e:	6818      	ldr	r0, [r3, #0]
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a1630:	6803      	ldr	r3, [r0, #0]
 80a1632:	681b      	ldr	r3, [r3, #0]
 80a1634:	4798      	blx	r3
 80a1636:	b318      	cbz	r0, 80a1680 <_ZN9TCPClient9availableEv+0x68>
 80a1638:	6963      	ldr	r3, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a163a:	6818      	ldr	r0, [r3, #0]
 80a163c:	f7ff fc5a 	bl	80a0ef4 <socket_handle_valid>
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a1640:	b918      	cbnz	r0, 80a164a <_ZN9TCPClient9availableEv+0x32>
 80a1642:	e01d      	b.n	80a1680 <_ZN9TCPClient9availableEv+0x68>
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
 80a1644:	f7ff ffe0 	bl	80a1608 <_ZN9TCPClient12flush_bufferEv>
 80a1648:	e7f0      	b.n	80a162c <_ZN9TCPClient9availableEv+0x14>
 80a164a:	6960      	ldr	r0, [r4, #20]
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
    {
        // Have room
        if ( d_->total < arraySize(d_->buffer))
 80a164c:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a1650:	297f      	cmp	r1, #127	; 0x7f
 80a1652:	d815      	bhi.n	80a1680 <_ZN9TCPClient9availableEv+0x68>
        {
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a1654:	1d05      	adds	r5, r0, #4
 80a1656:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a165a:	2300      	movs	r3, #0
 80a165c:	4429      	add	r1, r5
 80a165e:	6800      	ldr	r0, [r0, #0]
 80a1660:	f7ff fc60 	bl	80a0f24 <socket_receive>
            if (ret > 0)
 80a1664:	2800      	cmp	r0, #0
 80a1666:	dd0b      	ble.n	80a1680 <_ZN9TCPClient9availableEv+0x68>
 80a1668:	6963      	ldr	r3, [r4, #20]
            {
                DEBUG("recv(=%d)",ret);
                if (d_->total == 0) d_->offset = 0;
 80a166a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a166e:	b90a      	cbnz	r2, 80a1674 <_ZN9TCPClient9availableEv+0x5c>
 80a1670:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a1674:	6962      	ldr	r2, [r4, #20]
                d_->total += ret;
 80a1676:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a167a:	4418      	add	r0, r3
 80a167c:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
 80a1680:	6962      	ldr	r2, [r4, #20]
            }
        } // Have Space
    } // WiFi.ready() && isOpen(d_->sock)
    avail = bufferCount();
    return avail;
 80a1682:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a1686:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
 80a168a:	1a18      	subs	r0, r3, r0
}
 80a168c:	bd38      	pop	{r3, r4, r5, pc}
 80a168e:	bf00      	nop
 80a1690:	080a2fcc 	.word	0x080a2fcc

080a1694 <_ZN9TCPClient4stopEv>:
{
}


void TCPClient::stop()
{
 80a1694:	b538      	push	{r3, r4, r5, lr}
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a1696:	6943      	ldr	r3, [r0, #20]
{
}


void TCPClient::stop()
{
 80a1698:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a169a:	6818      	ldr	r0, [r3, #0]
 80a169c:	f7ff fc2a 	bl	80a0ef4 <socket_handle_valid>
void TCPClient::stop()
{
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a16a0:	b118      	cbz	r0, 80a16aa <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a16a2:	6963      	ldr	r3, [r4, #20]
 80a16a4:	6818      	ldr	r0, [r3, #0]
 80a16a6:	f7ff fc45 	bl	80a0f34 <socket_close>
 80a16aa:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a16ac:	f7ff fc4a 	bl	80a0f44 <socket_handle_invalid>
 80a16b0:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a16b2:	6960      	ldr	r0, [r4, #20]
 80a16b4:	2211      	movs	r2, #17
 80a16b6:	2100      	movs	r1, #0
 80a16b8:	308c      	adds	r0, #140	; 0x8c
 80a16ba:	f001 f82e 	bl	80a271a <memset>
  d_->remoteIP.clear();
  flush_buffer();
 80a16be:	4620      	mov	r0, r4
}
 80a16c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if (isOpen(d_->sock))
      socket_close(d_->sock);
  d_->sock = socket_handle_invalid();
  d_->remoteIP.clear();
  flush_buffer();
 80a16c4:	f7ff bfa0 	b.w	80a1608 <_ZN9TCPClient12flush_bufferEv>

080a16c8 <_ZN9TCPClientC1Em>:

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a16c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a16ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a16ce:	6083      	str	r3, [r0, #8]
        d_(std::make_shared<Data>(sock))
 80a16d0:	4b17      	ldr	r3, [pc, #92]	; (80a1730 <_ZN9TCPClientC1Em+0x68>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a16d2:	2600      	movs	r6, #0
 80a16d4:	6046      	str	r6, [r0, #4]
 80a16d6:	6003      	str	r3, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 80a16d8:	6146      	str	r6, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80a16da:	6186      	str	r6, [r0, #24]

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a16dc:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a16de:	20a0      	movs	r0, #160	; 0xa0
 80a16e0:	460f      	mov	r7, r1
 80a16e2:	f7fe fcda 	bl	80a009a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a16e6:	4605      	mov	r5, r0
 80a16e8:	b138      	cbz	r0, 80a16fa <_ZN9TCPClientC1Em+0x32>
        IPAddress remoteIP;

        explicit Data(sock_handle_t sock) :
                sock(sock),
                offset(0),
                total(0) {
 80a16ea:	6007      	str	r7, [r0, #0]
 80a16ec:	f8a0 6084 	strh.w	r6, [r0, #132]	; 0x84
 80a16f0:	f8a0 6086 	strh.w	r6, [r0, #134]	; 0x86
 80a16f4:	3088      	adds	r0, #136	; 0x88
 80a16f6:	f7ff fd97 	bl	80a1228 <_ZN9IPAddressC1Ev>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a16fa:	2014      	movs	r0, #20
 80a16fc:	f7fe fccd 	bl	80a009a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 80a1700:	4603      	mov	r3, r0
 80a1702:	b128      	cbz	r0, 80a1710 <_ZN9TCPClientC1Em+0x48>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a1704:	2201      	movs	r2, #1
 80a1706:	6042      	str	r2, [r0, #4]
 80a1708:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a170a:	4a0a      	ldr	r2, [pc, #40]	; (80a1734 <_ZN9TCPClientC1Em+0x6c>)
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 80a170c:	6105      	str	r5, [r0, #16]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a170e:	6002      	str	r2, [r0, #0]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a1710:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
 80a1712:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a1714:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a1716:	b128      	cbz	r0, 80a1724 <_ZN9TCPClientC1Em+0x5c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a1718:	6843      	ldr	r3, [r0, #4]
 80a171a:	3b01      	subs	r3, #1
 80a171c:	6043      	str	r3, [r0, #4]
 80a171e:	b90b      	cbnz	r3, 80a1724 <_ZN9TCPClientC1Em+0x5c>
 80a1720:	f7ff feea 	bl	80a14f8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.30>
        d_(std::make_shared<Data>(sock))
{
  flush_buffer();
 80a1724:	4620      	mov	r0, r4
 80a1726:	f7ff ff6f 	bl	80a1608 <_ZN9TCPClient12flush_bufferEv>
}
 80a172a:	4620      	mov	r0, r4
 80a172c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a172e:	bf00      	nop
 80a1730:	080a2ed8 	.word	0x080a2ed8
 80a1734:	080a2ebc 	.word	0x080a2ebc

080a1738 <_ZN9TCPClientC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
}

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a1738:	b510      	push	{r4, lr}
 80a173a:	4604      	mov	r4, r0
 80a173c:	f7ff fc02 	bl	80a0f44 <socket_handle_invalid>
 80a1740:	4601      	mov	r1, r0
 80a1742:	4620      	mov	r0, r4
 80a1744:	f7ff ffc0 	bl	80a16c8 <_ZN9TCPClientC1Em>
{
}
 80a1748:	4620      	mov	r0, r4
 80a174a:	bd10      	pop	{r4, pc}

080a174c <_ZN9TCPClient7connectE9IPAddresstm>:
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a174c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1750:	4698      	mov	r8, r3
    stop();
 80a1752:	6803      	ldr	r3, [r0, #0]
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a1754:	b08a      	sub	sp, #40	; 0x28
    stop();
 80a1756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a1758:	4606      	mov	r6, r0
 80a175a:	460c      	mov	r4, r1
 80a175c:	4615      	mov	r5, r2
    stop();
 80a175e:	4798      	blx	r3
 80a1760:	4b2f      	ldr	r3, [pc, #188]	; (80a1820 <_ZN9TCPClient7connectE9IPAddresstm+0xd4>)
 80a1762:	6818      	ldr	r0, [r3, #0]
        int connected = 0;
        if(Network.from(nif).ready())
 80a1764:	6803      	ldr	r3, [r0, #0]
 80a1766:	681b      	ldr	r3, [r3, #0]
 80a1768:	4798      	blx	r3
 80a176a:	2800      	cmp	r0, #0
 80a176c:	d055      	beq.n	80a181a <_ZN9TCPClient7connectE9IPAddresstm+0xce>
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a176e:	462b      	mov	r3, r5
 80a1770:	2206      	movs	r2, #6
 80a1772:	2101      	movs	r1, #1
 80a1774:	f8cd 8000 	str.w	r8, [sp]
 80a1778:	2002      	movs	r0, #2
 80a177a:	6977      	ldr	r7, [r6, #20]
 80a177c:	f7ff fbc2 	bl	80a0f04 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a1780:	2320      	movs	r3, #32
    stop();
        int connected = 0;
        if(Network.from(nif).ready())
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a1782:	6038      	str	r0, [r7, #0]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a1784:	9302      	str	r3, [sp, #8]
 80a1786:	2700      	movs	r7, #0
 80a1788:	6973      	ldr	r3, [r6, #20]
 80a178a:	9703      	str	r7, [sp, #12]
 80a178c:	681b      	ldr	r3, [r3, #0]
 80a178e:	2001      	movs	r0, #1
 80a1790:	9301      	str	r3, [sp, #4]
 80a1792:	4b24      	ldr	r3, [pc, #144]	; (80a1824 <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a1794:	aa02      	add	r2, sp, #8
 80a1796:	9300      	str	r3, [sp, #0]
 80a1798:	4923      	ldr	r1, [pc, #140]	; (80a1828 <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a179a:	463b      	mov	r3, r7
 80a179c:	f7ff fc7a 	bl	80a1094 <log_message>

          if (socket_handle_valid(d_->sock))
 80a17a0:	6973      	ldr	r3, [r6, #20]
 80a17a2:	6818      	ldr	r0, [r3, #0]
 80a17a4:	f7ff fba6 	bl	80a0ef4 <socket_handle_valid>
 80a17a8:	2800      	cmp	r0, #0
 80a17aa:	d036      	beq.n	80a181a <_ZN9TCPClient7connectE9IPAddresstm+0xce>
          {
            flush_buffer();
 80a17ac:	4630      	mov	r0, r6
 80a17ae:	f7ff ff2b 	bl	80a1608 <_ZN9TCPClient12flush_bufferEv>

            tSocketAddr.sa_family = AF_INET;
 80a17b2:	2302      	movs	r3, #2
 80a17b4:	f8ad 3008 	strh.w	r3, [sp, #8]

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a17b8:	0a2b      	lsrs	r3, r5, #8
 80a17ba:	f88d 300a 	strb.w	r3, [sp, #10]
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a17be:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a17c0:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a17c4:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a17c8:	79a3      	ldrb	r3, [r4, #6]
            flush_buffer();

            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);
 80a17ca:	f88d 500b 	strb.w	r5, [sp, #11]

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
            tSocketAddr.sa_data[3] = ip[1];
 80a17ce:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a17d2:	7963      	ldrb	r3, [r4, #5]
 80a17d4:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a17d8:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a17dc:	f88d 300f 	strb.w	r3, [sp, #15]


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a17e0:	f7ff fc48 	bl	80a1074 <HAL_NET_SetNetWatchDog>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a17e4:	6973      	ldr	r3, [r6, #20]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a17e6:	4605      	mov	r5, r0
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a17e8:	2210      	movs	r2, #16
 80a17ea:	a902      	add	r1, sp, #8
 80a17ec:	6818      	ldr	r0, [r3, #0]
 80a17ee:	f7ff fb91 	bl	80a0f14 <socket_connect>
 80a17f2:	4680      	mov	r8, r0
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
 80a17f4:	4628      	mov	r0, r5
 80a17f6:	f7ff fc3d 	bl	80a1074 <HAL_NET_SetNetWatchDog>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a17fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a17fc:	6975      	ldr	r5, [r6, #20]
 80a17fe:	358c      	adds	r5, #140	; 0x8c
 80a1800:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a1802:	6823      	ldr	r3, [r4, #0]
 80a1804:	702b      	strb	r3, [r5, #0]
            d_->remoteIP = ip;
            if(!connected)
 80a1806:	f1b8 0f00 	cmp.w	r8, #0
 80a180a:	d005      	beq.n	80a1818 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
            {
                stop();
 80a180c:	6833      	ldr	r3, [r6, #0]
 80a180e:	4630      	mov	r0, r6
 80a1810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1812:	4798      	blx	r3
 80a1814:	4638      	mov	r0, r7
 80a1816:	e000      	b.n	80a181a <_ZN9TCPClient7connectE9IPAddresstm+0xce>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
            d_->remoteIP = ip;
            if(!connected)
 80a1818:	2001      	movs	r0, #1
                stop();
            }
          }
        }
        return connected;
}
 80a181a:	b00a      	add	sp, #40	; 0x28
 80a181c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1820:	080a2fcc 	.word	0x080a2fcc
 80a1824:	080a2f23 	.word	0x080a2f23
 80a1828:	080a2f1c 	.word	0x080a2f1c

080a182c <_ZN9TCPClient6statusEv>:
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a182c:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a182e:	6943      	ldr	r3, [r0, #20]
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a1830:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a1832:	6818      	ldr	r0, [r3, #0]
 80a1834:	f7ff fb5e 	bl	80a0ef4 <socket_handle_valid>
  return rv;
}

uint8_t TCPClient::status()
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a1838:	b908      	cbnz	r0, 80a183e <_ZN9TCPClient6statusEv+0x12>
 80a183a:	2000      	movs	r0, #0
 80a183c:	bd10      	pop	{r4, pc}
 80a183e:	4b07      	ldr	r3, [pc, #28]	; (80a185c <_ZN9TCPClient6statusEv+0x30>)
 80a1840:	6818      	ldr	r0, [r3, #0]
 80a1842:	6803      	ldr	r3, [r0, #0]
 80a1844:	681b      	ldr	r3, [r3, #0]
 80a1846:	4798      	blx	r3
 80a1848:	2800      	cmp	r0, #0
 80a184a:	d0f6      	beq.n	80a183a <_ZN9TCPClient6statusEv+0xe>
 80a184c:	6963      	ldr	r3, [r4, #20]
 80a184e:	6818      	ldr	r0, [r3, #0]
 80a1850:	f7ff fb48 	bl	80a0ee4 <socket_active_status>
 80a1854:	fab0 f080 	clz	r0, r0
 80a1858:	0940      	lsrs	r0, r0, #5
}
 80a185a:	bd10      	pop	{r4, pc}
 80a185c:	080a2fcc 	.word	0x080a2fcc

080a1860 <_ZN9TCPClient5writeEPKhjm>:
{
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
 80a1860:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 80a1864:	2500      	movs	r5, #0
 80a1866:	6045      	str	r5, [r0, #4]
 80a1868:	4604      	mov	r4, r0
 80a186a:	460e      	mov	r6, r1
 80a186c:	4617      	mov	r7, r2
 80a186e:	4698      	mov	r8, r3
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a1870:	f7ff ffdc 	bl	80a182c <_ZN9TCPClient6statusEv>
 80a1874:	b160      	cbz	r0, 80a1890 <_ZN9TCPClient5writeEPKhjm+0x30>
 80a1876:	6960      	ldr	r0, [r4, #20]
 80a1878:	9501      	str	r5, [sp, #4]
 80a187a:	f8cd 8000 	str.w	r8, [sp]
 80a187e:	462b      	mov	r3, r5
 80a1880:	463a      	mov	r2, r7
 80a1882:	4631      	mov	r1, r6
 80a1884:	6800      	ldr	r0, [r0, #0]
 80a1886:	f7ff fb65 	bl	80a0f54 <socket_send_ex>
    if (ret < 0) {
 80a188a:	2800      	cmp	r0, #0
 80a188c:	da03      	bge.n	80a1896 <_ZN9TCPClient5writeEPKhjm+0x36>
 80a188e:	e001      	b.n	80a1894 <_ZN9TCPClient5writeEPKhjm+0x34>
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a1890:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a1894:	6060      	str	r0, [r4, #4]

    /*
     * FIXME: We should not be returning negative numbers here
     */
    return ret;
}
 80a1896:	b002      	add	sp, #8
 80a1898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a189c <_ZN9TCPClient9connectedEv>:
  d_->remoteIP.clear();
  flush_buffer();
}

uint8_t TCPClient::connected()
{
 80a189c:	b538      	push	{r3, r4, r5, lr}
 80a189e:	4604      	mov	r4, r0
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a18a0:	f7ff ffc4 	bl	80a182c <_ZN9TCPClient6statusEv>
 80a18a4:	bb00      	cbnz	r0, 80a18e8 <_ZN9TCPClient9connectedEv+0x4c>
 80a18a6:	6963      	ldr	r3, [r4, #20]
 80a18a8:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a18ac:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a18b0:	4291      	cmp	r1, r2
 80a18b2:	d119      	bne.n	80a18e8 <_ZN9TCPClient9connectedEv+0x4c>

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a18b4:	6818      	ldr	r0, [r3, #0]
 80a18b6:	f7ff fb1d 	bl	80a0ef4 <socket_handle_valid>
uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a18ba:	b128      	cbz	r0, 80a18c8 <_ZN9TCPClient9connectedEv+0x2c>
 80a18bc:	6963      	ldr	r3, [r4, #20]
 80a18be:	6818      	ldr	r0, [r3, #0]
 80a18c0:	f7ff fb10 	bl	80a0ee4 <socket_active_status>
 80a18c4:	2801      	cmp	r0, #1
 80a18c6:	d001      	beq.n	80a18cc <_ZN9TCPClient9connectedEv+0x30>
}

uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a18c8:	2500      	movs	r5, #0
 80a18ca:	e00e      	b.n	80a18ea <_ZN9TCPClient9connectedEv+0x4e>
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
    {
      rv = available(); // Try CC3000
 80a18cc:	6823      	ldr	r3, [r4, #0]
 80a18ce:	4620      	mov	r0, r4
 80a18d0:	691b      	ldr	r3, [r3, #16]
 80a18d2:	4798      	blx	r3
 80a18d4:	2800      	cmp	r0, #0
 80a18d6:	bf14      	ite	ne
 80a18d8:	2501      	movne	r5, #1
 80a18da:	2500      	moveq	r5, #0
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a18dc:	d105      	bne.n	80a18ea <_ZN9TCPClient9connectedEv+0x4e>
          DEBUG("caling Stop No more Data and in CLOSE_WAIT");
          stop();       // Close our side
 80a18de:	6823      	ldr	r3, [r4, #0]
 80a18e0:	4620      	mov	r0, r4
 80a18e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a18e4:	4798      	blx	r3
 80a18e6:	e000      	b.n	80a18ea <_ZN9TCPClient9connectedEv+0x4e>
 80a18e8:	2501      	movs	r5, #1
      }
  }
  return rv;
}
 80a18ea:	4628      	mov	r0, r5
 80a18ec:	bd38      	pop	{r3, r4, r5, pc}

080a18ee <_ZN9TCPClientcvbEv>:
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
}

TCPClient::operator bool()
{
 80a18ee:	b508      	push	{r3, lr}
   return (status()!=0);
 80a18f0:	f7ff ff9c 	bl	80a182c <_ZN9TCPClient6statusEv>
}
 80a18f4:	3000      	adds	r0, #0
 80a18f6:	bf18      	it	ne
 80a18f8:	2001      	movne	r0, #1
 80a18fa:	bd08      	pop	{r3, pc}

080a18fc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a18fc:	4b02      	ldr	r3, [pc, #8]	; (80a1908 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a18fe:	681a      	ldr	r2, [r3, #0]
 80a1900:	4b02      	ldr	r3, [pc, #8]	; (80a190c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1902:	601a      	str	r2, [r3, #0]
 80a1904:	4770      	bx	lr
 80a1906:	bf00      	nop
 80a1908:	20000324 	.word	0x20000324
 80a190c:	2000065c 	.word	0x2000065c

080a1910 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1910:	4770      	bx	lr

080a1912 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1912:	7441      	strb	r1, [r0, #17]
 80a1914:	4770      	bx	lr

080a1916 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a1916:	7c00      	ldrb	r0, [r0, #16]
 80a1918:	f7ff bb6c 	b.w	80a0ff4 <HAL_USART_Available_Data_For_Write>

080a191c <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a191c:	7c00      	ldrb	r0, [r0, #16]
 80a191e:	f7ff bb41 	b.w	80a0fa4 <HAL_USART_Available_Data>

080a1922 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a1922:	7c00      	ldrb	r0, [r0, #16]
 80a1924:	f7ff bb4e 	b.w	80a0fc4 <HAL_USART_Peek_Data>

080a1928 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a1928:	7c00      	ldrb	r0, [r0, #16]
 80a192a:	f7ff bb43 	b.w	80a0fb4 <HAL_USART_Read_Data>

080a192e <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a192e:	7c00      	ldrb	r0, [r0, #16]
 80a1930:	f7ff bb50 	b.w	80a0fd4 <HAL_USART_Flush_Data>

080a1934 <_ZN11USARTSerialD0Ev>:
 80a1934:	b510      	push	{r4, lr}
 80a1936:	4604      	mov	r4, r0
 80a1938:	f7fe fbb1 	bl	80a009e <_ZdlPv>
 80a193c:	4620      	mov	r0, r4
 80a193e:	bd10      	pop	{r4, pc}

080a1940 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1940:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1942:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a1944:	4604      	mov	r4, r0
 80a1946:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1948:	b925      	cbnz	r5, 80a1954 <_ZN11USARTSerial5writeEh+0x14>
 80a194a:	7c00      	ldrb	r0, [r0, #16]
 80a194c:	f7ff fb52 	bl	80a0ff4 <HAL_USART_Available_Data_For_Write>
 80a1950:	2800      	cmp	r0, #0
 80a1952:	dd05      	ble.n	80a1960 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1954:	4631      	mov	r1, r6
 80a1956:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1958:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a195c:	f7ff bb1a 	b.w	80a0f94 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a1960:	4628      	mov	r0, r5
 80a1962:	bd70      	pop	{r4, r5, r6, pc}

080a1964 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1964:	b510      	push	{r4, lr}
 80a1966:	4604      	mov	r4, r0
 80a1968:	4608      	mov	r0, r1
 80a196a:	4611      	mov	r1, r2
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a196c:	2200      	movs	r2, #0
 80a196e:	6062      	str	r2, [r4, #4]
 80a1970:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1974:	60a2      	str	r2, [r4, #8]
 80a1976:	4a05      	ldr	r2, [pc, #20]	; (80a198c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a1978:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a197a:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a197c:	2201      	movs	r2, #1
 80a197e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a1980:	461a      	mov	r2, r3
 80a1982:	f7ff faff 	bl	80a0f84 <HAL_USART_Init>
}
 80a1986:	4620      	mov	r0, r4
 80a1988:	bd10      	pop	{r4, pc}
 80a198a:	bf00      	nop
 80a198c:	080a2f68 	.word	0x080a2f68

080a1990 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a1990:	7c00      	ldrb	r0, [r0, #16]
 80a1992:	f7ff bb27 	b.w	80a0fe4 <HAL_USART_Is_Enabled>
	...

080a1998 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a1998:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a199a:	4d0c      	ldr	r5, [pc, #48]	; (80a19cc <_Z22__fetch_global_Serial1v+0x34>)
 80a199c:	6829      	ldr	r1, [r5, #0]
 80a199e:	f011 0401 	ands.w	r4, r1, #1
 80a19a2:	d111      	bne.n	80a19c8 <_Z22__fetch_global_Serial1v+0x30>
 80a19a4:	4628      	mov	r0, r5
 80a19a6:	f7fe fb7c 	bl	80a00a2 <__cxa_guard_acquire>
 80a19aa:	b168      	cbz	r0, 80a19c8 <_Z22__fetch_global_Serial1v+0x30>
 80a19ac:	4a08      	ldr	r2, [pc, #32]	; (80a19d0 <_Z22__fetch_global_Serial1v+0x38>)
 80a19ae:	4621      	mov	r1, r4
 80a19b0:	4b08      	ldr	r3, [pc, #32]	; (80a19d4 <_Z22__fetch_global_Serial1v+0x3c>)
 80a19b2:	4809      	ldr	r0, [pc, #36]	; (80a19d8 <_Z22__fetch_global_Serial1v+0x40>)
 80a19b4:	f7ff ffd6 	bl	80a1964 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a19b8:	4628      	mov	r0, r5
 80a19ba:	f7fe fb77 	bl	80a00ac <__cxa_guard_release>
 80a19be:	4a07      	ldr	r2, [pc, #28]	; (80a19dc <_Z22__fetch_global_Serial1v+0x44>)
 80a19c0:	4907      	ldr	r1, [pc, #28]	; (80a19e0 <_Z22__fetch_global_Serial1v+0x48>)
 80a19c2:	4805      	ldr	r0, [pc, #20]	; (80a19d8 <_Z22__fetch_global_Serial1v+0x40>)
 80a19c4:	f000 fa74 	bl	80a1eb0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a19c8:	4803      	ldr	r0, [pc, #12]	; (80a19d8 <_Z22__fetch_global_Serial1v+0x40>)
 80a19ca:	bd38      	pop	{r3, r4, r5, pc}
 80a19cc:	200006f8 	.word	0x200006f8
 80a19d0:	200006fc 	.word	0x200006fc
 80a19d4:	20000674 	.word	0x20000674
 80a19d8:	20000660 	.word	0x20000660
 80a19dc:	20000390 	.word	0x20000390
 80a19e0:	080a1911 	.word	0x080a1911

080a19e4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a19e4:	7441      	strb	r1, [r0, #17]
 80a19e6:	4770      	bx	lr

080a19e8 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 80a19e8:	4770      	bx	lr

080a19ea <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a19ea:	2100      	movs	r1, #0
 80a19ec:	7c00      	ldrb	r0, [r0, #16]
 80a19ee:	f7ff bb29 	b.w	80a1044 <HAL_USB_USART_Receive_Data>

080a19f2 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a19f2:	2101      	movs	r1, #1
 80a19f4:	7c00      	ldrb	r0, [r0, #16]
 80a19f6:	f7ff bb25 	b.w	80a1044 <HAL_USB_USART_Receive_Data>

080a19fa <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a19fa:	7c00      	ldrb	r0, [r0, #16]
 80a19fc:	f7ff bb1a 	b.w	80a1034 <HAL_USB_USART_Available_Data_For_Write>

080a1a00 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a1a00:	7c00      	ldrb	r0, [r0, #16]
 80a1a02:	f7ff bb0f 	b.w	80a1024 <HAL_USB_USART_Available_Data>

080a1a06 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a1a06:	b538      	push	{r3, r4, r5, lr}
 80a1a08:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1a0a:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a1a0c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1a0e:	f7ff fb11 	bl	80a1034 <HAL_USB_USART_Available_Data_For_Write>
 80a1a12:	2800      	cmp	r0, #0
 80a1a14:	dc01      	bgt.n	80a1a1a <_ZN9USBSerial5writeEh+0x14>
 80a1a16:	7c60      	ldrb	r0, [r4, #17]
 80a1a18:	b120      	cbz	r0, 80a1a24 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a1a1a:	4629      	mov	r1, r5
 80a1a1c:	7c20      	ldrb	r0, [r4, #16]
 80a1a1e:	f7ff fb19 	bl	80a1054 <HAL_USB_USART_Send_Data>
    return 1;
 80a1a22:	2001      	movs	r0, #1
  }
  return 0;
}
 80a1a24:	bd38      	pop	{r3, r4, r5, pc}

080a1a26 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a1a26:	7c00      	ldrb	r0, [r0, #16]
 80a1a28:	f7ff bb1c 	b.w	80a1064 <HAL_USB_USART_Flush_Data>

080a1a2c <_ZN9USBSerialD0Ev>:
 80a1a2c:	b510      	push	{r4, lr}
 80a1a2e:	4604      	mov	r4, r0
 80a1a30:	f7fe fb35 	bl	80a009e <_ZdlPv>
 80a1a34:	4620      	mov	r0, r4
 80a1a36:	bd10      	pop	{r4, pc}

080a1a38 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1a38:	b510      	push	{r4, lr}
 80a1a3a:	4604      	mov	r4, r0
 80a1a3c:	2300      	movs	r3, #0
 80a1a3e:	6063      	str	r3, [r4, #4]
 80a1a40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1a44:	60a3      	str	r3, [r4, #8]
 80a1a46:	4b05      	ldr	r3, [pc, #20]	; (80a1a5c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a1a48:	4608      	mov	r0, r1
 80a1a4a:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a1a4c:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a1a4e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a1a50:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a1a52:	4611      	mov	r1, r2
 80a1a54:	f7ff fad6 	bl	80a1004 <HAL_USB_USART_Init>
}
 80a1a58:	4620      	mov	r0, r4
 80a1a5a:	bd10      	pop	{r4, pc}
 80a1a5c:	080a2f98 	.word	0x080a2f98

080a1a60 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a1a60:	2200      	movs	r2, #0
 80a1a62:	7c00      	ldrb	r0, [r0, #16]
 80a1a64:	f7ff bad6 	b.w	80a1014 <HAL_USB_USART_Begin>

080a1a68 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a1a68:	b510      	push	{r4, lr}
 80a1a6a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1a6c:	2214      	movs	r2, #20
 80a1a6e:	2100      	movs	r1, #0
 80a1a70:	f000 fe53 	bl	80a271a <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1a74:	4b05      	ldr	r3, [pc, #20]	; (80a1a8c <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1a76:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1a78:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a1a7a:	4b05      	ldr	r3, [pc, #20]	; (80a1a90 <_Z19acquireSerialBufferv+0x28>)
 80a1a7c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1a7e:	f240 1301 	movw	r3, #257	; 0x101
 80a1a82:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1a84:	2381      	movs	r3, #129	; 0x81
 80a1a86:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1a88:	bd10      	pop	{r4, pc}
 80a1a8a:	bf00      	nop
 80a1a8c:	20000805 	.word	0x20000805
 80a1a90:	20000784 	.word	0x20000784

080a1a94 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a1a94:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1a96:	4d0e      	ldr	r5, [pc, #56]	; (80a1ad0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a1a98:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1a9a:	a801      	add	r0, sp, #4
 80a1a9c:	f7ff ffe4 	bl	80a1a68 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1aa0:	6829      	ldr	r1, [r5, #0]
 80a1aa2:	f011 0401 	ands.w	r4, r1, #1
 80a1aa6:	d110      	bne.n	80a1aca <_Z16_fetch_usbserialv+0x36>
 80a1aa8:	4628      	mov	r0, r5
 80a1aaa:	f7fe fafa 	bl	80a00a2 <__cxa_guard_acquire>
 80a1aae:	b160      	cbz	r0, 80a1aca <_Z16_fetch_usbserialv+0x36>
 80a1ab0:	aa01      	add	r2, sp, #4
 80a1ab2:	4621      	mov	r1, r4
 80a1ab4:	4807      	ldr	r0, [pc, #28]	; (80a1ad4 <_Z16_fetch_usbserialv+0x40>)
 80a1ab6:	f7ff ffbf 	bl	80a1a38 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1aba:	4628      	mov	r0, r5
 80a1abc:	f7fe faf6 	bl	80a00ac <__cxa_guard_release>
 80a1ac0:	4a05      	ldr	r2, [pc, #20]	; (80a1ad8 <_Z16_fetch_usbserialv+0x44>)
 80a1ac2:	4906      	ldr	r1, [pc, #24]	; (80a1adc <_Z16_fetch_usbserialv+0x48>)
 80a1ac4:	4803      	ldr	r0, [pc, #12]	; (80a1ad4 <_Z16_fetch_usbserialv+0x40>)
 80a1ac6:	f000 f9f3 	bl	80a1eb0 <__aeabi_atexit>
	return _usbserial;
}
 80a1aca:	4802      	ldr	r0, [pc, #8]	; (80a1ad4 <_Z16_fetch_usbserialv+0x40>)
 80a1acc:	b007      	add	sp, #28
 80a1ace:	bd30      	pop	{r4, r5, pc}
 80a1ad0:	20000780 	.word	0x20000780
 80a1ad4:	20000908 	.word	0x20000908
 80a1ad8:	20000390 	.word	0x20000390
 80a1adc:	080a19e9 	.word	0x080a19e9

080a1ae0 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1ae0:	b510      	push	{r4, lr}
 80a1ae2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1ae4:	2214      	movs	r2, #20
 80a1ae6:	2100      	movs	r1, #0
 80a1ae8:	f000 fe17 	bl	80a271a <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1aec:	4b05      	ldr	r3, [pc, #20]	; (80a1b04 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1aee:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1af0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a1af2:	4b05      	ldr	r3, [pc, #20]	; (80a1b08 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1af4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1af6:	f240 1301 	movw	r3, #257	; 0x101
 80a1afa:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1afc:	2381      	movs	r3, #129	; 0x81
 80a1afe:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1b00:	bd10      	pop	{r4, pc}
 80a1b02:	bf00      	nop
 80a1b04:	200009b8 	.word	0x200009b8
 80a1b08:	20000920 	.word	0x20000920

080a1b0c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1b0c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1b0e:	4c0e      	ldr	r4, [pc, #56]	; (80a1b48 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a1b10:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1b12:	a801      	add	r0, sp, #4
 80a1b14:	f7ff ffe4 	bl	80a1ae0 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1b18:	6823      	ldr	r3, [r4, #0]
 80a1b1a:	07db      	lsls	r3, r3, #31
 80a1b1c:	d410      	bmi.n	80a1b40 <_Z17_fetch_usbserial1v+0x34>
 80a1b1e:	4620      	mov	r0, r4
 80a1b20:	f7fe fabf 	bl	80a00a2 <__cxa_guard_acquire>
 80a1b24:	b160      	cbz	r0, 80a1b40 <_Z17_fetch_usbserial1v+0x34>
 80a1b26:	aa01      	add	r2, sp, #4
 80a1b28:	2101      	movs	r1, #1
 80a1b2a:	4808      	ldr	r0, [pc, #32]	; (80a1b4c <_Z17_fetch_usbserial1v+0x40>)
 80a1b2c:	f7ff ff84 	bl	80a1a38 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1b30:	4620      	mov	r0, r4
 80a1b32:	f7fe fabb 	bl	80a00ac <__cxa_guard_release>
 80a1b36:	4a06      	ldr	r2, [pc, #24]	; (80a1b50 <_Z17_fetch_usbserial1v+0x44>)
 80a1b38:	4906      	ldr	r1, [pc, #24]	; (80a1b54 <_Z17_fetch_usbserial1v+0x48>)
 80a1b3a:	4804      	ldr	r0, [pc, #16]	; (80a1b4c <_Z17_fetch_usbserial1v+0x40>)
 80a1b3c:	f000 f9b8 	bl	80a1eb0 <__aeabi_atexit>
  return _usbserial1;
}
 80a1b40:	4802      	ldr	r0, [pc, #8]	; (80a1b4c <_Z17_fetch_usbserial1v+0x40>)
 80a1b42:	b006      	add	sp, #24
 80a1b44:	bd10      	pop	{r4, pc}
 80a1b46:	bf00      	nop
 80a1b48:	2000091c 	.word	0x2000091c
 80a1b4c:	200009a4 	.word	0x200009a4
 80a1b50:	20000390 	.word	0x20000390
 80a1b54:	080a19e9 	.word	0x080a19e9

080a1b58 <_ZN5spark9WiFiClassD1Ev>:
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
    ~WiFiClass() {}
 80a1b58:	4770      	bx	lr

080a1b5a <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a1b5a:	2200      	movs	r2, #0
 80a1b5c:	4611      	mov	r1, r2
 80a1b5e:	4610      	mov	r0, r2
 80a1b60:	f7ff bad4 	b.w	80a110c <network_ready>

080a1b64 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    void setIPAddressSource(IPAddressSource source) {
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
 80a1b64:	4803      	ldr	r0, [pc, #12]	; (80a1b74 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1b66:	4b04      	ldr	r3, [pc, #16]	; (80a1b78 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x14>)
one second timeout is reached). If the aforementioned "bug" is ever fixed by
TI, no changes need to be made to this function, as it would be implemented
the same way.
*****************************************************************************/

    WiFiClass WiFi;
 80a1b68:	4a04      	ldr	r2, [pc, #16]	; (80a1b7c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x18>)
 80a1b6a:	4905      	ldr	r1, [pc, #20]	; (80a1b80 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x1c>)
 80a1b6c:	6003      	str	r3, [r0, #0]
 80a1b6e:	f000 b99f 	b.w	80a1eb0 <__aeabi_atexit>
 80a1b72:	bf00      	nop
 80a1b74:	20000abc 	.word	0x20000abc
 80a1b78:	080a2fc8 	.word	0x080a2fc8
 80a1b7c:	20000390 	.word	0x20000390
 80a1b80:	080a1b59 	.word	0x080a1b59

080a1b84 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a1b84:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1b86:	4b14      	ldr	r3, [pc, #80]	; (80a1bd8 <serialEventRun+0x54>)
 80a1b88:	b133      	cbz	r3, 80a1b98 <serialEventRun+0x14>
 80a1b8a:	f7ff ff83 	bl	80a1a94 <_Z16_fetch_usbserialv>
 80a1b8e:	6803      	ldr	r3, [r0, #0]
 80a1b90:	691b      	ldr	r3, [r3, #16]
 80a1b92:	4798      	blx	r3
 80a1b94:	2800      	cmp	r0, #0
 80a1b96:	dc16      	bgt.n	80a1bc6 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a1b98:	4b10      	ldr	r3, [pc, #64]	; (80a1bdc <serialEventRun+0x58>)
 80a1b9a:	b133      	cbz	r3, 80a1baa <serialEventRun+0x26>
 80a1b9c:	f7ff fefc 	bl	80a1998 <_Z22__fetch_global_Serial1v>
 80a1ba0:	6803      	ldr	r3, [r0, #0]
 80a1ba2:	691b      	ldr	r3, [r3, #16]
 80a1ba4:	4798      	blx	r3
 80a1ba6:	2800      	cmp	r0, #0
 80a1ba8:	dc10      	bgt.n	80a1bcc <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a1baa:	4b0d      	ldr	r3, [pc, #52]	; (80a1be0 <serialEventRun+0x5c>)
 80a1bac:	b10b      	cbz	r3, 80a1bb2 <serialEventRun+0x2e>
 80a1bae:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1bb2:	4b0c      	ldr	r3, [pc, #48]	; (80a1be4 <serialEventRun+0x60>)
 80a1bb4:	b17b      	cbz	r3, 80a1bd6 <serialEventRun+0x52>
 80a1bb6:	f7ff ffa9 	bl	80a1b0c <_Z17_fetch_usbserial1v>
 80a1bba:	6803      	ldr	r3, [r0, #0]
 80a1bbc:	691b      	ldr	r3, [r3, #16]
 80a1bbe:	4798      	blx	r3
 80a1bc0:	2800      	cmp	r0, #0
 80a1bc2:	dc06      	bgt.n	80a1bd2 <serialEventRun+0x4e>
 80a1bc4:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a1bc6:	f3af 8000 	nop.w
 80a1bca:	e7e5      	b.n	80a1b98 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a1bcc:	f3af 8000 	nop.w
 80a1bd0:	e7eb      	b.n	80a1baa <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a1bd2:	f3af 8000 	nop.w
 80a1bd6:	bd08      	pop	{r3, pc}
	...

080a1be8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a1be8:	b508      	push	{r3, lr}
	serialEventRun();
 80a1bea:	f7ff ffcb 	bl	80a1b84 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1bee:	f7ff f8e7 	bl	80a0dc0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1bf2:	4b01      	ldr	r3, [pc, #4]	; (80a1bf8 <_post_loop+0x10>)
 80a1bf4:	6018      	str	r0, [r3, #0]
 80a1bf6:	bd08      	pop	{r3, pc}
 80a1bf8:	20000ac8 	.word	0x20000ac8

080a1bfc <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1bfc:	4802      	ldr	r0, [pc, #8]	; (80a1c08 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a1bfe:	4a03      	ldr	r2, [pc, #12]	; (80a1c0c <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1c00:	4903      	ldr	r1, [pc, #12]	; (80a1c10 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1c02:	1a12      	subs	r2, r2, r0
 80a1c04:	f000 bd7e 	b.w	80a2704 <memcpy>
 80a1c08:	40024000 	.word	0x40024000
 80a1c0c:	40024004 	.word	0x40024004
 80a1c10:	080a3180 	.word	0x080a3180

080a1c14 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1c14:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1c16:	2300      	movs	r3, #0
 80a1c18:	9300      	str	r3, [sp, #0]
 80a1c1a:	461a      	mov	r2, r3
 80a1c1c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1c20:	f7ff fa5a 	bl	80a10d8 <system_ctrl_set_result>
}
 80a1c24:	b003      	add	sp, #12
 80a1c26:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1c2c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a1c2c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a1c2e:	8843      	ldrh	r3, [r0, #2]
 80a1c30:	2b0a      	cmp	r3, #10
 80a1c32:	d008      	beq.n	80a1c46 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1c34:	2b50      	cmp	r3, #80	; 0x50
 80a1c36:	d109      	bne.n	80a1c4c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a1c38:	4b09      	ldr	r3, [pc, #36]	; (80a1c60 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a1c3a:	681b      	ldr	r3, [r3, #0]
 80a1c3c:	b13b      	cbz	r3, 80a1c4e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a1c3e:	b003      	add	sp, #12
 80a1c40:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a1c44:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a1c46:	f7ff ffe5 	bl	80a1c14 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a1c4a:	e006      	b.n	80a1c5a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1c4c:	2300      	movs	r3, #0
 80a1c4e:	9300      	str	r3, [sp, #0]
 80a1c50:	461a      	mov	r2, r3
 80a1c52:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1c56:	f7ff fa3f 	bl	80a10d8 <system_ctrl_set_result>
        break;
    }
}
 80a1c5a:	b003      	add	sp, #12
 80a1c5c:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1c60:	20000ac0 	.word	0x20000ac0

080a1c64 <module_user_init_hook>:

void module_user_init_hook()
{
 80a1c64:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1c66:	4c10      	ldr	r4, [pc, #64]	; (80a1ca8 <module_user_init_hook+0x44>)
 80a1c68:	4d10      	ldr	r5, [pc, #64]	; (80a1cac <module_user_init_hook+0x48>)
 80a1c6a:	6823      	ldr	r3, [r4, #0]
 80a1c6c:	42ab      	cmp	r3, r5
 80a1c6e:	4b10      	ldr	r3, [pc, #64]	; (80a1cb0 <module_user_init_hook+0x4c>)
 80a1c70:	bf0c      	ite	eq
 80a1c72:	2201      	moveq	r2, #1
 80a1c74:	2200      	movne	r2, #0
 80a1c76:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1c78:	d002      	beq.n	80a1c80 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a1c7a:	f7ff ffbf 	bl	80a1bfc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a1c7e:	6025      	str	r5, [r4, #0]
#endif

    // todo - add a RNG define for that capability
#if defined(STM32F2XX)
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    srand(HAL_RNG_GetRandomNumber());
 80a1c80:	f7ff f88e 	bl	80a0da0 <HAL_RNG_GetRandomNumber>
 80a1c84:	f000 fd52 	bl	80a272c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a1c88:	4b0a      	ldr	r3, [pc, #40]	; (80a1cb4 <module_user_init_hook+0x50>)
 80a1c8a:	b11b      	cbz	r3, 80a1c94 <module_user_init_hook+0x30>
        uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1c8c:	f7ff f888 	bl	80a0da0 <HAL_RNG_GetRandomNumber>
        random_seed_from_cloud(seed);
 80a1c90:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1c94:	2100      	movs	r1, #0
 80a1c96:	4807      	ldr	r0, [pc, #28]	; (80a1cb4 <module_user_init_hook+0x50>)
 80a1c98:	f7ff fa30 	bl	80a10fc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1ca0:	2100      	movs	r1, #0
 80a1ca2:	4805      	ldr	r0, [pc, #20]	; (80a1cb8 <module_user_init_hook+0x54>)
 80a1ca4:	f7ff ba0e 	b.w	80a10c4 <system_ctrl_set_app_request_handler>
 80a1ca8:	40024000 	.word	0x40024000
 80a1cac:	9a271c1e 	.word	0x9a271c1e
 80a1cb0:	20000ac4 	.word	0x20000ac4
 80a1cb4:	00000000 	.word	0x00000000
 80a1cb8:	080a1c2d 	.word	0x080a1c2d

080a1cbc <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a1cbc:	b510      	push	{r4, lr}
 80a1cbe:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a1cc0:	480f      	ldr	r0, [pc, #60]	; (80a1d00 <pinAvailable+0x44>)
 80a1cc2:	f7ff fb67 	bl	80a1394 <_ZN8SPIClass9isEnabledEv>
 80a1cc6:	b128      	cbz	r0, 80a1cd4 <pinAvailable+0x18>
 80a1cc8:	f1a4 030d 	sub.w	r3, r4, #13
 80a1ccc:	2b02      	cmp	r3, #2
 80a1cce:	d801      	bhi.n	80a1cd4 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a1cd0:	2000      	movs	r0, #0
 80a1cd2:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a1cd4:	f000 f892 	bl	80a1dfc <_Z19__fetch_global_Wirev>
 80a1cd8:	f7ff fa82 	bl	80a11e0 <_ZN7TwoWire9isEnabledEv>
 80a1cdc:	b108      	cbz	r0, 80a1ce2 <pinAvailable+0x26>
 80a1cde:	2c01      	cmp	r4, #1
 80a1ce0:	d9f6      	bls.n	80a1cd0 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a1ce2:	f7ff fe59 	bl	80a1998 <_Z22__fetch_global_Serial1v>
 80a1ce6:	f7ff fe53 	bl	80a1990 <_ZN11USARTSerial9isEnabledEv>
 80a1cea:	b118      	cbz	r0, 80a1cf4 <pinAvailable+0x38>
 80a1cec:	f1a4 0312 	sub.w	r3, r4, #18
 80a1cf0:	2b01      	cmp	r3, #1
 80a1cf2:	d9ed      	bls.n	80a1cd0 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a1cf4:	2c17      	cmp	r4, #23
 80a1cf6:	bf8c      	ite	hi
 80a1cf8:	2000      	movhi	r0, #0
 80a1cfa:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a1cfc:	bd10      	pop	{r4, pc}
 80a1cfe:	bf00      	nop
 80a1d00:	20000afc 	.word	0x20000afc

080a1d04 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1d04:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a1d06:	b538      	push	{r3, r4, r5, lr}
 80a1d08:	4604      	mov	r4, r0
 80a1d0a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1d0c:	d80a      	bhi.n	80a1d24 <pinMode+0x20>
 80a1d0e:	29ff      	cmp	r1, #255	; 0xff
 80a1d10:	d008      	beq.n	80a1d24 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a1d12:	f7ff ffd3 	bl	80a1cbc <pinAvailable>
 80a1d16:	b128      	cbz	r0, 80a1d24 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1d18:	4629      	mov	r1, r5
 80a1d1a:	4620      	mov	r0, r4
}
 80a1d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1d20:	f7ff b866 	b.w	80a0df0 <HAL_Pin_Mode>
 80a1d24:	bd38      	pop	{r3, r4, r5, pc}

080a1d26 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a1d26:	b538      	push	{r3, r4, r5, lr}
 80a1d28:	4604      	mov	r4, r0
 80a1d2a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a1d2c:	f7ff f868 	bl	80a0e00 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a1d30:	28ff      	cmp	r0, #255	; 0xff
 80a1d32:	d010      	beq.n	80a1d56 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a1d34:	2806      	cmp	r0, #6
 80a1d36:	d804      	bhi.n	80a1d42 <digitalWrite+0x1c>
 80a1d38:	234d      	movs	r3, #77	; 0x4d
 80a1d3a:	fa23 f000 	lsr.w	r0, r3, r0
 80a1d3e:	07c3      	lsls	r3, r0, #31
 80a1d40:	d409      	bmi.n	80a1d56 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a1d42:	4620      	mov	r0, r4
 80a1d44:	f7ff ffba 	bl	80a1cbc <pinAvailable>
 80a1d48:	b128      	cbz	r0, 80a1d56 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a1d4a:	4629      	mov	r1, r5
 80a1d4c:	4620      	mov	r0, r4
}
 80a1d4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a1d52:	f7ff b85d 	b.w	80a0e10 <HAL_GPIO_Write>
 80a1d56:	bd38      	pop	{r3, r4, r5, pc}

080a1d58 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a1d58:	b510      	push	{r4, lr}
 80a1d5a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a1d5c:	f7ff f850 	bl	80a0e00 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a1d60:	3804      	subs	r0, #4
 80a1d62:	b2c0      	uxtb	r0, r0
 80a1d64:	2801      	cmp	r0, #1
 80a1d66:	d908      	bls.n	80a1d7a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a1d68:	4620      	mov	r0, r4
 80a1d6a:	f7ff ffa7 	bl	80a1cbc <pinAvailable>
 80a1d6e:	b120      	cbz	r0, 80a1d7a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a1d70:	4620      	mov	r0, r4
}
 80a1d72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a1d76:	f7ff b853 	b.w	80a0e20 <HAL_GPIO_Read>
}
 80a1d7a:	2000      	movs	r0, #0
 80a1d7c:	bd10      	pop	{r4, pc}

080a1d7e <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a1d7e:	b510      	push	{r4, lr}
 80a1d80:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a1d82:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a1d84:	bf9c      	itt	ls
 80a1d86:	340a      	addls	r4, #10
 80a1d88:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a1d8a:	4620      	mov	r0, r4
 80a1d8c:	f7ff ff96 	bl	80a1cbc <pinAvailable>
 80a1d90:	b150      	cbz	r0, 80a1da8 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a1d92:	2103      	movs	r1, #3
 80a1d94:	4620      	mov	r0, r4
 80a1d96:	f7ff f823 	bl	80a0de0 <HAL_Validate_Pin_Function>
 80a1d9a:	2803      	cmp	r0, #3
 80a1d9c:	d104      	bne.n	80a1da8 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a1d9e:	4620      	mov	r0, r4
}
 80a1da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a1da4:	f7ff b84c 	b.w	80a0e40 <HAL_ADC_Read>
}
 80a1da8:	2000      	movs	r0, #0
 80a1daa:	bd10      	pop	{r4, pc}

080a1dac <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
 80a1dac:	b538      	push	{r3, r4, r5, lr}
 80a1dae:	4604      	mov	r4, r0
 80a1db0:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
 80a1db2:	f7ff ff83 	bl	80a1cbc <pinAvailable>
 80a1db6:	b1f0      	cbz	r0, 80a1df6 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
 80a1db8:	2104      	movs	r1, #4
 80a1dba:	4620      	mov	r0, r4
 80a1dbc:	f7ff f810 	bl	80a0de0 <HAL_Validate_Pin_Function>
 80a1dc0:	2804      	cmp	r0, #4
 80a1dc2:	d105      	bne.n	80a1dd0 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
 80a1dc4:	b2a9      	uxth	r1, r5
 80a1dc6:	4620      	mov	r0, r4
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
    }
}
 80a1dc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
    {
        HAL_DAC_Write(pin, value);
 80a1dcc:	f7ff b830 	b.w	80a0e30 <HAL_DAC_Write>
    }
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
 80a1dd0:	2102      	movs	r1, #2
 80a1dd2:	4620      	mov	r0, r4
 80a1dd4:	f7ff f804 	bl	80a0de0 <HAL_Validate_Pin_Function>
 80a1dd8:	2802      	cmp	r0, #2
 80a1dda:	d10c      	bne.n	80a1df6 <_Z11analogWritetm+0x4a>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
 80a1ddc:	4620      	mov	r0, r4
 80a1dde:	f7ff f80f 	bl	80a0e00 <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
 80a1de2:	2801      	cmp	r0, #1
 80a1de4:	d001      	beq.n	80a1dea <_Z11analogWritetm+0x3e>
 80a1de6:	2804      	cmp	r0, #4
 80a1de8:	d105      	bne.n	80a1df6 <_Z11analogWritetm+0x4a>
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
 80a1dea:	4629      	mov	r1, r5
 80a1dec:	4620      	mov	r0, r4
    }
}
 80a1dee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
 80a1df2:	f7ff b835 	b.w	80a0e60 <HAL_PWM_Write_Ext>
 80a1df6:	bd38      	pop	{r3, r4, r5, pc}

080a1df8 <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
 80a1df8:	f7ff b82a 	b.w	80a0e50 <HAL_Pulse_In>

080a1dfc <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a1dfc:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a1dfe:	4d0b      	ldr	r5, [pc, #44]	; (80a1e2c <_Z19__fetch_global_Wirev+0x30>)
 80a1e00:	6829      	ldr	r1, [r5, #0]
 80a1e02:	f011 0401 	ands.w	r4, r1, #1
 80a1e06:	d10f      	bne.n	80a1e28 <_Z19__fetch_global_Wirev+0x2c>
 80a1e08:	4628      	mov	r0, r5
 80a1e0a:	f7fe f94a 	bl	80a00a2 <__cxa_guard_acquire>
 80a1e0e:	b158      	cbz	r0, 80a1e28 <_Z19__fetch_global_Wirev+0x2c>
 80a1e10:	4621      	mov	r1, r4
 80a1e12:	4807      	ldr	r0, [pc, #28]	; (80a1e30 <_Z19__fetch_global_Wirev+0x34>)
 80a1e14:	f7ff f9d2 	bl	80a11bc <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a1e18:	4628      	mov	r0, r5
 80a1e1a:	f7fe f947 	bl	80a00ac <__cxa_guard_release>
 80a1e1e:	4a05      	ldr	r2, [pc, #20]	; (80a1e34 <_Z19__fetch_global_Wirev+0x38>)
 80a1e20:	4905      	ldr	r1, [pc, #20]	; (80a1e38 <_Z19__fetch_global_Wirev+0x3c>)
 80a1e22:	4803      	ldr	r0, [pc, #12]	; (80a1e30 <_Z19__fetch_global_Wirev+0x34>)
 80a1e24:	f000 f844 	bl	80a1eb0 <__aeabi_atexit>
	return wire;
}
 80a1e28:	4801      	ldr	r0, [pc, #4]	; (80a1e30 <_Z19__fetch_global_Wirev+0x34>)
 80a1e2a:	bd38      	pop	{r3, r4, r5, pc}
 80a1e2c:	20000acc 	.word	0x20000acc
 80a1e30:	20000ad0 	.word	0x20000ad0
 80a1e34:	20000390 	.word	0x20000390
 80a1e38:	080a1165 	.word	0x080a1165

080a1e3c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a1e3c:	b513      	push	{r0, r1, r4, lr}
 80a1e3e:	4c08      	ldr	r4, [pc, #32]	; (80a1e60 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a1e40:	2300      	movs	r3, #0
 80a1e42:	461a      	mov	r2, r3
 80a1e44:	4619      	mov	r1, r3
 80a1e46:	9300      	str	r3, [sp, #0]
 80a1e48:	4620      	mov	r0, r4
 80a1e4a:	f7ff fa09 	bl	80a1260 <_ZN9IPAddressC1Ehhhh>
 80a1e4e:	4620      	mov	r0, r4
 80a1e50:	4a04      	ldr	r2, [pc, #16]	; (80a1e64 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a1e52:	4905      	ldr	r1, [pc, #20]	; (80a1e68 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a1e54:	b002      	add	sp, #8
 80a1e56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1e5a:	f000 b829 	b.w	80a1eb0 <__aeabi_atexit>
 80a1e5e:	bf00      	nop
 80a1e60:	20000ae4 	.word	0x20000ae4
 80a1e64:	20000390 	.word	0x20000390
 80a1e68:	080a11e9 	.word	0x080a11e9

080a1e6c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1e6c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1e6e:	4c0c      	ldr	r4, [pc, #48]	; (80a1ea0 <_GLOBAL__sub_I_SPI+0x34>)
 80a1e70:	4e0c      	ldr	r6, [pc, #48]	; (80a1ea4 <_GLOBAL__sub_I_SPI+0x38>)
 80a1e72:	4d0d      	ldr	r5, [pc, #52]	; (80a1ea8 <_GLOBAL__sub_I_SPI+0x3c>)
 80a1e74:	2100      	movs	r1, #0
 80a1e76:	4620      	mov	r0, r4
 80a1e78:	f7ff fa78 	bl	80a136c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1e7c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1e7e:	4c0b      	ldr	r4, [pc, #44]	; (80a1eac <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1e80:	4632      	mov	r2, r6
 80a1e82:	4629      	mov	r1, r5
 80a1e84:	f000 f814 	bl	80a1eb0 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1e88:	2101      	movs	r1, #1
 80a1e8a:	4620      	mov	r0, r4
 80a1e8c:	f7ff fa6e 	bl	80a136c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1e90:	4632      	mov	r2, r6
 80a1e92:	4629      	mov	r1, r5
 80a1e94:	4620      	mov	r0, r4
 80a1e96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a1e9a:	f000 b809 	b.w	80a1eb0 <__aeabi_atexit>
 80a1e9e:	bf00      	nop
 80a1ea0:	20000afc 	.word	0x20000afc
 80a1ea4:	20000390 	.word	0x20000390
 80a1ea8:	080a135d 	.word	0x080a135d
 80a1eac:	20000b0c 	.word	0x20000b0c

080a1eb0 <__aeabi_atexit>:
 80a1eb0:	460b      	mov	r3, r1
 80a1eb2:	4601      	mov	r1, r0
 80a1eb4:	4618      	mov	r0, r3
 80a1eb6:	f000 bc17 	b.w	80a26e8 <__cxa_atexit>
	...

080a1ebc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a1ebc:	4b24      	ldr	r3, [pc, #144]	; (80a1f50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a1ebe:	681a      	ldr	r2, [r3, #0]
 80a1ec0:	07d0      	lsls	r0, r2, #31
 80a1ec2:	bf5c      	itt	pl
 80a1ec4:	2201      	movpl	r2, #1
 80a1ec6:	601a      	strpl	r2, [r3, #0]
 80a1ec8:	4b22      	ldr	r3, [pc, #136]	; (80a1f54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a1eca:	681a      	ldr	r2, [r3, #0]
 80a1ecc:	07d1      	lsls	r1, r2, #31
 80a1ece:	bf5c      	itt	pl
 80a1ed0:	2201      	movpl	r2, #1
 80a1ed2:	601a      	strpl	r2, [r3, #0]
 80a1ed4:	4b20      	ldr	r3, [pc, #128]	; (80a1f58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a1ed6:	681a      	ldr	r2, [r3, #0]
 80a1ed8:	07d2      	lsls	r2, r2, #31
 80a1eda:	bf5c      	itt	pl
 80a1edc:	2201      	movpl	r2, #1
 80a1ede:	601a      	strpl	r2, [r3, #0]
 80a1ee0:	4b1e      	ldr	r3, [pc, #120]	; (80a1f5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a1ee2:	681a      	ldr	r2, [r3, #0]
 80a1ee4:	07d0      	lsls	r0, r2, #31
 80a1ee6:	bf5c      	itt	pl
 80a1ee8:	2201      	movpl	r2, #1
 80a1eea:	601a      	strpl	r2, [r3, #0]
 80a1eec:	4b1c      	ldr	r3, [pc, #112]	; (80a1f60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a1eee:	681a      	ldr	r2, [r3, #0]
 80a1ef0:	07d1      	lsls	r1, r2, #31
 80a1ef2:	bf5c      	itt	pl
 80a1ef4:	2201      	movpl	r2, #1
 80a1ef6:	601a      	strpl	r2, [r3, #0]
 80a1ef8:	4b1a      	ldr	r3, [pc, #104]	; (80a1f64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a1efa:	681a      	ldr	r2, [r3, #0]
 80a1efc:	07d2      	lsls	r2, r2, #31
 80a1efe:	bf5c      	itt	pl
 80a1f00:	2201      	movpl	r2, #1
 80a1f02:	601a      	strpl	r2, [r3, #0]
 80a1f04:	4b18      	ldr	r3, [pc, #96]	; (80a1f68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a1f06:	681a      	ldr	r2, [r3, #0]
 80a1f08:	07d0      	lsls	r0, r2, #31
 80a1f0a:	bf5c      	itt	pl
 80a1f0c:	2201      	movpl	r2, #1
 80a1f0e:	601a      	strpl	r2, [r3, #0]
 80a1f10:	4b16      	ldr	r3, [pc, #88]	; (80a1f6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a1f12:	681a      	ldr	r2, [r3, #0]
 80a1f14:	07d1      	lsls	r1, r2, #31
 80a1f16:	bf5c      	itt	pl
 80a1f18:	2201      	movpl	r2, #1
 80a1f1a:	601a      	strpl	r2, [r3, #0]
 80a1f1c:	4b14      	ldr	r3, [pc, #80]	; (80a1f70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a1f1e:	681a      	ldr	r2, [r3, #0]
 80a1f20:	07d2      	lsls	r2, r2, #31
 80a1f22:	bf5c      	itt	pl
 80a1f24:	2201      	movpl	r2, #1
 80a1f26:	601a      	strpl	r2, [r3, #0]
 80a1f28:	4b12      	ldr	r3, [pc, #72]	; (80a1f74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a1f2a:	681a      	ldr	r2, [r3, #0]
 80a1f2c:	07d0      	lsls	r0, r2, #31
 80a1f2e:	bf5c      	itt	pl
 80a1f30:	2201      	movpl	r2, #1
 80a1f32:	601a      	strpl	r2, [r3, #0]
 80a1f34:	4b10      	ldr	r3, [pc, #64]	; (80a1f78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a1f36:	681a      	ldr	r2, [r3, #0]
 80a1f38:	07d1      	lsls	r1, r2, #31
 80a1f3a:	bf5c      	itt	pl
 80a1f3c:	2201      	movpl	r2, #1
 80a1f3e:	601a      	strpl	r2, [r3, #0]
 80a1f40:	4b0e      	ldr	r3, [pc, #56]	; (80a1f7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a1f42:	681a      	ldr	r2, [r3, #0]
 80a1f44:	07d2      	lsls	r2, r2, #31
 80a1f46:	bf5c      	itt	pl
 80a1f48:	2201      	movpl	r2, #1
 80a1f4a:	601a      	strpl	r2, [r3, #0]
 80a1f4c:	4770      	bx	lr
 80a1f4e:	bf00      	nop
 80a1f50:	20000b48 	.word	0x20000b48
 80a1f54:	20000b44 	.word	0x20000b44
 80a1f58:	20000b40 	.word	0x20000b40
 80a1f5c:	20000b3c 	.word	0x20000b3c
 80a1f60:	20000b38 	.word	0x20000b38
 80a1f64:	20000b34 	.word	0x20000b34
 80a1f68:	20000b30 	.word	0x20000b30
 80a1f6c:	20000b2c 	.word	0x20000b2c
 80a1f70:	20000b28 	.word	0x20000b28
 80a1f74:	20000b24 	.word	0x20000b24
 80a1f78:	20000b20 	.word	0x20000b20
 80a1f7c:	20000b1c 	.word	0x20000b1c

080a1f80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1f80:	4b18      	ldr	r3, [pc, #96]	; (80a1fe4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1f82:	681a      	ldr	r2, [r3, #0]
 80a1f84:	07d1      	lsls	r1, r2, #31
 80a1f86:	bf5c      	itt	pl
 80a1f88:	2201      	movpl	r2, #1
 80a1f8a:	601a      	strpl	r2, [r3, #0]
 80a1f8c:	4b16      	ldr	r3, [pc, #88]	; (80a1fe8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1f8e:	681a      	ldr	r2, [r3, #0]
 80a1f90:	07d2      	lsls	r2, r2, #31
 80a1f92:	bf5c      	itt	pl
 80a1f94:	2201      	movpl	r2, #1
 80a1f96:	601a      	strpl	r2, [r3, #0]
 80a1f98:	4b14      	ldr	r3, [pc, #80]	; (80a1fec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1f9a:	681a      	ldr	r2, [r3, #0]
 80a1f9c:	07d0      	lsls	r0, r2, #31
 80a1f9e:	bf5c      	itt	pl
 80a1fa0:	2201      	movpl	r2, #1
 80a1fa2:	601a      	strpl	r2, [r3, #0]
 80a1fa4:	4b12      	ldr	r3, [pc, #72]	; (80a1ff0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1fa6:	681a      	ldr	r2, [r3, #0]
 80a1fa8:	07d1      	lsls	r1, r2, #31
 80a1faa:	bf5c      	itt	pl
 80a1fac:	2201      	movpl	r2, #1
 80a1fae:	601a      	strpl	r2, [r3, #0]
 80a1fb0:	4b10      	ldr	r3, [pc, #64]	; (80a1ff4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1fb2:	681a      	ldr	r2, [r3, #0]
 80a1fb4:	07d2      	lsls	r2, r2, #31
 80a1fb6:	bf5c      	itt	pl
 80a1fb8:	2201      	movpl	r2, #1
 80a1fba:	601a      	strpl	r2, [r3, #0]
 80a1fbc:	4b0e      	ldr	r3, [pc, #56]	; (80a1ff8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1fbe:	681a      	ldr	r2, [r3, #0]
 80a1fc0:	07d0      	lsls	r0, r2, #31
 80a1fc2:	bf5c      	itt	pl
 80a1fc4:	2201      	movpl	r2, #1
 80a1fc6:	601a      	strpl	r2, [r3, #0]
 80a1fc8:	4b0c      	ldr	r3, [pc, #48]	; (80a1ffc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1fca:	681a      	ldr	r2, [r3, #0]
 80a1fcc:	07d1      	lsls	r1, r2, #31
 80a1fce:	bf5c      	itt	pl
 80a1fd0:	2201      	movpl	r2, #1
 80a1fd2:	601a      	strpl	r2, [r3, #0]
 80a1fd4:	4b0a      	ldr	r3, [pc, #40]	; (80a2000 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1fd6:	681a      	ldr	r2, [r3, #0]
 80a1fd8:	07d2      	lsls	r2, r2, #31
 80a1fda:	bf5c      	itt	pl
 80a1fdc:	2201      	movpl	r2, #1
 80a1fde:	601a      	strpl	r2, [r3, #0]
 80a1fe0:	4770      	bx	lr
 80a1fe2:	bf00      	nop
 80a1fe4:	20000b68 	.word	0x20000b68
 80a1fe8:	20000b64 	.word	0x20000b64
 80a1fec:	20000b60 	.word	0x20000b60
 80a1ff0:	20000b5c 	.word	0x20000b5c
 80a1ff4:	20000b58 	.word	0x20000b58
 80a1ff8:	20000b54 	.word	0x20000b54
 80a1ffc:	20000b50 	.word	0x20000b50
 80a2000:	20000b4c 	.word	0x20000b4c

080a2004 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2004:	4b18      	ldr	r3, [pc, #96]	; (80a2068 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2006:	681a      	ldr	r2, [r3, #0]
 80a2008:	07d1      	lsls	r1, r2, #31
 80a200a:	bf5c      	itt	pl
 80a200c:	2201      	movpl	r2, #1
 80a200e:	601a      	strpl	r2, [r3, #0]
 80a2010:	4b16      	ldr	r3, [pc, #88]	; (80a206c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2012:	681a      	ldr	r2, [r3, #0]
 80a2014:	07d2      	lsls	r2, r2, #31
 80a2016:	bf5c      	itt	pl
 80a2018:	2201      	movpl	r2, #1
 80a201a:	601a      	strpl	r2, [r3, #0]
 80a201c:	4b14      	ldr	r3, [pc, #80]	; (80a2070 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a201e:	681a      	ldr	r2, [r3, #0]
 80a2020:	07d0      	lsls	r0, r2, #31
 80a2022:	bf5c      	itt	pl
 80a2024:	2201      	movpl	r2, #1
 80a2026:	601a      	strpl	r2, [r3, #0]
 80a2028:	4b12      	ldr	r3, [pc, #72]	; (80a2074 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a202a:	681a      	ldr	r2, [r3, #0]
 80a202c:	07d1      	lsls	r1, r2, #31
 80a202e:	bf5c      	itt	pl
 80a2030:	2201      	movpl	r2, #1
 80a2032:	601a      	strpl	r2, [r3, #0]
 80a2034:	4b10      	ldr	r3, [pc, #64]	; (80a2078 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2036:	681a      	ldr	r2, [r3, #0]
 80a2038:	07d2      	lsls	r2, r2, #31
 80a203a:	bf5c      	itt	pl
 80a203c:	2201      	movpl	r2, #1
 80a203e:	601a      	strpl	r2, [r3, #0]
 80a2040:	4b0e      	ldr	r3, [pc, #56]	; (80a207c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2042:	681a      	ldr	r2, [r3, #0]
 80a2044:	07d0      	lsls	r0, r2, #31
 80a2046:	bf5c      	itt	pl
 80a2048:	2201      	movpl	r2, #1
 80a204a:	601a      	strpl	r2, [r3, #0]
 80a204c:	4b0c      	ldr	r3, [pc, #48]	; (80a2080 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a204e:	681a      	ldr	r2, [r3, #0]
 80a2050:	07d1      	lsls	r1, r2, #31
 80a2052:	bf5c      	itt	pl
 80a2054:	2201      	movpl	r2, #1
 80a2056:	601a      	strpl	r2, [r3, #0]
 80a2058:	4b0a      	ldr	r3, [pc, #40]	; (80a2084 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a205a:	681a      	ldr	r2, [r3, #0]
 80a205c:	07d2      	lsls	r2, r2, #31
 80a205e:	bf5c      	itt	pl
 80a2060:	2201      	movpl	r2, #1
 80a2062:	601a      	strpl	r2, [r3, #0]
 80a2064:	4770      	bx	lr
 80a2066:	bf00      	nop
 80a2068:	20000b88 	.word	0x20000b88
 80a206c:	20000b84 	.word	0x20000b84
 80a2070:	20000b80 	.word	0x20000b80
 80a2074:	20000b7c 	.word	0x20000b7c
 80a2078:	20000b78 	.word	0x20000b78
 80a207c:	20000b74 	.word	0x20000b74
 80a2080:	20000b70 	.word	0x20000b70
 80a2084:	20000b6c 	.word	0x20000b6c

080a2088 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a2088:	4b24      	ldr	r3, [pc, #144]	; (80a211c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a208a:	681a      	ldr	r2, [r3, #0]
 80a208c:	07d0      	lsls	r0, r2, #31
 80a208e:	bf5c      	itt	pl
 80a2090:	2201      	movpl	r2, #1
 80a2092:	601a      	strpl	r2, [r3, #0]
 80a2094:	4b22      	ldr	r3, [pc, #136]	; (80a2120 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a2096:	681a      	ldr	r2, [r3, #0]
 80a2098:	07d1      	lsls	r1, r2, #31
 80a209a:	bf5c      	itt	pl
 80a209c:	2201      	movpl	r2, #1
 80a209e:	601a      	strpl	r2, [r3, #0]
 80a20a0:	4b20      	ldr	r3, [pc, #128]	; (80a2124 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a20a2:	681a      	ldr	r2, [r3, #0]
 80a20a4:	07d2      	lsls	r2, r2, #31
 80a20a6:	bf5c      	itt	pl
 80a20a8:	2201      	movpl	r2, #1
 80a20aa:	601a      	strpl	r2, [r3, #0]
 80a20ac:	4b1e      	ldr	r3, [pc, #120]	; (80a2128 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a20ae:	681a      	ldr	r2, [r3, #0]
 80a20b0:	07d0      	lsls	r0, r2, #31
 80a20b2:	bf5c      	itt	pl
 80a20b4:	2201      	movpl	r2, #1
 80a20b6:	601a      	strpl	r2, [r3, #0]
 80a20b8:	4b1c      	ldr	r3, [pc, #112]	; (80a212c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a20ba:	681a      	ldr	r2, [r3, #0]
 80a20bc:	07d1      	lsls	r1, r2, #31
 80a20be:	bf5c      	itt	pl
 80a20c0:	2201      	movpl	r2, #1
 80a20c2:	601a      	strpl	r2, [r3, #0]
 80a20c4:	4b1a      	ldr	r3, [pc, #104]	; (80a2130 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a20c6:	681a      	ldr	r2, [r3, #0]
 80a20c8:	07d2      	lsls	r2, r2, #31
 80a20ca:	bf5c      	itt	pl
 80a20cc:	2201      	movpl	r2, #1
 80a20ce:	601a      	strpl	r2, [r3, #0]
 80a20d0:	4b18      	ldr	r3, [pc, #96]	; (80a2134 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a20d2:	681a      	ldr	r2, [r3, #0]
 80a20d4:	07d0      	lsls	r0, r2, #31
 80a20d6:	bf5c      	itt	pl
 80a20d8:	2201      	movpl	r2, #1
 80a20da:	601a      	strpl	r2, [r3, #0]
 80a20dc:	4b16      	ldr	r3, [pc, #88]	; (80a2138 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a20de:	681a      	ldr	r2, [r3, #0]
 80a20e0:	07d1      	lsls	r1, r2, #31
 80a20e2:	bf5c      	itt	pl
 80a20e4:	2201      	movpl	r2, #1
 80a20e6:	601a      	strpl	r2, [r3, #0]
 80a20e8:	4b14      	ldr	r3, [pc, #80]	; (80a213c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a20ea:	681a      	ldr	r2, [r3, #0]
 80a20ec:	07d2      	lsls	r2, r2, #31
 80a20ee:	bf5c      	itt	pl
 80a20f0:	2201      	movpl	r2, #1
 80a20f2:	601a      	strpl	r2, [r3, #0]
 80a20f4:	4b12      	ldr	r3, [pc, #72]	; (80a2140 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a20f6:	681a      	ldr	r2, [r3, #0]
 80a20f8:	07d0      	lsls	r0, r2, #31
 80a20fa:	bf5c      	itt	pl
 80a20fc:	2201      	movpl	r2, #1
 80a20fe:	601a      	strpl	r2, [r3, #0]
 80a2100:	4b10      	ldr	r3, [pc, #64]	; (80a2144 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a2102:	681a      	ldr	r2, [r3, #0]
 80a2104:	07d1      	lsls	r1, r2, #31
 80a2106:	bf5c      	itt	pl
 80a2108:	2201      	movpl	r2, #1
 80a210a:	601a      	strpl	r2, [r3, #0]
 80a210c:	4b0e      	ldr	r3, [pc, #56]	; (80a2148 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a210e:	681a      	ldr	r2, [r3, #0]
 80a2110:	07d2      	lsls	r2, r2, #31
 80a2112:	bf5c      	itt	pl
 80a2114:	2201      	movpl	r2, #1
 80a2116:	601a      	strpl	r2, [r3, #0]
 80a2118:	4770      	bx	lr
 80a211a:	bf00      	nop
 80a211c:	20000bb8 	.word	0x20000bb8
 80a2120:	20000bb4 	.word	0x20000bb4
 80a2124:	20000bb0 	.word	0x20000bb0
 80a2128:	20000bac 	.word	0x20000bac
 80a212c:	20000ba8 	.word	0x20000ba8
 80a2130:	20000ba4 	.word	0x20000ba4
 80a2134:	20000ba0 	.word	0x20000ba0
 80a2138:	20000b9c 	.word	0x20000b9c
 80a213c:	20000b98 	.word	0x20000b98
 80a2140:	20000b94 	.word	0x20000b94
 80a2144:	20000b90 	.word	0x20000b90
 80a2148:	20000b8c 	.word	0x20000b8c

080a214c <__aeabi_drsub>:
 80a214c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a2150:	e002      	b.n	80a2158 <__adddf3>
 80a2152:	bf00      	nop

080a2154 <__aeabi_dsub>:
 80a2154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a2158 <__adddf3>:
 80a2158:	b530      	push	{r4, r5, lr}
 80a215a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a215e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a2162:	ea94 0f05 	teq	r4, r5
 80a2166:	bf08      	it	eq
 80a2168:	ea90 0f02 	teqeq	r0, r2
 80a216c:	bf1f      	itttt	ne
 80a216e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a2172:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a2176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a217a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a217e:	f000 80e2 	beq.w	80a2346 <__adddf3+0x1ee>
 80a2182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a2186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a218a:	bfb8      	it	lt
 80a218c:	426d      	neglt	r5, r5
 80a218e:	dd0c      	ble.n	80a21aa <__adddf3+0x52>
 80a2190:	442c      	add	r4, r5
 80a2192:	ea80 0202 	eor.w	r2, r0, r2
 80a2196:	ea81 0303 	eor.w	r3, r1, r3
 80a219a:	ea82 0000 	eor.w	r0, r2, r0
 80a219e:	ea83 0101 	eor.w	r1, r3, r1
 80a21a2:	ea80 0202 	eor.w	r2, r0, r2
 80a21a6:	ea81 0303 	eor.w	r3, r1, r3
 80a21aa:	2d36      	cmp	r5, #54	; 0x36
 80a21ac:	bf88      	it	hi
 80a21ae:	bd30      	pophi	{r4, r5, pc}
 80a21b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a21b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a21b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a21bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a21c0:	d002      	beq.n	80a21c8 <__adddf3+0x70>
 80a21c2:	4240      	negs	r0, r0
 80a21c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a21c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a21cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a21d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a21d4:	d002      	beq.n	80a21dc <__adddf3+0x84>
 80a21d6:	4252      	negs	r2, r2
 80a21d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a21dc:	ea94 0f05 	teq	r4, r5
 80a21e0:	f000 80a7 	beq.w	80a2332 <__adddf3+0x1da>
 80a21e4:	f1a4 0401 	sub.w	r4, r4, #1
 80a21e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80a21ec:	db0d      	blt.n	80a220a <__adddf3+0xb2>
 80a21ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a21f2:	fa22 f205 	lsr.w	r2, r2, r5
 80a21f6:	1880      	adds	r0, r0, r2
 80a21f8:	f141 0100 	adc.w	r1, r1, #0
 80a21fc:	fa03 f20e 	lsl.w	r2, r3, lr
 80a2200:	1880      	adds	r0, r0, r2
 80a2202:	fa43 f305 	asr.w	r3, r3, r5
 80a2206:	4159      	adcs	r1, r3
 80a2208:	e00e      	b.n	80a2228 <__adddf3+0xd0>
 80a220a:	f1a5 0520 	sub.w	r5, r5, #32
 80a220e:	f10e 0e20 	add.w	lr, lr, #32
 80a2212:	2a01      	cmp	r2, #1
 80a2214:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a2218:	bf28      	it	cs
 80a221a:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a221e:	fa43 f305 	asr.w	r3, r3, r5
 80a2222:	18c0      	adds	r0, r0, r3
 80a2224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a2228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a222c:	d507      	bpl.n	80a223e <__adddf3+0xe6>
 80a222e:	f04f 0e00 	mov.w	lr, #0
 80a2232:	f1dc 0c00 	rsbs	ip, ip, #0
 80a2236:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a223a:	eb6e 0101 	sbc.w	r1, lr, r1
 80a223e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a2242:	d31b      	bcc.n	80a227c <__adddf3+0x124>
 80a2244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a2248:	d30c      	bcc.n	80a2264 <__adddf3+0x10c>
 80a224a:	0849      	lsrs	r1, r1, #1
 80a224c:	ea5f 0030 	movs.w	r0, r0, rrx
 80a2250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a2254:	f104 0401 	add.w	r4, r4, #1
 80a2258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a225c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a2260:	f080 809a 	bcs.w	80a2398 <__adddf3+0x240>
 80a2264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2268:	bf08      	it	eq
 80a226a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a226e:	f150 0000 	adcs.w	r0, r0, #0
 80a2272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2276:	ea41 0105 	orr.w	r1, r1, r5
 80a227a:	bd30      	pop	{r4, r5, pc}
 80a227c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a2280:	4140      	adcs	r0, r0
 80a2282:	eb41 0101 	adc.w	r1, r1, r1
 80a2286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a228a:	f1a4 0401 	sub.w	r4, r4, #1
 80a228e:	d1e9      	bne.n	80a2264 <__adddf3+0x10c>
 80a2290:	f091 0f00 	teq	r1, #0
 80a2294:	bf04      	itt	eq
 80a2296:	4601      	moveq	r1, r0
 80a2298:	2000      	moveq	r0, #0
 80a229a:	fab1 f381 	clz	r3, r1
 80a229e:	bf08      	it	eq
 80a22a0:	3320      	addeq	r3, #32
 80a22a2:	f1a3 030b 	sub.w	r3, r3, #11
 80a22a6:	f1b3 0220 	subs.w	r2, r3, #32
 80a22aa:	da0c      	bge.n	80a22c6 <__adddf3+0x16e>
 80a22ac:	320c      	adds	r2, #12
 80a22ae:	dd08      	ble.n	80a22c2 <__adddf3+0x16a>
 80a22b0:	f102 0c14 	add.w	ip, r2, #20
 80a22b4:	f1c2 020c 	rsb	r2, r2, #12
 80a22b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80a22bc:	fa21 f102 	lsr.w	r1, r1, r2
 80a22c0:	e00c      	b.n	80a22dc <__adddf3+0x184>
 80a22c2:	f102 0214 	add.w	r2, r2, #20
 80a22c6:	bfd8      	it	le
 80a22c8:	f1c2 0c20 	rsble	ip, r2, #32
 80a22cc:	fa01 f102 	lsl.w	r1, r1, r2
 80a22d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a22d4:	bfdc      	itt	le
 80a22d6:	ea41 010c 	orrle.w	r1, r1, ip
 80a22da:	4090      	lslle	r0, r2
 80a22dc:	1ae4      	subs	r4, r4, r3
 80a22de:	bfa2      	ittt	ge
 80a22e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a22e4:	4329      	orrge	r1, r5
 80a22e6:	bd30      	popge	{r4, r5, pc}
 80a22e8:	ea6f 0404 	mvn.w	r4, r4
 80a22ec:	3c1f      	subs	r4, #31
 80a22ee:	da1c      	bge.n	80a232a <__adddf3+0x1d2>
 80a22f0:	340c      	adds	r4, #12
 80a22f2:	dc0e      	bgt.n	80a2312 <__adddf3+0x1ba>
 80a22f4:	f104 0414 	add.w	r4, r4, #20
 80a22f8:	f1c4 0220 	rsb	r2, r4, #32
 80a22fc:	fa20 f004 	lsr.w	r0, r0, r4
 80a2300:	fa01 f302 	lsl.w	r3, r1, r2
 80a2304:	ea40 0003 	orr.w	r0, r0, r3
 80a2308:	fa21 f304 	lsr.w	r3, r1, r4
 80a230c:	ea45 0103 	orr.w	r1, r5, r3
 80a2310:	bd30      	pop	{r4, r5, pc}
 80a2312:	f1c4 040c 	rsb	r4, r4, #12
 80a2316:	f1c4 0220 	rsb	r2, r4, #32
 80a231a:	fa20 f002 	lsr.w	r0, r0, r2
 80a231e:	fa01 f304 	lsl.w	r3, r1, r4
 80a2322:	ea40 0003 	orr.w	r0, r0, r3
 80a2326:	4629      	mov	r1, r5
 80a2328:	bd30      	pop	{r4, r5, pc}
 80a232a:	fa21 f004 	lsr.w	r0, r1, r4
 80a232e:	4629      	mov	r1, r5
 80a2330:	bd30      	pop	{r4, r5, pc}
 80a2332:	f094 0f00 	teq	r4, #0
 80a2336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a233a:	bf06      	itte	eq
 80a233c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a2340:	3401      	addeq	r4, #1
 80a2342:	3d01      	subne	r5, #1
 80a2344:	e74e      	b.n	80a21e4 <__adddf3+0x8c>
 80a2346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a234a:	bf18      	it	ne
 80a234c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2350:	d029      	beq.n	80a23a6 <__adddf3+0x24e>
 80a2352:	ea94 0f05 	teq	r4, r5
 80a2356:	bf08      	it	eq
 80a2358:	ea90 0f02 	teqeq	r0, r2
 80a235c:	d005      	beq.n	80a236a <__adddf3+0x212>
 80a235e:	ea54 0c00 	orrs.w	ip, r4, r0
 80a2362:	bf04      	itt	eq
 80a2364:	4619      	moveq	r1, r3
 80a2366:	4610      	moveq	r0, r2
 80a2368:	bd30      	pop	{r4, r5, pc}
 80a236a:	ea91 0f03 	teq	r1, r3
 80a236e:	bf1e      	ittt	ne
 80a2370:	2100      	movne	r1, #0
 80a2372:	2000      	movne	r0, #0
 80a2374:	bd30      	popne	{r4, r5, pc}
 80a2376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a237a:	d105      	bne.n	80a2388 <__adddf3+0x230>
 80a237c:	0040      	lsls	r0, r0, #1
 80a237e:	4149      	adcs	r1, r1
 80a2380:	bf28      	it	cs
 80a2382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a2386:	bd30      	pop	{r4, r5, pc}
 80a2388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a238c:	bf3c      	itt	cc
 80a238e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a2392:	bd30      	popcc	{r4, r5, pc}
 80a2394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a239c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a23a0:	f04f 0000 	mov.w	r0, #0
 80a23a4:	bd30      	pop	{r4, r5, pc}
 80a23a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a23aa:	bf1a      	itte	ne
 80a23ac:	4619      	movne	r1, r3
 80a23ae:	4610      	movne	r0, r2
 80a23b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a23b4:	bf1c      	itt	ne
 80a23b6:	460b      	movne	r3, r1
 80a23b8:	4602      	movne	r2, r0
 80a23ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a23be:	bf06      	itte	eq
 80a23c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a23c4:	ea91 0f03 	teqeq	r1, r3
 80a23c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a23cc:	bd30      	pop	{r4, r5, pc}
 80a23ce:	bf00      	nop

080a23d0 <__aeabi_ui2d>:
 80a23d0:	f090 0f00 	teq	r0, #0
 80a23d4:	bf04      	itt	eq
 80a23d6:	2100      	moveq	r1, #0
 80a23d8:	4770      	bxeq	lr
 80a23da:	b530      	push	{r4, r5, lr}
 80a23dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a23e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a23e4:	f04f 0500 	mov.w	r5, #0
 80a23e8:	f04f 0100 	mov.w	r1, #0
 80a23ec:	e750      	b.n	80a2290 <__adddf3+0x138>
 80a23ee:	bf00      	nop

080a23f0 <__aeabi_i2d>:
 80a23f0:	f090 0f00 	teq	r0, #0
 80a23f4:	bf04      	itt	eq
 80a23f6:	2100      	moveq	r1, #0
 80a23f8:	4770      	bxeq	lr
 80a23fa:	b530      	push	{r4, r5, lr}
 80a23fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a2408:	bf48      	it	mi
 80a240a:	4240      	negmi	r0, r0
 80a240c:	f04f 0100 	mov.w	r1, #0
 80a2410:	e73e      	b.n	80a2290 <__adddf3+0x138>
 80a2412:	bf00      	nop

080a2414 <__aeabi_f2d>:
 80a2414:	0042      	lsls	r2, r0, #1
 80a2416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a241a:	ea4f 0131 	mov.w	r1, r1, rrx
 80a241e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a2422:	bf1f      	itttt	ne
 80a2424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a2428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a242c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a2430:	4770      	bxne	lr
 80a2432:	f092 0f00 	teq	r2, #0
 80a2436:	bf14      	ite	ne
 80a2438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a243c:	4770      	bxeq	lr
 80a243e:	b530      	push	{r4, r5, lr}
 80a2440:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a2444:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2448:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a244c:	e720      	b.n	80a2290 <__adddf3+0x138>
 80a244e:	bf00      	nop

080a2450 <__aeabi_ul2d>:
 80a2450:	ea50 0201 	orrs.w	r2, r0, r1
 80a2454:	bf08      	it	eq
 80a2456:	4770      	bxeq	lr
 80a2458:	b530      	push	{r4, r5, lr}
 80a245a:	f04f 0500 	mov.w	r5, #0
 80a245e:	e00a      	b.n	80a2476 <__aeabi_l2d+0x16>

080a2460 <__aeabi_l2d>:
 80a2460:	ea50 0201 	orrs.w	r2, r0, r1
 80a2464:	bf08      	it	eq
 80a2466:	4770      	bxeq	lr
 80a2468:	b530      	push	{r4, r5, lr}
 80a246a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a246e:	d502      	bpl.n	80a2476 <__aeabi_l2d+0x16>
 80a2470:	4240      	negs	r0, r0
 80a2472:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2476:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a247a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a247e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a2482:	f43f aedc 	beq.w	80a223e <__adddf3+0xe6>
 80a2486:	f04f 0203 	mov.w	r2, #3
 80a248a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a248e:	bf18      	it	ne
 80a2490:	3203      	addne	r2, #3
 80a2492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2496:	bf18      	it	ne
 80a2498:	3203      	addne	r2, #3
 80a249a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a249e:	f1c2 0320 	rsb	r3, r2, #32
 80a24a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80a24a6:	fa20 f002 	lsr.w	r0, r0, r2
 80a24aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80a24ae:	ea40 000e 	orr.w	r0, r0, lr
 80a24b2:	fa21 f102 	lsr.w	r1, r1, r2
 80a24b6:	4414      	add	r4, r2
 80a24b8:	e6c1      	b.n	80a223e <__adddf3+0xe6>
 80a24ba:	bf00      	nop

080a24bc <__aeabi_frsub>:
 80a24bc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a24c0:	e002      	b.n	80a24c8 <__addsf3>
 80a24c2:	bf00      	nop

080a24c4 <__aeabi_fsub>:
 80a24c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a24c8 <__addsf3>:
 80a24c8:	0042      	lsls	r2, r0, #1
 80a24ca:	bf1f      	itttt	ne
 80a24cc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a24d0:	ea92 0f03 	teqne	r2, r3
 80a24d4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a24d8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a24dc:	d06a      	beq.n	80a25b4 <__addsf3+0xec>
 80a24de:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a24e2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a24e6:	bfc1      	itttt	gt
 80a24e8:	18d2      	addgt	r2, r2, r3
 80a24ea:	4041      	eorgt	r1, r0
 80a24ec:	4048      	eorgt	r0, r1
 80a24ee:	4041      	eorgt	r1, r0
 80a24f0:	bfb8      	it	lt
 80a24f2:	425b      	neglt	r3, r3
 80a24f4:	2b19      	cmp	r3, #25
 80a24f6:	bf88      	it	hi
 80a24f8:	4770      	bxhi	lr
 80a24fa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a24fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2502:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a2506:	bf18      	it	ne
 80a2508:	4240      	negne	r0, r0
 80a250a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a250e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a2512:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a2516:	bf18      	it	ne
 80a2518:	4249      	negne	r1, r1
 80a251a:	ea92 0f03 	teq	r2, r3
 80a251e:	d03f      	beq.n	80a25a0 <__addsf3+0xd8>
 80a2520:	f1a2 0201 	sub.w	r2, r2, #1
 80a2524:	fa41 fc03 	asr.w	ip, r1, r3
 80a2528:	eb10 000c 	adds.w	r0, r0, ip
 80a252c:	f1c3 0320 	rsb	r3, r3, #32
 80a2530:	fa01 f103 	lsl.w	r1, r1, r3
 80a2534:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a2538:	d502      	bpl.n	80a2540 <__addsf3+0x78>
 80a253a:	4249      	negs	r1, r1
 80a253c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a2540:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a2544:	d313      	bcc.n	80a256e <__addsf3+0xa6>
 80a2546:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a254a:	d306      	bcc.n	80a255a <__addsf3+0x92>
 80a254c:	0840      	lsrs	r0, r0, #1
 80a254e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a2552:	f102 0201 	add.w	r2, r2, #1
 80a2556:	2afe      	cmp	r2, #254	; 0xfe
 80a2558:	d251      	bcs.n	80a25fe <__addsf3+0x136>
 80a255a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a255e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2562:	bf08      	it	eq
 80a2564:	f020 0001 	biceq.w	r0, r0, #1
 80a2568:	ea40 0003 	orr.w	r0, r0, r3
 80a256c:	4770      	bx	lr
 80a256e:	0049      	lsls	r1, r1, #1
 80a2570:	eb40 0000 	adc.w	r0, r0, r0
 80a2574:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a2578:	f1a2 0201 	sub.w	r2, r2, #1
 80a257c:	d1ed      	bne.n	80a255a <__addsf3+0x92>
 80a257e:	fab0 fc80 	clz	ip, r0
 80a2582:	f1ac 0c08 	sub.w	ip, ip, #8
 80a2586:	ebb2 020c 	subs.w	r2, r2, ip
 80a258a:	fa00 f00c 	lsl.w	r0, r0, ip
 80a258e:	bfaa      	itet	ge
 80a2590:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a2594:	4252      	neglt	r2, r2
 80a2596:	4318      	orrge	r0, r3
 80a2598:	bfbc      	itt	lt
 80a259a:	40d0      	lsrlt	r0, r2
 80a259c:	4318      	orrlt	r0, r3
 80a259e:	4770      	bx	lr
 80a25a0:	f092 0f00 	teq	r2, #0
 80a25a4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a25a8:	bf06      	itte	eq
 80a25aa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a25ae:	3201      	addeq	r2, #1
 80a25b0:	3b01      	subne	r3, #1
 80a25b2:	e7b5      	b.n	80a2520 <__addsf3+0x58>
 80a25b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a25b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a25bc:	bf18      	it	ne
 80a25be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a25c2:	d021      	beq.n	80a2608 <__addsf3+0x140>
 80a25c4:	ea92 0f03 	teq	r2, r3
 80a25c8:	d004      	beq.n	80a25d4 <__addsf3+0x10c>
 80a25ca:	f092 0f00 	teq	r2, #0
 80a25ce:	bf08      	it	eq
 80a25d0:	4608      	moveq	r0, r1
 80a25d2:	4770      	bx	lr
 80a25d4:	ea90 0f01 	teq	r0, r1
 80a25d8:	bf1c      	itt	ne
 80a25da:	2000      	movne	r0, #0
 80a25dc:	4770      	bxne	lr
 80a25de:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a25e2:	d104      	bne.n	80a25ee <__addsf3+0x126>
 80a25e4:	0040      	lsls	r0, r0, #1
 80a25e6:	bf28      	it	cs
 80a25e8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a25ec:	4770      	bx	lr
 80a25ee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a25f2:	bf3c      	itt	cc
 80a25f4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a25f8:	4770      	bxcc	lr
 80a25fa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a25fe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a2602:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2606:	4770      	bx	lr
 80a2608:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a260c:	bf16      	itet	ne
 80a260e:	4608      	movne	r0, r1
 80a2610:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a2614:	4601      	movne	r1, r0
 80a2616:	0242      	lsls	r2, r0, #9
 80a2618:	bf06      	itte	eq
 80a261a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a261e:	ea90 0f01 	teqeq	r0, r1
 80a2622:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a2626:	4770      	bx	lr

080a2628 <__aeabi_ui2f>:
 80a2628:	f04f 0300 	mov.w	r3, #0
 80a262c:	e004      	b.n	80a2638 <__aeabi_i2f+0x8>
 80a262e:	bf00      	nop

080a2630 <__aeabi_i2f>:
 80a2630:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a2634:	bf48      	it	mi
 80a2636:	4240      	negmi	r0, r0
 80a2638:	ea5f 0c00 	movs.w	ip, r0
 80a263c:	bf08      	it	eq
 80a263e:	4770      	bxeq	lr
 80a2640:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a2644:	4601      	mov	r1, r0
 80a2646:	f04f 0000 	mov.w	r0, #0
 80a264a:	e01c      	b.n	80a2686 <__aeabi_l2f+0x2a>

080a264c <__aeabi_ul2f>:
 80a264c:	ea50 0201 	orrs.w	r2, r0, r1
 80a2650:	bf08      	it	eq
 80a2652:	4770      	bxeq	lr
 80a2654:	f04f 0300 	mov.w	r3, #0
 80a2658:	e00a      	b.n	80a2670 <__aeabi_l2f+0x14>
 80a265a:	bf00      	nop

080a265c <__aeabi_l2f>:
 80a265c:	ea50 0201 	orrs.w	r2, r0, r1
 80a2660:	bf08      	it	eq
 80a2662:	4770      	bxeq	lr
 80a2664:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a2668:	d502      	bpl.n	80a2670 <__aeabi_l2f+0x14>
 80a266a:	4240      	negs	r0, r0
 80a266c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2670:	ea5f 0c01 	movs.w	ip, r1
 80a2674:	bf02      	ittt	eq
 80a2676:	4684      	moveq	ip, r0
 80a2678:	4601      	moveq	r1, r0
 80a267a:	2000      	moveq	r0, #0
 80a267c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a2680:	bf08      	it	eq
 80a2682:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a2686:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a268a:	fabc f28c 	clz	r2, ip
 80a268e:	3a08      	subs	r2, #8
 80a2690:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a2694:	db10      	blt.n	80a26b8 <__aeabi_l2f+0x5c>
 80a2696:	fa01 fc02 	lsl.w	ip, r1, r2
 80a269a:	4463      	add	r3, ip
 80a269c:	fa00 fc02 	lsl.w	ip, r0, r2
 80a26a0:	f1c2 0220 	rsb	r2, r2, #32
 80a26a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a26a8:	fa20 f202 	lsr.w	r2, r0, r2
 80a26ac:	eb43 0002 	adc.w	r0, r3, r2
 80a26b0:	bf08      	it	eq
 80a26b2:	f020 0001 	biceq.w	r0, r0, #1
 80a26b6:	4770      	bx	lr
 80a26b8:	f102 0220 	add.w	r2, r2, #32
 80a26bc:	fa01 fc02 	lsl.w	ip, r1, r2
 80a26c0:	f1c2 0220 	rsb	r2, r2, #32
 80a26c4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a26c8:	fa21 f202 	lsr.w	r2, r1, r2
 80a26cc:	eb43 0002 	adc.w	r0, r3, r2
 80a26d0:	bf08      	it	eq
 80a26d2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a26d6:	4770      	bx	lr

080a26d8 <atoi>:
 80a26d8:	220a      	movs	r2, #10
 80a26da:	2100      	movs	r1, #0
 80a26dc:	f000 b8fa 	b.w	80a28d4 <strtol>

080a26e0 <atol>:
 80a26e0:	220a      	movs	r2, #10
 80a26e2:	2100      	movs	r1, #0
 80a26e4:	f000 b8f6 	b.w	80a28d4 <strtol>

080a26e8 <__cxa_atexit>:
 80a26e8:	b510      	push	{r4, lr}
 80a26ea:	4c05      	ldr	r4, [pc, #20]	; (80a2700 <__cxa_atexit+0x18>)
 80a26ec:	4613      	mov	r3, r2
 80a26ee:	b12c      	cbz	r4, 80a26fc <__cxa_atexit+0x14>
 80a26f0:	460a      	mov	r2, r1
 80a26f2:	4601      	mov	r1, r0
 80a26f4:	2002      	movs	r0, #2
 80a26f6:	f3af 8000 	nop.w
 80a26fa:	bd10      	pop	{r4, pc}
 80a26fc:	4620      	mov	r0, r4
 80a26fe:	bd10      	pop	{r4, pc}
 80a2700:	00000000 	.word	0x00000000

080a2704 <memcpy>:
 80a2704:	b510      	push	{r4, lr}
 80a2706:	1e43      	subs	r3, r0, #1
 80a2708:	440a      	add	r2, r1
 80a270a:	4291      	cmp	r1, r2
 80a270c:	d004      	beq.n	80a2718 <memcpy+0x14>
 80a270e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2712:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2716:	e7f8      	b.n	80a270a <memcpy+0x6>
 80a2718:	bd10      	pop	{r4, pc}

080a271a <memset>:
 80a271a:	4603      	mov	r3, r0
 80a271c:	4402      	add	r2, r0
 80a271e:	4293      	cmp	r3, r2
 80a2720:	d002      	beq.n	80a2728 <memset+0xe>
 80a2722:	f803 1b01 	strb.w	r1, [r3], #1
 80a2726:	e7fa      	b.n	80a271e <memset+0x4>
 80a2728:	4770      	bx	lr
	...

080a272c <srand>:
 80a272c:	b538      	push	{r3, r4, r5, lr}
 80a272e:	4b12      	ldr	r3, [pc, #72]	; (80a2778 <srand+0x4c>)
 80a2730:	4605      	mov	r5, r0
 80a2732:	681c      	ldr	r4, [r3, #0]
 80a2734:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2736:	b9d3      	cbnz	r3, 80a276e <srand+0x42>
 80a2738:	2018      	movs	r0, #24
 80a273a:	f7fe fcef 	bl	80a111c <malloc>
 80a273e:	f243 330e 	movw	r3, #13070	; 0x330e
 80a2742:	63a0      	str	r0, [r4, #56]	; 0x38
 80a2744:	8003      	strh	r3, [r0, #0]
 80a2746:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a274a:	8043      	strh	r3, [r0, #2]
 80a274c:	f241 2334 	movw	r3, #4660	; 0x1234
 80a2750:	8083      	strh	r3, [r0, #4]
 80a2752:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a2756:	80c3      	strh	r3, [r0, #6]
 80a2758:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a275c:	8103      	strh	r3, [r0, #8]
 80a275e:	2305      	movs	r3, #5
 80a2760:	8143      	strh	r3, [r0, #10]
 80a2762:	230b      	movs	r3, #11
 80a2764:	8183      	strh	r3, [r0, #12]
 80a2766:	2201      	movs	r2, #1
 80a2768:	2300      	movs	r3, #0
 80a276a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a276e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2770:	2200      	movs	r2, #0
 80a2772:	611d      	str	r5, [r3, #16]
 80a2774:	615a      	str	r2, [r3, #20]
 80a2776:	bd38      	pop	{r3, r4, r5, pc}
 80a2778:	2000038c 	.word	0x2000038c

080a277c <strcmp>:
 80a277c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a2780:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a2784:	2a01      	cmp	r2, #1
 80a2786:	bf28      	it	cs
 80a2788:	429a      	cmpcs	r2, r3
 80a278a:	d0f7      	beq.n	80a277c <strcmp>
 80a278c:	1ad0      	subs	r0, r2, r3
 80a278e:	4770      	bx	lr

080a2790 <strlen>:
 80a2790:	4603      	mov	r3, r0
 80a2792:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2796:	2a00      	cmp	r2, #0
 80a2798:	d1fb      	bne.n	80a2792 <strlen+0x2>
 80a279a:	1a18      	subs	r0, r3, r0
 80a279c:	3801      	subs	r0, #1
 80a279e:	4770      	bx	lr

080a27a0 <strncpy>:
 80a27a0:	4603      	mov	r3, r0
 80a27a2:	b510      	push	{r4, lr}
 80a27a4:	b142      	cbz	r2, 80a27b8 <strncpy+0x18>
 80a27a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a27aa:	3a01      	subs	r2, #1
 80a27ac:	f803 4b01 	strb.w	r4, [r3], #1
 80a27b0:	2c00      	cmp	r4, #0
 80a27b2:	d1f7      	bne.n	80a27a4 <strncpy+0x4>
 80a27b4:	441a      	add	r2, r3
 80a27b6:	e000      	b.n	80a27ba <strncpy+0x1a>
 80a27b8:	bd10      	pop	{r4, pc}
 80a27ba:	4293      	cmp	r3, r2
 80a27bc:	d002      	beq.n	80a27c4 <strncpy+0x24>
 80a27be:	f803 4b01 	strb.w	r4, [r3], #1
 80a27c2:	e7fa      	b.n	80a27ba <strncpy+0x1a>
 80a27c4:	bd10      	pop	{r4, pc}
	...

080a27c8 <_strtol_r>:
 80a27c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a27cc:	460f      	mov	r7, r1
 80a27ce:	4680      	mov	r8, r0
 80a27d0:	483f      	ldr	r0, [pc, #252]	; (80a28d0 <_strtol_r+0x108>)
 80a27d2:	f8d0 9000 	ldr.w	r9, [r0]
 80a27d6:	463d      	mov	r5, r7
 80a27d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a27dc:	eb09 0004 	add.w	r0, r9, r4
 80a27e0:	7840      	ldrb	r0, [r0, #1]
 80a27e2:	f000 0008 	and.w	r0, r0, #8
 80a27e6:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80a27ea:	b108      	cbz	r0, 80a27f0 <_strtol_r+0x28>
 80a27ec:	462f      	mov	r7, r5
 80a27ee:	e7f2      	b.n	80a27d6 <_strtol_r+0xe>
 80a27f0:	2c2d      	cmp	r4, #45	; 0x2d
 80a27f2:	d103      	bne.n	80a27fc <_strtol_r+0x34>
 80a27f4:	1cbd      	adds	r5, r7, #2
 80a27f6:	787c      	ldrb	r4, [r7, #1]
 80a27f8:	2601      	movs	r6, #1
 80a27fa:	e003      	b.n	80a2804 <_strtol_r+0x3c>
 80a27fc:	2c2b      	cmp	r4, #43	; 0x2b
 80a27fe:	bf04      	itt	eq
 80a2800:	787c      	ldrbeq	r4, [r7, #1]
 80a2802:	1cbd      	addeq	r5, r7, #2
 80a2804:	b113      	cbz	r3, 80a280c <_strtol_r+0x44>
 80a2806:	2b10      	cmp	r3, #16
 80a2808:	d10a      	bne.n	80a2820 <_strtol_r+0x58>
 80a280a:	e05b      	b.n	80a28c4 <_strtol_r+0xfc>
 80a280c:	2c30      	cmp	r4, #48	; 0x30
 80a280e:	d157      	bne.n	80a28c0 <_strtol_r+0xf8>
 80a2810:	7828      	ldrb	r0, [r5, #0]
 80a2812:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a2816:	2858      	cmp	r0, #88	; 0x58
 80a2818:	d14d      	bne.n	80a28b6 <_strtol_r+0xee>
 80a281a:	786c      	ldrb	r4, [r5, #1]
 80a281c:	2310      	movs	r3, #16
 80a281e:	3502      	adds	r5, #2
 80a2820:	2e00      	cmp	r6, #0
 80a2822:	bf14      	ite	ne
 80a2824:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80a2828:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80a282c:	fbbc faf3 	udiv	sl, ip, r3
 80a2830:	2700      	movs	r7, #0
 80a2832:	4638      	mov	r0, r7
 80a2834:	fb03 cc1a 	mls	ip, r3, sl, ip
 80a2838:	eb09 0e04 	add.w	lr, r9, r4
 80a283c:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a2840:	f01e 0f04 	tst.w	lr, #4
 80a2844:	d001      	beq.n	80a284a <_strtol_r+0x82>
 80a2846:	3c30      	subs	r4, #48	; 0x30
 80a2848:	e00b      	b.n	80a2862 <_strtol_r+0x9a>
 80a284a:	f01e 0e03 	ands.w	lr, lr, #3
 80a284e:	d01b      	beq.n	80a2888 <_strtol_r+0xc0>
 80a2850:	f1be 0f01 	cmp.w	lr, #1
 80a2854:	bf0c      	ite	eq
 80a2856:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a285a:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a285e:	ebce 0404 	rsb	r4, lr, r4
 80a2862:	42a3      	cmp	r3, r4
 80a2864:	dd10      	ble.n	80a2888 <_strtol_r+0xc0>
 80a2866:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80a286a:	d00a      	beq.n	80a2882 <_strtol_r+0xba>
 80a286c:	4550      	cmp	r0, sl
 80a286e:	d806      	bhi.n	80a287e <_strtol_r+0xb6>
 80a2870:	d101      	bne.n	80a2876 <_strtol_r+0xae>
 80a2872:	4564      	cmp	r4, ip
 80a2874:	dc03      	bgt.n	80a287e <_strtol_r+0xb6>
 80a2876:	fb03 4000 	mla	r0, r3, r0, r4
 80a287a:	2701      	movs	r7, #1
 80a287c:	e001      	b.n	80a2882 <_strtol_r+0xba>
 80a287e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80a2882:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a2886:	e7d7      	b.n	80a2838 <_strtol_r+0x70>
 80a2888:	1c7b      	adds	r3, r7, #1
 80a288a:	d10c      	bne.n	80a28a6 <_strtol_r+0xde>
 80a288c:	2e00      	cmp	r6, #0
 80a288e:	f04f 0322 	mov.w	r3, #34	; 0x22
 80a2892:	bf14      	ite	ne
 80a2894:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80a2898:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a289c:	f8c8 3000 	str.w	r3, [r8]
 80a28a0:	b92a      	cbnz	r2, 80a28ae <_strtol_r+0xe6>
 80a28a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a28a6:	b106      	cbz	r6, 80a28aa <_strtol_r+0xe2>
 80a28a8:	4240      	negs	r0, r0
 80a28aa:	b172      	cbz	r2, 80a28ca <_strtol_r+0x102>
 80a28ac:	b107      	cbz	r7, 80a28b0 <_strtol_r+0xe8>
 80a28ae:	1e69      	subs	r1, r5, #1
 80a28b0:	6011      	str	r1, [r2, #0]
 80a28b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a28b6:	2430      	movs	r4, #48	; 0x30
 80a28b8:	2b00      	cmp	r3, #0
 80a28ba:	d1b1      	bne.n	80a2820 <_strtol_r+0x58>
 80a28bc:	2308      	movs	r3, #8
 80a28be:	e7af      	b.n	80a2820 <_strtol_r+0x58>
 80a28c0:	230a      	movs	r3, #10
 80a28c2:	e7ad      	b.n	80a2820 <_strtol_r+0x58>
 80a28c4:	2c30      	cmp	r4, #48	; 0x30
 80a28c6:	d0a3      	beq.n	80a2810 <_strtol_r+0x48>
 80a28c8:	e7aa      	b.n	80a2820 <_strtol_r+0x58>
 80a28ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a28ce:	bf00      	nop
 80a28d0:	20000328 	.word	0x20000328

080a28d4 <strtol>:
 80a28d4:	4613      	mov	r3, r2
 80a28d6:	460a      	mov	r2, r1
 80a28d8:	4601      	mov	r1, r0
 80a28da:	4802      	ldr	r0, [pc, #8]	; (80a28e4 <strtol+0x10>)
 80a28dc:	6800      	ldr	r0, [r0, #0]
 80a28de:	f7ff bf73 	b.w	80a27c8 <_strtol_r>
 80a28e2:	bf00      	nop
 80a28e4:	2000038c 	.word	0x2000038c

080a28e8 <dynalib_user>:
 80a28e8:	080a001d 080a005d 080a0089 080a008d     ....]...........
 80a28f8:	00000000                                ....

080a28fc <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
 80a28fc:	6b6e6c62 00666e69 00726576 2e352e30     blnkinf.ver.0.5.
 80a290c:	2d680034 74616562 00303100 66667562     4.h-beat.10.buff
 80a291c:	006e692d 34323031 76656400 72615000     -in.1024.dev.Par
 80a292c:	6c636974 68502065 6e6f746f 69756200     ticle Photon.bui
 80a293c:	4100646c 20207270 30322036 31203931     ld.Apr  6 2019 1
 80a294c:	30343a35 0039353a 69250000 696c2500     5:40:59...%i.%li
 80a295c:	006e6900 0074756f 006d7770 61007764     .in.out.pwm.dw.a
 80a296c:	6c620077 2d6b6e79 756f6c63 6f632e64     w.blynk-cloud.co
 80a297c:	7776006d 2e322500 00006633              m.vw.%2.3f..

080a2988 <_ZL23BlynkWriteHandlerVector>:
 80a2988:	080a0b43 080a0b43 080a0b43 080a0b43     C...C...C...C...
 80a2998:	080a0b43 080a0b43 080a0b43 080a0b43     C...C...C...C...
 80a29a8:	080a0b43 080a0b43 080a0b43 080a0b43     C...C...C...C...
 80a29b8:	080a0b43 080a0b43 080a0b43 080a0b43     C...C...C...C...
 80a29c8:	080a0b43 080a0b43 080a0b43 080a0b43     C...C...C...C...
 80a29d8:	080a0b43 080a0b43 080a0b43 080a0b43     C...C...C...C...
 80a29e8:	080a0b43 080a0b43 080a0b43 080a0b43     C...C...C...C...
 80a29f8:	080a0b43 080a0b43 080a0b43 080a0b43     C...C...C...C...
 80a2a08:	080a0b43 080a0b43 080a0b43 080a0b43     C...C...C...C...
 80a2a18:	080a0b43 080a0b43 080a0b43 080a0b43     C...C...C...C...
 80a2a28:	080a0b43 080a0b43 080a0b43 080a0b43     C...C...C...C...
 80a2a38:	080a0b43 080a0b43 080a0b43 080a0b43     C...C...C...C...
 80a2a48:	080a0b43 080a0b43 080a0b43 080a0b43     C...C...C...C...
 80a2a58:	080a0b43 080a0b43 080a0b43 080a0b43     C...C...C...C...
 80a2a68:	080a0b43 080a0b43 080a0b43 080a0b43     C...C...C...C...
 80a2a78:	080a0b43 080a0b43 080a0b43 080a0b43     C...C...C...C...
 80a2a88:	080a0b43 080a0b43 080a0b43 080a0b43     C...C...C...C...
 80a2a98:	080a0b43 080a0b43 080a0b43 080a0b43     C...C...C...C...
 80a2aa8:	080a0b43 080a0b43 080a0b43 080a0b43     C...C...C...C...
 80a2ab8:	080a0b43 080a0b43 080a0b43 080a0b43     C...C...C...C...
 80a2ac8:	080a0b43 080a0b43 080a0b43 080a0b43     C...C...C...C...
 80a2ad8:	080a0b43 080a0b43 080a0b43 080a0b43     C...C...C...C...
 80a2ae8:	080a0b43 080a0b43 080a0b43 080a0b43     C...C...C...C...
 80a2af8:	080a0b43 080a0b43 080a0b43 080a0b43     C...C...C...C...
 80a2b08:	080a0b43 080a0b43 080a0b43 080a0b43     C...C...C...C...
 80a2b18:	080a0b43 080a0b43 080a0b43 080a0b43     C...C...C...C...
 80a2b28:	080a0b43 080a0b43 080a0b43 080a0b43     C...C...C...C...
 80a2b38:	080a0b43 080a0b43 080a0b43 080a0b43     C...C...C...C...
 80a2b48:	080a0b43 080a0b43 080a0b43 080a0b43     C...C...C...C...
 80a2b58:	080a0b43 080a0b43 080a0b43 080a0b43     C...C...C...C...
 80a2b68:	080a0b43 080a0b43 080a0b43 080a0b43     C...C...C...C...
 80a2b78:	080a0b43 080a0b43 080a0b43 080a0b43     C...C...C...C...

080a2b88 <_ZL22BlynkReadHandlerVector>:
 80a2b88:	080a0b41 080a0b41 080a0b41 080a0b41     A...A...A...A...
 80a2b98:	080a0b41 080a0b41 080a0b41 080a0b41     A...A...A...A...
 80a2ba8:	080a0b41 080a0b41 080a0b41 080a0b41     A...A...A...A...
 80a2bb8:	080a0b41 080a0b41 080a0b41 080a0b41     A...A...A...A...
 80a2bc8:	080a0b41 080a0b41 080a0b41 080a0b41     A...A...A...A...
 80a2bd8:	080a0b41 080a0b41 080a0b41 080a0b41     A...A...A...A...
 80a2be8:	080a0b41 080a0b41 080a0b41 080a0b41     A...A...A...A...
 80a2bf8:	080a0b41 080a0b41 080a0b41 080a0b41     A...A...A...A...
 80a2c08:	080a0b41 080a0b41 080a0b41 080a0b41     A...A...A...A...
 80a2c18:	080a0b41 080a0b41 080a0b41 080a0b41     A...A...A...A...
 80a2c28:	080a0b41 080a0b41 080a0b41 080a0b41     A...A...A...A...
 80a2c38:	080a0b41 080a0b41 080a0b41 080a0b41     A...A...A...A...
 80a2c48:	080a0b41 080a0b41 080a0b41 080a0b41     A...A...A...A...
 80a2c58:	080a0b41 080a0b41 080a0b41 080a0b41     A...A...A...A...
 80a2c68:	080a0b41 080a0b41 080a0b41 080a0b41     A...A...A...A...
 80a2c78:	080a0b41 080a0b41 080a0b41 080a0b41     A...A...A...A...
 80a2c88:	080a0b41 080a0b41 080a0b41 080a0b41     A...A...A...A...
 80a2c98:	080a0b41 080a0b41 080a0b41 080a0b41     A...A...A...A...
 80a2ca8:	080a0b41 080a0b41 080a0b41 080a0b41     A...A...A...A...
 80a2cb8:	080a0b41 080a0b41 080a0b41 080a0b41     A...A...A...A...
 80a2cc8:	080a0b41 080a0b41 080a0b41 080a0b41     A...A...A...A...
 80a2cd8:	080a0b41 080a0b41 080a0b41 080a0b41     A...A...A...A...
 80a2ce8:	080a0b41 080a0b41 080a0b41 080a0b41     A...A...A...A...
 80a2cf8:	080a0b41 080a0b41 080a0b41 080a0b41     A...A...A...A...
 80a2d08:	080a0b41 080a0b41 080a0b41 080a0b41     A...A...A...A...
 80a2d18:	080a0b41 080a0b41 080a0b41 080a0b41     A...A...A...A...
 80a2d28:	080a0b41 080a0b41 080a0b41 080a0b41     A...A...A...A...
 80a2d38:	080a0b41 080a0b41 080a0b41 080a0b41     A...A...A...A...
 80a2d48:	080a0b41 080a0b41 080a0b41 080a0b41     A...A...A...A...
 80a2d58:	080a0b41 080a0b41 080a0b41 080a0b41     A...A...A...A...
 80a2d68:	080a0b41 080a0b41 080a0b41 080a0b41     A...A...A...A...
 80a2d78:	080a0b41 080a0b41 080a0b41 080a0b41     A...A...A...A...

080a2d88 <_ZTV7TwoWire>:
	...
 80a2d90:	080a1165 080a11af 080a1187 080a1167     e...........g...
 80a2da0:	080a118f 080a1197 080a119f 080a11a7     ................

080a2db0 <_ZTV9IPAddress>:
	...
 80a2db8:	080a11f7 080a11e9 080a11eb 66006e6c     ............ln.f
 80a2dc8:	6f63006e 64006564 69617465 0a0d006c     n.code.detail...
 80a2dd8:	31302500 00207530 2500205d 202c0064     .%010u .] .%d., 
 80a2de8:	3a292800 5b200020 646f6300 203d2065     .(): . [.code = 
 80a2df8:	74656400 736c6961 00203d20 64756162     .details = .baud
 80a2e08:	72655300 006c6169 53425355 61697265     .Serial.USBSeria
 80a2e18:	7400316c 00657079 61726170 6d63006d     l1.type.param.cm
 80a2e28:	64690064 646e6800 72747300 6966006d     d.id.hnd.strm.fi
 80a2e38:	6c00746c 61006c76 61486464 656c646e     lt.lvl.addHandle
 80a2e48:	65720072 65766f6d 646e6148 0072656c     r.removeHandler.
 80a2e58:	6d756e65 646e6148 7372656c 4f534a00     enumHandlers.JSO
 80a2e68:	7274534e 4c6d6165 6148676f 656c646e     NStreamLogHandle
 80a2e78:	70610072 6f6e0070 7400656e 65636172     r.app.none.trace
 80a2e88:	666e6900 6177006f 65006e72 726f7272     .info.warn.error
 80a2e98:	6e617000 61006369 00006c6c              .panic.all..

080a2ea4 <_ZTV8SPIClass>:
	...
 80a2eac:	080a135d 080a135f                       ]..._...

080a2eb4 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
 80a2ebc:	080a1475 080a147b 080a159b 080a1487     u...{...........
 80a2ecc:	080a1477                                w...

080a2ed0 <_ZTV9TCPClient>:
	...
 80a2ed8:	080a00cd 080a010d 080a1431 080a144b     ........1...K...
 80a2ee8:	080a1619 080a1567 080a1539 080a1473     ....g...9...s...
 80a2ef8:	080a174d 080a148d 080a15b7 080a1695     M...............
 80a2f08:	080a189d 080a18ef 080a145b 080a1861     ........[...a...
 80a2f18:	080a1519 69726977 5400676e 6c435043     ....wiring.TCPCl
 80a2f28:	746e6569 636f7320 3d74656b 5a007825     ient socket=%x.Z
 80a2f38:	302b2500 253a6433 00753230 252d5925     .%+03d:%02u.%Y-%
 80a2f48:	64252d6d 3a482554 253a4d25 007a2553     m-%dT%H:%M:%S%z.
 80a2f58:	74637361 00656d69                       asctime.

080a2f60 <_ZTV11USARTSerial>:
	...
 80a2f68:	080a1911 080a1935 080a1941 080a1289     ....5...A.......
 80a2f78:	080a191d 080a1929 080a1923 080a192f     ....)...#.../...
 80a2f88:	080a1913 080a1917                       ........

080a2f90 <_ZTV9USBSerial>:
	...
 80a2f98:	080a19e9 080a1a2d 080a1a07 080a1289     ....-...........
 80a2fa8:	080a1a01 080a19eb 080a19f3 080a1a27     ............'...
 80a2fb8:	080a19fb 080a19e5                       ........

080a2fc0 <_ZTVN5spark9WiFiClassE>:
	...
 80a2fc8:	080a1b5b                                [...

080a2fcc <_ZN5spark7NetworkE>:
 80a2fcc:	20000abc                                ... 

080a2fd0 <_ctype_>:
 80a2fd0:	20202000 20202020 28282020 20282828     .         ((((( 
 80a2fe0:	20202020 20202020 20202020 20202020                     
 80a2ff0:	10108820 10101010 10101010 10101010      ...............
 80a3000:	04040410 04040404 10040404 10101010     ................
 80a3010:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80a3020:	01010101 01010101 01010101 10101010     ................
 80a3030:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80a3040:	02020202 02020202 02020202 10101010     ................
 80a3050:	00000020 00000000 00000000 00000000      ...............
	...

080a30d4 <__sf_fake_stdin>:
	...

080a30f4 <__sf_fake_stdout>:
	...

080a3114 <__sf_fake_stderr>:
	...
 80a3134:	00000043                                         C.

080a3136 <link_const_variable_data_end>:
	...

080a3138 <link_constructors_location>:
 80a3138:	080a0abd 	.word	0x080a0abd
 80a313c:	080a0b25 	.word	0x080a0b25
 80a3140:	080a0b3d 	.word	0x080a0b3d
 80a3144:	080a0b71 	.word	0x080a0b71
 80a3148:	080a0d03 	.word	0x080a0d03
 80a314c:	080a0d71 	.word	0x080a0d71
 80a3150:	080a1279 	.word	0x080a1279
 80a3154:	080a1341 	.word	0x080a1341
 80a3158:	080a13f1 	.word	0x080a13f1
 80a315c:	080a18fd 	.word	0x080a18fd
 80a3160:	080a1b65 	.word	0x080a1b65
 80a3164:	080a1e3d 	.word	0x080a1e3d
 80a3168:	080a1e6d 	.word	0x080a1e6d
 80a316c:	080a1ebd 	.word	0x080a1ebd
 80a3170:	080a1f81 	.word	0x080a1f81
 80a3174:	080a2005 	.word	0x080a2005
 80a3178:	080a2089 	.word	0x080a2089

080a317c <link_constructors_end>:
 80a317c:	00000000 	.word	0x00000000
