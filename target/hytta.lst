
/Users/luca/Projects/hytta/target/hytta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004758  080a0018  080a0018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a4770  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         0000006c  20000300  080a4774  00030300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000640  2000036c  2000036c  0004036c  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a47e0  080a47e0  000347e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a4808  080a4808  00034808  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000b7a6d  00000000  00000000  0003480c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00010941  00000000  00000000  000ec279  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00010bd0  00000000  00000000  000fcbba  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001ca0  00000000  00000000  0010d78a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002f28  00000000  00000000  0010f42a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00026b9b  00000000  00000000  00112352  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000251d7  00000000  00000000  00138eed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009a9ca  00000000  00000000  0015e0c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000b304  00000000  00000000  001f8a90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	f8 42 0a 08                                         .B..

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f004 f91f 	bl	80a4270 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f004 f924 	bl	80a4286 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a4774 	.word	0x080a4774
 80a004c:	2000036c 	.word	0x2000036c
 80a0050:	2000036c 	.word	0x2000036c
 80a0054:	200009ac 	.word	0x200009ac
 80a0058:	200009ac 	.word	0x200009ac

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 fb13 	bl	80a1688 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a472c 	.word	0x080a472c
 80a0084:	080a476c 	.word	0x080a476c

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b814 	b.w	80a00b4 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f85b 	bl	80a0148 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 bab9 	b.w	80a160c <_post_loop>

080a009a <_Znwj>:
 80a009a:	f000 be7b 	b.w	80a0d94 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f000 be81 	b.w	80a0da4 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <setup>:
// Lib instantiate
PietteTech_DHT DHT(DHTPIN, DHTTYPE);
int n; // counter

void setup()
{
 80a00b4:	b538      	push	{r3, r4, r5, lr}
  Serial.begin(9600);
 80a00b6:	f001 f9ff 	bl	80a14b8 <_Z16_fetch_usbserialv>
 80a00ba:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a00be:	f001 f9e1 	bl	80a1484 <_ZN9USBSerial5beginEl>
  while (!Serial.available() && millis() < 30000)
 80a00c2:	f247 552f 	movw	r5, #29999	; 0x752f
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a00c6:	4c19      	ldr	r4, [pc, #100]	; (80a012c <setup+0x78>)
 80a00c8:	f001 f9f6 	bl	80a14b8 <_Z16_fetch_usbserialv>
 80a00cc:	6803      	ldr	r3, [r0, #0]
 80a00ce:	691b      	ldr	r3, [r3, #16]
 80a00d0:	4798      	blx	r3
 80a00d2:	b990      	cbnz	r0, 80a00fa <setup+0x46>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a00d4:	f000 fd28 	bl	80a0b28 <HAL_Timer_Get_Milli_Seconds>
 80a00d8:	42a8      	cmp	r0, r5
 80a00da:	d80e      	bhi.n	80a00fa <setup+0x46>
  {
    Serial.println("Press any key to start.");
 80a00dc:	f001 f9ec 	bl	80a14b8 <_Z16_fetch_usbserialv>
 80a00e0:	4913      	ldr	r1, [pc, #76]	; (80a0130 <setup+0x7c>)
 80a00e2:	f000 ffb2 	bl	80a104a <_ZN5Print7printlnEPKc>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a00e6:	f000 fd1f 	bl	80a0b28 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a00ea:	6020      	str	r0, [r4, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80a00ec:	f000 fe3a 	bl	80a0d64 <spark_process>
    Particle.process();
    delay(1000);
 80a00f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a00f4:	f000 fe66 	bl	80a0dc4 <delay>
int n; // counter

void setup()
{
  Serial.begin(9600);
  while (!Serial.available() && millis() < 30000)
 80a00f8:	e7e6      	b.n	80a00c8 <setup+0x14>
  {
    Serial.println("Press any key to start.");
    Particle.process();
    delay(1000);
  }
  Serial.println("DHT Simple program using DHT.acquireAndWait");
 80a00fa:	f001 f9dd 	bl	80a14b8 <_Z16_fetch_usbserialv>
 80a00fe:	490d      	ldr	r1, [pc, #52]	; (80a0134 <setup+0x80>)
 80a0100:	f000 ffa3 	bl	80a104a <_ZN5Print7printlnEPKc>
  Serial.print("LIB version: ");
 80a0104:	f001 f9d8 	bl	80a14b8 <_Z16_fetch_usbserialv>
 80a0108:	490b      	ldr	r1, [pc, #44]	; (80a0138 <setup+0x84>)
 80a010a:	f000 ff8b 	bl	80a1024 <_ZN5Print5printEPKc>
  Serial.println(DHTLIB_VERSION);
 80a010e:	f001 f9d3 	bl	80a14b8 <_Z16_fetch_usbserialv>
 80a0112:	490a      	ldr	r1, [pc, #40]	; (80a013c <setup+0x88>)
 80a0114:	f000 ff99 	bl	80a104a <_ZN5Print7printlnEPKc>
  Serial.println("---------------");
 80a0118:	f001 f9ce 	bl	80a14b8 <_Z16_fetch_usbserialv>
 80a011c:	4908      	ldr	r1, [pc, #32]	; (80a0140 <setup+0x8c>)
 80a011e:	f000 ff94 	bl	80a104a <_ZN5Print7printlnEPKc>
  DHT.begin();
}
 80a0122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  }
  Serial.println("DHT Simple program using DHT.acquireAndWait");
  Serial.print("LIB version: ");
  Serial.println(DHTLIB_VERSION);
  Serial.println("---------------");
  DHT.begin();
 80a0126:	4807      	ldr	r0, [pc, #28]	; (80a0144 <setup+0x90>)
 80a0128:	f000 b9d9 	b.w	80a04de <_ZN14PietteTech_DHT5beginEv>
 80a012c:	200008b8 	.word	0x200008b8
 80a0130:	080a430c 	.word	0x080a430c
 80a0134:	080a4324 	.word	0x080a4324
 80a0138:	080a4350 	.word	0x080a4350
 80a013c:	080a44d2 	.word	0x080a44d2
 80a0140:	080a435e 	.word	0x080a435e
 80a0144:	20000374 	.word	0x20000374

080a0148 <loop>:
}

void loop()
{
 80a0148:	b573      	push	{r0, r1, r4, r5, r6, lr}
  Serial.print("\n");
  Serial.print(n);
 80a014a:	4d61      	ldr	r5, [pc, #388]	; (80a02d0 <loop+0x188>)
  DHT.begin();
}

void loop()
{
  Serial.print("\n");
 80a014c:	f001 f9b4 	bl	80a14b8 <_Z16_fetch_usbserialv>
 80a0150:	4960      	ldr	r1, [pc, #384]	; (80a02d4 <loop+0x18c>)
 80a0152:	f000 ff67 	bl	80a1024 <_ZN5Print5printEPKc>
  Serial.print(n);
 80a0156:	f001 f9af 	bl	80a14b8 <_Z16_fetch_usbserialv>
 80a015a:	220a      	movs	r2, #10
 80a015c:	6829      	ldr	r1, [r5, #0]
 80a015e:	f000 ffcc 	bl	80a10fa <_ZN5Print5printEii>
  Serial.print(": Retrieving information from sensor: ");
 80a0162:	f001 f9a9 	bl	80a14b8 <_Z16_fetch_usbserialv>
 80a0166:	495c      	ldr	r1, [pc, #368]	; (80a02d8 <loop+0x190>)
 80a0168:	f000 ff5c 	bl	80a1024 <_ZN5Print5printEPKc>
  Serial.print("Read sensor: ");
 80a016c:	f001 f9a4 	bl	80a14b8 <_Z16_fetch_usbserialv>
 80a0170:	495a      	ldr	r1, [pc, #360]	; (80a02dc <loop+0x194>)
 80a0172:	f000 ff57 	bl	80a1024 <_ZN5Print5printEPKc>

  int result = DHT.acquireAndWait(1000); // wait up to 1 sec (default indefinitely)
 80a0176:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80a017a:	4859      	ldr	r0, [pc, #356]	; (80a02e0 <loop+0x198>)
 80a017c:	f000 fa9c 	bl	80a06b8 <_ZN14PietteTech_DHT14acquireAndWaitEm>

  switch (result)
 80a0180:	3007      	adds	r0, #7
 80a0182:	2807      	cmp	r0, #7
 80a0184:	d825      	bhi.n	80a01d2 <loop+0x8a>
 80a0186:	e8df f000 	tbb	[pc, r0]
 80a018a:	1c20      	.short	0x1c20
 80a018c:	0c101418 	.word	0x0c101418
 80a0190:	0408      	.short	0x0408
  {
  case DHTLIB_OK:
    Serial.println("OK");
 80a0192:	f001 f991 	bl	80a14b8 <_Z16_fetch_usbserialv>
 80a0196:	4953      	ldr	r1, [pc, #332]	; (80a02e4 <loop+0x19c>)
 80a0198:	e01e      	b.n	80a01d8 <loop+0x90>
    break;
  case DHTLIB_ERROR_CHECKSUM:
    Serial.println("Error\n\r\tChecksum error");
 80a019a:	f001 f98d 	bl	80a14b8 <_Z16_fetch_usbserialv>
 80a019e:	4952      	ldr	r1, [pc, #328]	; (80a02e8 <loop+0x1a0>)
 80a01a0:	e01a      	b.n	80a01d8 <loop+0x90>
    break;
  case DHTLIB_ERROR_ISR_TIMEOUT:
    Serial.println("Error\n\r\tISR time out error");
 80a01a2:	f001 f989 	bl	80a14b8 <_Z16_fetch_usbserialv>
 80a01a6:	4951      	ldr	r1, [pc, #324]	; (80a02ec <loop+0x1a4>)
 80a01a8:	e016      	b.n	80a01d8 <loop+0x90>
    break;
  case DHTLIB_ERROR_RESPONSE_TIMEOUT:
    Serial.println("Error\n\r\tResponse time out error");
 80a01aa:	f001 f985 	bl	80a14b8 <_Z16_fetch_usbserialv>
 80a01ae:	4950      	ldr	r1, [pc, #320]	; (80a02f0 <loop+0x1a8>)
 80a01b0:	e012      	b.n	80a01d8 <loop+0x90>
    break;
  case DHTLIB_ERROR_DATA_TIMEOUT:
    Serial.println("Error\n\r\tData time out error");
 80a01b2:	f001 f981 	bl	80a14b8 <_Z16_fetch_usbserialv>
 80a01b6:	494f      	ldr	r1, [pc, #316]	; (80a02f4 <loop+0x1ac>)
 80a01b8:	e00e      	b.n	80a01d8 <loop+0x90>
    break;
  case DHTLIB_ERROR_ACQUIRING:
    Serial.println("Error\n\r\tAcquiring");
 80a01ba:	f001 f97d 	bl	80a14b8 <_Z16_fetch_usbserialv>
 80a01be:	494e      	ldr	r1, [pc, #312]	; (80a02f8 <loop+0x1b0>)
 80a01c0:	e00a      	b.n	80a01d8 <loop+0x90>
    break;
  case DHTLIB_ERROR_DELTA:
    Serial.println("Error\n\r\tDelta time to small");
 80a01c2:	f001 f979 	bl	80a14b8 <_Z16_fetch_usbserialv>
 80a01c6:	494d      	ldr	r1, [pc, #308]	; (80a02fc <loop+0x1b4>)
 80a01c8:	e006      	b.n	80a01d8 <loop+0x90>
    break;
  case DHTLIB_ERROR_NOTSTARTED:
    Serial.println("Error\n\r\tNot started");
 80a01ca:	f001 f975 	bl	80a14b8 <_Z16_fetch_usbserialv>
 80a01ce:	494c      	ldr	r1, [pc, #304]	; (80a0300 <loop+0x1b8>)
 80a01d0:	e002      	b.n	80a01d8 <loop+0x90>
    break;
  default:
    Serial.println("Unknown error");
 80a01d2:	f001 f971 	bl	80a14b8 <_Z16_fetch_usbserialv>
 80a01d6:	494b      	ldr	r1, [pc, #300]	; (80a0304 <loop+0x1bc>)
 80a01d8:	f000 ff37 	bl	80a104a <_ZN5Print7printlnEPKc>
    break;
  }
  Serial.print("Humidity (%): ");
 80a01dc:	f001 f96c 	bl	80a14b8 <_Z16_fetch_usbserialv>
 80a01e0:	4949      	ldr	r1, [pc, #292]	; (80a0308 <loop+0x1c0>)
 80a01e2:	f000 ff1f 	bl	80a1024 <_ZN5Print5printEPKc>
  Serial.println(DHT.getHumidity(), 2);
 80a01e6:	f001 f967 	bl	80a14b8 <_Z16_fetch_usbserialv>
 80a01ea:	4606      	mov	r6, r0
 80a01ec:	483c      	ldr	r0, [pc, #240]	; (80a02e0 <loop+0x198>)
 80a01ee:	f000 faa1 	bl	80a0734 <_ZN14PietteTech_DHT11getHumidityEv>
 80a01f2:	f003 fa2f 	bl	80a3654 <__aeabi_f2d>
 80a01f6:	2402      	movs	r4, #2
 80a01f8:	4602      	mov	r2, r0
 80a01fa:	460b      	mov	r3, r1
 80a01fc:	9400      	str	r4, [sp, #0]
 80a01fe:	4630      	mov	r0, r6
 80a0200:	f001 f82c 	bl	80a125c <_ZN5Print7printlnEdi>

  Serial.print("Temperature (oC): ");
 80a0204:	f001 f958 	bl	80a14b8 <_Z16_fetch_usbserialv>
 80a0208:	4940      	ldr	r1, [pc, #256]	; (80a030c <loop+0x1c4>)
 80a020a:	f000 ff0b 	bl	80a1024 <_ZN5Print5printEPKc>
  Serial.println(DHT.getCelsius(), 2);
 80a020e:	f001 f953 	bl	80a14b8 <_Z16_fetch_usbserialv>
 80a0212:	4606      	mov	r6, r0
 80a0214:	4832      	ldr	r0, [pc, #200]	; (80a02e0 <loop+0x198>)
 80a0216:	f000 fa73 	bl	80a0700 <_ZN14PietteTech_DHT10getCelsiusEv>
 80a021a:	f003 fa1b 	bl	80a3654 <__aeabi_f2d>
 80a021e:	9400      	str	r4, [sp, #0]
 80a0220:	4602      	mov	r2, r0
 80a0222:	460b      	mov	r3, r1
 80a0224:	4630      	mov	r0, r6
 80a0226:	f001 f819 	bl	80a125c <_ZN5Print7printlnEdi>

  Serial.print("Temperature (oF): ");
 80a022a:	f001 f945 	bl	80a14b8 <_Z16_fetch_usbserialv>
 80a022e:	4938      	ldr	r1, [pc, #224]	; (80a0310 <loop+0x1c8>)
 80a0230:	f000 fef8 	bl	80a1024 <_ZN5Print5printEPKc>
  Serial.println(DHT.getFahrenheit(), 2);
 80a0234:	f001 f940 	bl	80a14b8 <_Z16_fetch_usbserialv>
 80a0238:	4606      	mov	r6, r0
 80a023a:	4829      	ldr	r0, [pc, #164]	; (80a02e0 <loop+0x198>)
 80a023c:	f000 fa94 	bl	80a0768 <_ZN14PietteTech_DHT13getFahrenheitEv>
 80a0240:	f003 fa08 	bl	80a3654 <__aeabi_f2d>
 80a0244:	9400      	str	r4, [sp, #0]
 80a0246:	4602      	mov	r2, r0
 80a0248:	460b      	mov	r3, r1
 80a024a:	4630      	mov	r0, r6
 80a024c:	f001 f806 	bl	80a125c <_ZN5Print7printlnEdi>

  Serial.print("Temperature (K): ");
 80a0250:	f001 f932 	bl	80a14b8 <_Z16_fetch_usbserialv>
 80a0254:	492f      	ldr	r1, [pc, #188]	; (80a0314 <loop+0x1cc>)
 80a0256:	f000 fee5 	bl	80a1024 <_ZN5Print5printEPKc>
  Serial.println(DHT.getKelvin(), 2);
 80a025a:	f001 f92d 	bl	80a14b8 <_Z16_fetch_usbserialv>
 80a025e:	4606      	mov	r6, r0
 80a0260:	481f      	ldr	r0, [pc, #124]	; (80a02e0 <loop+0x198>)
 80a0262:	f000 faa9 	bl	80a07b8 <_ZN14PietteTech_DHT9getKelvinEv>
 80a0266:	f003 f9f5 	bl	80a3654 <__aeabi_f2d>
 80a026a:	9400      	str	r4, [sp, #0]
 80a026c:	4602      	mov	r2, r0
 80a026e:	460b      	mov	r3, r1
 80a0270:	4630      	mov	r0, r6
 80a0272:	f000 fff3 	bl	80a125c <_ZN5Print7printlnEdi>

  Serial.print("Dew Point (oC): ");
 80a0276:	f001 f91f 	bl	80a14b8 <_Z16_fetch_usbserialv>
 80a027a:	4927      	ldr	r1, [pc, #156]	; (80a0318 <loop+0x1d0>)
 80a027c:	f000 fed2 	bl	80a1024 <_ZN5Print5printEPKc>
  Serial.println(DHT.getDewPoint());
 80a0280:	f001 f91a 	bl	80a14b8 <_Z16_fetch_usbserialv>
 80a0284:	4606      	mov	r6, r0
 80a0286:	4816      	ldr	r0, [pc, #88]	; (80a02e0 <loop+0x198>)
 80a0288:	f000 fabe 	bl	80a0808 <_ZN14PietteTech_DHT11getDewPointEv>
 80a028c:	9400      	str	r4, [sp, #0]
 80a028e:	4602      	mov	r2, r0
 80a0290:	460b      	mov	r3, r1
 80a0292:	4630      	mov	r0, r6
 80a0294:	f000 ffe2 	bl	80a125c <_ZN5Print7printlnEdi>

  Serial.print("Dew Point Slow (oC): ");
 80a0298:	f001 f90e 	bl	80a14b8 <_Z16_fetch_usbserialv>
 80a029c:	491f      	ldr	r1, [pc, #124]	; (80a031c <loop+0x1d4>)
 80a029e:	f000 fec1 	bl	80a1024 <_ZN5Print5printEPKc>
  Serial.println(DHT.getDewPointSlow());
 80a02a2:	f001 f909 	bl	80a14b8 <_Z16_fetch_usbserialv>
 80a02a6:	4606      	mov	r6, r0
 80a02a8:	480d      	ldr	r0, [pc, #52]	; (80a02e0 <loop+0x198>)
 80a02aa:	f000 fb15 	bl	80a08d8 <_ZN14PietteTech_DHT15getDewPointSlowEv>
 80a02ae:	9400      	str	r4, [sp, #0]
 80a02b0:	4602      	mov	r2, r0
 80a02b2:	460b      	mov	r3, r1
 80a02b4:	4630      	mov	r0, r6
 80a02b6:	f000 ffd1 	bl	80a125c <_ZN5Print7printlnEdi>

  n++;
  delay(2500);
 80a02ba:	f640 10c4 	movw	r0, #2500	; 0x9c4
  Serial.println(DHT.getDewPoint());

  Serial.print("Dew Point Slow (oC): ");
  Serial.println(DHT.getDewPointSlow());

  n++;
 80a02be:	682b      	ldr	r3, [r5, #0]
 80a02c0:	3301      	adds	r3, #1
 80a02c2:	602b      	str	r3, [r5, #0]
  delay(2500);
}
 80a02c4:	b002      	add	sp, #8
 80a02c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  Serial.print("Dew Point Slow (oC): ");
  Serial.println(DHT.getDewPointSlow());

  n++;
  delay(2500);
 80a02ca:	f000 bd7b 	b.w	80a0dc4 <delay>
 80a02ce:	bf00      	nop
 80a02d0:	20000370 	.word	0x20000370
 80a02d4:	080a4527 	.word	0x080a4527
 80a02d8:	080a436e 	.word	0x080a436e
 80a02dc:	080a4395 	.word	0x080a4395
 80a02e0:	20000374 	.word	0x20000374
 80a02e4:	080a43a3 	.word	0x080a43a3
 80a02e8:	080a43a6 	.word	0x080a43a6
 80a02ec:	080a43bd 	.word	0x080a43bd
 80a02f0:	080a43d8 	.word	0x080a43d8
 80a02f4:	080a43f8 	.word	0x080a43f8
 80a02f8:	080a4414 	.word	0x080a4414
 80a02fc:	080a4426 	.word	0x080a4426
 80a0300:	080a4442 	.word	0x080a4442
 80a0304:	080a4456 	.word	0x080a4456
 80a0308:	080a4464 	.word	0x080a4464
 80a030c:	080a4473 	.word	0x080a4473
 80a0310:	080a4486 	.word	0x080a4486
 80a0314:	080a4499 	.word	0x080a4499
 80a0318:	080a44ab 	.word	0x080a44ab
 80a031c:	080a44bc 	.word	0x080a44bc

080a0320 <_GLOBAL__sub_I_DHT>:
}
 80a0320:	b510      	push	{r4, lr}
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0322:	f000 fc09 	bl	80a0b38 <HAL_Pin_Map>
 80a0326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#define DHTTYPE DHT11 // Sensor type DHT11/21/22/AM2301/AM2302
#define DHTPIN D4     // Digital pin for communications

// Lib instantiate
PietteTech_DHT DHT(DHTPIN, DHTTYPE);
 80a032a:	2300      	movs	r3, #0
 80a032c:	220b      	movs	r2, #11
 80a032e:	2104      	movs	r1, #4
 80a0330:	4801      	ldr	r0, [pc, #4]	; (80a0338 <_GLOBAL__sub_I_DHT+0x18>)
 80a0332:	f000 b8d1 	b.w	80a04d8 <_ZN14PietteTech_DHTC1EhhPFvvE>
 80a0336:	bf00      	nop
 80a0338:	20000374 	.word	0x20000374

080a033c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE9_M_invokeERKSt9_Any_data>:
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a033c:	6803      	ldr	r3, [r0, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
 80a033e:	685a      	ldr	r2, [r3, #4]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a0340:	6898      	ldr	r0, [r3, #8]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
 80a0342:	f012 0f01 	tst.w	r2, #1
 80a0346:	ea4f 0262 	mov.w	r2, r2, asr #1
 80a034a:	bf18      	it	ne
 80a034c:	5881      	ldrne	r1, [r0, r2]
 80a034e:	681b      	ldr	r3, [r3, #0]
 80a0350:	4410      	add	r0, r2
 80a0352:	bf18      	it	ne
 80a0354:	58cb      	ldrne	r3, [r1, r3]
 80a0356:	4718      	bx	r3

080a0358 <_ZN14PietteTech_DHT12_isrCallbackEv>:
 * NOTE:  isrCallback is only here for backwards compatibility with v0.3 and earlier
 *        it is no longer used or needed
 */
void PietteTech_DHT::isrCallback() { }

void PietteTech_DHT::_isrCallback() {
 80a0358:	b570      	push	{r4, r5, r6, lr}
 80a035a:	4604      	mov	r4, r0
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a035c:	f000 fbdc 	bl	80a0b18 <HAL_Timer_Get_Micro_Seconds>
  unsigned long newUs = micros();
  unsigned long delta = (newUs - _us);
  _us = newUs;

  if (delta > 6000) {
 80a0360:	f241 7270 	movw	r2, #6000	; 0x1770
 */
void PietteTech_DHT::isrCallback() { }

void PietteTech_DHT::_isrCallback() {
  unsigned long newUs = micros();
  unsigned long delta = (newUs - _us);
 80a0364:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  _us = newUs;
 80a0366:	63a0      	str	r0, [r4, #56]	; 0x38
 */
void PietteTech_DHT::isrCallback() { }

void PietteTech_DHT::_isrCallback() {
  unsigned long newUs = micros();
  unsigned long delta = (newUs - _us);
 80a0368:	1ac3      	subs	r3, r0, r3
  _us = newUs;

  if (delta > 6000) {
 80a036a:	4293      	cmp	r3, r2
 80a036c:	d90b      	bls.n	80a0386 <_ZN14PietteTech_DHT12_isrCallbackEv+0x2e>
    _status = DHTLIB_ERROR_ISR_TIMEOUT;
 80a036e:	f06f 0301 	mvn.w	r3, #1
 80a0372:	62e3      	str	r3, [r4, #44]	; 0x2c
    _state = STOPPED;
 80a0374:	2303      	movs	r3, #3
 80a0376:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    detachInterrupt(_sigPin);
 80a037a:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
    }
    break;
  default:
    break;
  }
}
 80a037e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _us = newUs;

  if (delta > 6000) {
    _status = DHTLIB_ERROR_ISR_TIMEOUT;
    _state = STOPPED;
    detachInterrupt(_sigPin);
 80a0382:	f000 bd77 	b.w	80a0e74 <_Z15detachInterruptt>
    return;
  }
  switch (_state) {
 80a0386:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 80a038a:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 80a038e:	b112      	cbz	r2, 80a0396 <_ZN14PietteTech_DHT12_isrCallbackEv+0x3e>
 80a0390:	2901      	cmp	r1, #1
 80a0392:	d020      	beq.n	80a03d6 <_ZN14PietteTech_DHT12_isrCallbackEv+0x7e>
 80a0394:	bd70      	pop	{r4, r5, r6, pc}
  case RESPONSE:            // Spec: 80us LOW followed by 80us HIGH
    if (delta < 65) {      // Spec: 20-200us to first falling edge of response
 80a0396:	2b40      	cmp	r3, #64	; 0x40
 80a0398:	d803      	bhi.n	80a03a2 <_ZN14PietteTech_DHT12_isrCallbackEv+0x4a>
      _us -= delta;
 80a039a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80a039c:	1ad3      	subs	r3, r2, r3
 80a039e:	63a3      	str	r3, [r4, #56]	; 0x38
      break; //do nothing, it started the response signal
 80a03a0:	bd70      	pop	{r4, r5, r6, pc}
      
// --------------- issue: https://github.com/particle-iot/device-os/issues/1654 -----------------
//    } if (125 < delta && delta < 200) { // originally 
    } if (125 < delta && delta < 220) {   // account for timing offset with Particle Mesh devices
 80a03a2:	f1a3 027e 	sub.w	r2, r3, #126	; 0x7e
 80a03a6:	2a5d      	cmp	r2, #93	; 0x5d
 80a03a8:	b2dd      	uxtb	r5, r3
 80a03aa:	d805      	bhi.n	80a03b8 <_ZN14PietteTech_DHT12_isrCallbackEv+0x60>
// ----------------------------------------------------------------------------------------------

#if defined(DHT_DEBUG_TIMING)
      *_e++ = delta;  // record the edge -> edge time
 80a03ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80a03ae:	1c5a      	adds	r2, r3, #1
 80a03b0:	6422      	str	r2, [r4, #64]	; 0x40
 80a03b2:	701d      	strb	r5, [r3, #0]
#endif
      _state = DATA;
 80a03b4:	2301      	movs	r3, #1
 80a03b6:	e071      	b.n	80a049c <_ZN14PietteTech_DHT12_isrCallbackEv+0x144>
    }
    else {
      detachInterrupt(_sigPin);
 80a03b8:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
 80a03bc:	f000 fd5a 	bl	80a0e74 <_Z15detachInterruptt>
      _status = DHTLIB_ERROR_RESPONSE_TIMEOUT;
      _state = STOPPED;
#if defined(DHT_DEBUG_TIMING)
      *_e++ = delta;  // record the edge -> edge time
 80a03c0:	6c22      	ldr	r2, [r4, #64]	; 0x40
#endif
      _state = DATA;
    }
    else {
      detachInterrupt(_sigPin);
      _status = DHTLIB_ERROR_RESPONSE_TIMEOUT;
 80a03c2:	f06f 0302 	mvn.w	r3, #2
 80a03c6:	62e3      	str	r3, [r4, #44]	; 0x2c
      _state = STOPPED;
 80a03c8:	2303      	movs	r3, #3
 80a03ca:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
#if defined(DHT_DEBUG_TIMING)
      *_e++ = delta;  // record the edge -> edge time
 80a03ce:	1c53      	adds	r3, r2, #1
 80a03d0:	6423      	str	r3, [r4, #64]	; 0x40
 80a03d2:	7015      	strb	r5, [r2, #0]
 80a03d4:	bd70      	pop	{r4, r5, r6, pc}
#endif
    }
    break;
  case DATA:          // Spec: 50us low followed by high of 26-28us = 0, 70us = 1
    if (60 < delta && delta < 155) { //valid in timing
 80a03d6:	f1a3 023d 	sub.w	r2, r3, #61	; 0x3d
 80a03da:	2a5d      	cmp	r2, #93	; 0x5d
 80a03dc:	d84f      	bhi.n	80a047e <_ZN14PietteTech_DHT12_isrCallbackEv+0x126>
      _bits[_idx] <<= 1; // shift the data
 80a03de:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
      if (delta > 110) //is a one
 80a03e2:	2b6e      	cmp	r3, #110	; 0x6e
#endif
    }
    break;
  case DATA:          // Spec: 50us low followed by high of 26-28us = 0, 70us = 1
    if (60 < delta && delta < 155) { //valid in timing
      _bits[_idx] <<= 1; // shift the data
 80a03e4:	4421      	add	r1, r4
 80a03e6:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
 80a03ea:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80a03ee:	b2d2      	uxtb	r2, r2
 80a03f0:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
      if (delta > 110) //is a one
 80a03f4:	d908      	bls.n	80a0408 <_ZN14PietteTech_DHT12_isrCallbackEv+0xb0>
        _bits[_idx] |= 1;
 80a03f6:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
 80a03fa:	4422      	add	r2, r4
 80a03fc:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
 80a0400:	f041 0101 	orr.w	r1, r1, #1
 80a0404:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
#if defined(DHT_DEBUG_TIMING)
      *_e++ = delta;  // record the edge -> edge time
 80a0408:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80a040a:	b2db      	uxtb	r3, r3
 80a040c:	1c51      	adds	r1, r2, #1
 80a040e:	6421      	str	r1, [r4, #64]	; 0x40
 80a0410:	7013      	strb	r3, [r2, #0]
#endif
      if (_cnt == 0) { // we have completed the byte, go to next
 80a0412:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80a0416:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80a041a:	bb4b      	cbnz	r3, 80a0470 <_ZN14PietteTech_DHT12_isrCallbackEv+0x118>
        _cnt = 7; // restart at MSB
 80a041c:	2307      	movs	r3, #7
 80a041e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if (++_idx == 5) { // go to next byte, if we have got 5 bytes stop.
 80a0422:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80a0426:	3301      	adds	r3, #1
 80a0428:	b2db      	uxtb	r3, r3
 80a042a:	2b05      	cmp	r3, #5
 80a042c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
 80a0430:	d136      	bne.n	80a04a0 <_ZN14PietteTech_DHT12_isrCallbackEv+0x148>
          detachInterrupt(_sigPin);
 80a0432:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
 80a0436:	f000 fd1d 	bl	80a0e74 <_Z15detachInterruptt>
          // Verify checksum
          uint8_t sum = _bits[0] + _bits[1] + _bits[2] + _bits[3];
 80a043a:	f894 6030 	ldrb.w	r6, [r4, #48]	; 0x30
 80a043e:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 80a0442:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
          if (_bits[4] != sum) {
 80a0446:	4432      	add	r2, r6
      if (_cnt == 0) { // we have completed the byte, go to next
        _cnt = 7; // restart at MSB
        if (++_idx == 5) { // go to next byte, if we have got 5 bytes stop.
          detachInterrupt(_sigPin);
          // Verify checksum
          uint8_t sum = _bits[0] + _bits[1] + _bits[2] + _bits[3];
 80a0448:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
          if (_bits[4] != sum) {
 80a044c:	4413      	add	r3, r2
 80a044e:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 80a0452:	4403      	add	r3, r0
 80a0454:	b2db      	uxtb	r3, r3
 80a0456:	428b      	cmp	r3, r1
 80a0458:	d002      	beq.n	80a0460 <_ZN14PietteTech_DHT12_isrCallbackEv+0x108>
            _status = DHTLIB_ERROR_CHECKSUM;
 80a045a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a045e:	e01b      	b.n	80a0498 <_ZN14PietteTech_DHT12_isrCallbackEv+0x140>
            _state = STOPPED;
          }
          else {
            _status = DHTLIB_OK;
            _state = ACQUIRED;
 80a0460:	2302      	movs	r3, #2
          if (_bits[4] != sum) {
            _status = DHTLIB_ERROR_CHECKSUM;
            _state = STOPPED;
          }
          else {
            _status = DHTLIB_OK;
 80a0462:	62e5      	str	r5, [r4, #44]	; 0x2c
            _state = ACQUIRED;
 80a0464:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
            _convert = true;
 80a0468:	2301      	movs	r3, #1
 80a046a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80a046e:	bd70      	pop	{r4, r5, r6, pc}
          }
          break;
        }
      }
      else _cnt--;
 80a0470:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80a0474:	3b01      	subs	r3, #1
 80a0476:	b2db      	uxtb	r3, r3
 80a0478:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 80a047c:	bd70      	pop	{r4, r5, r6, pc}
 80a047e:	6c60      	ldr	r0, [r4, #68]	; 0x44
    }
    else if (delta < 10) {
 80a0480:	2b09      	cmp	r3, #9
      detachInterrupt(_sigPin);
 80a0482:	b280      	uxth	r0, r0
          break;
        }
      }
      else _cnt--;
    }
    else if (delta < 10) {
 80a0484:	d804      	bhi.n	80a0490 <_ZN14PietteTech_DHT12_isrCallbackEv+0x138>
      detachInterrupt(_sigPin);
 80a0486:	f000 fcf5 	bl	80a0e74 <_Z15detachInterruptt>
      _status = DHTLIB_ERROR_DELTA;
 80a048a:	f06f 0305 	mvn.w	r3, #5
 80a048e:	e003      	b.n	80a0498 <_ZN14PietteTech_DHT12_isrCallbackEv+0x140>
      _state = STOPPED;
    }
    else {
      detachInterrupt(_sigPin);
 80a0490:	f000 fcf0 	bl	80a0e74 <_Z15detachInterruptt>
      _status = DHTLIB_ERROR_DATA_TIMEOUT;
 80a0494:	f06f 0303 	mvn.w	r3, #3
 80a0498:	62e3      	str	r3, [r4, #44]	; 0x2c
      _state = STOPPED;
 80a049a:	2303      	movs	r3, #3
 80a049c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 80a04a0:	bd70      	pop	{r4, r5, r6, pc}

080a04a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a04a2:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a04a4:	b538      	push	{r3, r4, r5, lr}
 80a04a6:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a04a8:	d005      	beq.n	80a04b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>
 80a04aa:	2a03      	cmp	r2, #3
 80a04ac:	d00f      	beq.n	80a04ce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2c>
 80a04ae:	2a01      	cmp	r2, #1
 80a04b0:	d110      	bne.n	80a04d4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x32>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a04b2:	680b      	ldr	r3, [r1, #0]
 80a04b4:	e009      	b.n	80a04ca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x28>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a04b6:	200c      	movs	r0, #12
 80a04b8:	680d      	ldr	r5, [r1, #0]
 80a04ba:	f7ff fdee 	bl	80a009a <_Znwj>
 80a04be:	4603      	mov	r3, r0
 80a04c0:	b118      	cbz	r0, 80a04ca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x28>
 80a04c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80a04c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80a04ca:	6023      	str	r3, [r4, #0]
 80a04cc:	e002      	b.n	80a04d4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x32>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a04ce:	6800      	ldr	r0, [r0, #0]
 80a04d0:	f7ff fde5 	bl	80a009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a04d4:	2000      	movs	r0, #0
 80a04d6:	bd38      	pop	{r3, r4, r5, pc}

080a04d8 <_ZN14PietteTech_DHTC1EhhPFvvE>:
 *        it is no longer used or needed
 */
PietteTech_DHT::PietteTech_DHT() {
}
PietteTech_DHT::PietteTech_DHT(uint8_t sigPin, uint8_t dht_type, void(*callback_wrapper)()) {
  _sigPin = sigPin;
 80a04d8:	6441      	str	r1, [r0, #68]	; 0x44
  _type = dht_type;
 80a04da:	6482      	str	r2, [r0, #72]	; 0x48
}
 80a04dc:	4770      	bx	lr

080a04de <_ZN14PietteTech_DHT5beginEv>:

/*
 * NOTE:  callback_wrapper is only here for backwards compatibility with v0.3 and earlier
 *        it is no longer used or needed
 */
void PietteTech_DHT::begin() {
 80a04de:	b538      	push	{r3, r4, r5, lr}
 80a04e0:	4604      	mov	r4, r0
  _firstreading = true;
  _lastreadtime = 0;
 80a04e2:	2300      	movs	r3, #0
 80a04e4:	64c3      	str	r3, [r0, #76]	; 0x4c
  _state = STOPPED;
 80a04e6:	2303      	movs	r3, #3
/*
 * NOTE:  callback_wrapper is only here for backwards compatibility with v0.3 and earlier
 *        it is no longer used or needed
 */
void PietteTech_DHT::begin() {
  _firstreading = true;
 80a04e8:	2501      	movs	r5, #1
  _lastreadtime = 0;
  _state = STOPPED;
 80a04ea:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
  _status = DHTLIB_ERROR_NOTSTARTED;
 80a04ee:	f06f 0306 	mvn.w	r3, #6
/*
 * NOTE:  callback_wrapper is only here for backwards compatibility with v0.3 and earlier
 *        it is no longer used or needed
 */
void PietteTech_DHT::begin() {
  _firstreading = true;
 80a04f2:	f880 5050 	strb.w	r5, [r0, #80]	; 0x50
  _lastreadtime = 0;
  _state = STOPPED;
  _status = DHTLIB_ERROR_NOTSTARTED;
 80a04f6:	62c3      	str	r3, [r0, #44]	; 0x2c
  pinMode(_sigPin, OUTPUT);
 80a04f8:	4629      	mov	r1, r5
 80a04fa:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
 80a04fe:	f001 f913 	bl	80a1728 <pinMode>
  digitalWrite(_sigPin, HIGH);
 80a0502:	4629      	mov	r1, r5
 80a0504:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
}
 80a0508:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  _firstreading = true;
  _lastreadtime = 0;
  _state = STOPPED;
  _status = DHTLIB_ERROR_NOTSTARTED;
  pinMode(_sigPin, OUTPUT);
  digitalWrite(_sigPin, HIGH);
 80a050c:	f001 b91d 	b.w	80a174a <digitalWrite>

080a0510 <_ZN14PietteTech_DHT7acquireEv>:
  _sigPin = sigPin;
  _type = dht_type;
  this->begin();
}

int PietteTech_DHT::acquire() {
 80a0510:	b570      	push	{r4, r5, r6, lr}
 80a0512:	4604      	mov	r4, r0
 80a0514:	b086      	sub	sp, #24
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0516:	f000 fb07 	bl	80a0b28 <HAL_Timer_Get_Milli_Seconds>
  // Check if sensor was read less than two seconds ago and return early
  // to use last reading
  unsigned long currenttime = millis();
  if (!_firstreading && ((currenttime - _lastreadtime) < 2000)) {
 80a051a:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80a051e:	b923      	cbnz	r3, 80a052a <_ZN14PietteTech_DHT7acquireEv+0x1a>
 80a0520:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80a0522:	1ac3      	subs	r3, r0, r3
 80a0524:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80a0528:	d30a      	bcc.n	80a0540 <_ZN14PietteTech_DHT7acquireEv+0x30>
    // return last correct measurement, (this read time - last read time) < device limit
    return DHTLIB_ACQUIRED;
  }

  if (_state == STOPPED || _state == ACQUIRED) {
 80a052a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 80a052e:	2b03      	cmp	r3, #3
 80a0530:	d008      	beq.n	80a0544 <_ZN14PietteTech_DHT7acquireEv+0x34>
 80a0532:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 80a0536:	2b02      	cmp	r3, #2
 80a0538:	d004      	beq.n	80a0544 <_ZN14PietteTech_DHT7acquireEv+0x34>
    attachInterrupt(_sigPin, &PietteTech_DHT::_isrCallback, this, FALLING);

    return DHTLIB_ACQUIRING;
  }
  else
    return DHTLIB_ERROR_ACQUIRING;
 80a053a:	f06f 0004 	mvn.w	r0, #4
 80a053e:	e05f      	b.n	80a0600 <_ZN14PietteTech_DHT7acquireEv+0xf0>
  // Check if sensor was read less than two seconds ago and return early
  // to use last reading
  unsigned long currenttime = millis();
  if (!_firstreading && ((currenttime - _lastreadtime) < 2000)) {
    // return last correct measurement, (this read time - last read time) < device limit
    return DHTLIB_ACQUIRED;
 80a0540:	2002      	movs	r0, #2
 80a0542:	e05d      	b.n	80a0600 <_ZN14PietteTech_DHT7acquireEv+0xf0>

  if (_state == STOPPED || _state == ACQUIRED) {
    /*
     * Setup the initial state machine
     */
    _firstreading = false;
 80a0544:	2300      	movs	r3, #0

#if defined(DHT_DEBUG_TIMING)
    /*
     * Clear the debug timings array
     */
    for (int i = 0; i < 41; i++) _edges[i] = 0;
 80a0546:	461a      	mov	r2, r3

  if (_state == STOPPED || _state == ACQUIRED) {
    /*
     * Setup the initial state machine
     */
    _firstreading = false;
 80a0548:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    _lastreadtime = currenttime;
 80a054c:	64e0      	str	r0, [r4, #76]	; 0x4c
    _state = RESPONSE;
 80a054e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29

#if defined(DHT_DEBUG_TIMING)
    /*
     * Clear the debug timings array
     */
    for (int i = 0; i < 41; i++) _edges[i] = 0;
 80a0552:	54e2      	strb	r2, [r4, r3]
 80a0554:	3301      	adds	r3, #1
 80a0556:	2b29      	cmp	r3, #41	; 0x29
 80a0558:	f04f 0500 	mov.w	r5, #0
 80a055c:	d1f9      	bne.n	80a0552 <_ZN14PietteTech_DHT7acquireEv+0x42>

    /*
     * Set the initial values in the buffer and variables
     */
    for (int i = 0; i < 5; i++) _bits[i] = 0;
    _cnt = 7;
 80a055e:	2307      	movs	r3, #7
#endif

    /*
     * Set the initial values in the buffer and variables
     */
    for (int i = 0; i < 5; i++) _bits[i] = 0;
 80a0560:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
 80a0564:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 80a0568:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
 80a056c:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
 80a0570:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    _cnt = 7;
 80a0574:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    _idx = 0;
    _hum = 0;
 80a0578:	2300      	movs	r3, #0
 80a057a:	6563      	str	r3, [r4, #84]	; 0x54
    _temp = 0;
 80a057c:	65a3      	str	r3, [r4, #88]	; 0x58

    /*
     * Toggle the digital output to trigger the DHT device
     * to send us temperature and humidity data
     */
    pinMode(_sigPin, OUTPUT);
 80a057e:	2101      	movs	r1, #1
 80a0580:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
#if defined(DHT_DEBUG_TIMING)
    /*
     * Clear the debug timings array
     */
    for (int i = 0; i < 41; i++) _edges[i] = 0;
    _e = &_edges[0];
 80a0584:	6424      	str	r4, [r4, #64]	; 0x40
    /*
     * Set the initial values in the buffer and variables
     */
    for (int i = 0; i < 5; i++) _bits[i] = 0;
    _cnt = 7;
    _idx = 0;
 80a0586:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36

    /*
     * Toggle the digital output to trigger the DHT device
     * to send us temperature and humidity data
     */
    pinMode(_sigPin, OUTPUT);
 80a058a:	f001 f8cd 	bl	80a1728 <pinMode>
    digitalWrite(_sigPin, LOW);
 80a058e:	4629      	mov	r1, r5
 80a0590:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
 80a0594:	f001 f8d9 	bl	80a174a <digitalWrite>
    if (_type == DHT11)
 80a0598:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80a059a:	2b0b      	cmp	r3, #11
 80a059c:	d103      	bne.n	80a05a6 <_ZN14PietteTech_DHT7acquireEv+0x96>
      delay(18);                  // DHT11 Spec: 18ms min
 80a059e:	2012      	movs	r0, #18
 80a05a0:	f000 fc10 	bl	80a0dc4 <delay>
 80a05a4:	e003      	b.n	80a05ae <_ZN14PietteTech_DHT7acquireEv+0x9e>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a05a6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80a05aa:	f000 faad 	bl	80a0b08 <HAL_Delay_Microseconds>
    else
      delayMicroseconds(1500);    // DHT22 Spec: 0.8-20ms, 1ms typ
    pinMode(_sigPin, INPUT);        // Note Hi-Z mode with pullup resistor
 80a05ae:	2100      	movs	r1, #0
 80a05b0:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
 80a05b4:	f001 f8b8 	bl	80a1728 <pinMode>

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a05b8:	f000 faae 	bl	80a0b18 <HAL_Timer_Get_Micro_Seconds>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a05bc:	2500      	movs	r5, #0
                                    // will keep this high until the DHT responds.
    /*
     * Attach the interrupt handler to receive the data once the DHT
     * starts to send us data
     */
    _us = micros();
 80a05be:	63a0      	str	r0, [r4, #56]	; 0x38
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a05c0:	200c      	movs	r0, #12
    attachInterrupt(_sigPin, &PietteTech_DHT::_isrCallback, this, FALLING);
 80a05c2:	f8b4 6044 	ldrh.w	r6, [r4, #68]	; 0x44
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a05c6:	9504      	str	r5, [sp, #16]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a05c8:	f7ff fd67 	bl	80a009a <_Znwj>
 80a05cc:	b118      	cbz	r0, 80a05d6 <_ZN14PietteTech_DHT7acquireEv+0xc6>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
 80a05ce:	4b0d      	ldr	r3, [pc, #52]	; (80a0604 <_ZN14PietteTech_DHT7acquireEv+0xf4>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a05d0:	6084      	str	r4, [r0, #8]
 80a05d2:	e880 0028 	stmia.w	r0, {r3, r5}
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a05d6:	4b0c      	ldr	r3, [pc, #48]	; (80a0608 <_ZN14PietteTech_DHT7acquireEv+0xf8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a05d8:	9002      	str	r0, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a05da:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 80a05dc:	4b0b      	ldr	r3, [pc, #44]	; (80a060c <_ZN14PietteTech_DHT7acquireEv+0xfc>)
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
template <typename T>
bool attachInterrupt(uint16_t pin, void (T::*handler)(), T *instance, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0) {
    using namespace std::placeholders;
    return attachInterrupt(pin, std::bind(handler, instance), mode, priority, subpriority);
 80a05de:	2202      	movs	r2, #2
 80a05e0:	9304      	str	r3, [sp, #16]
 80a05e2:	2300      	movs	r3, #0
 80a05e4:	9300      	str	r3, [sp, #0]
 80a05e6:	a902      	add	r1, sp, #8
 80a05e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a05ec:	4630      	mov	r0, r6
 80a05ee:	f000 fc83 	bl	80a0ef8 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a05f2:	9b04      	ldr	r3, [sp, #16]
 80a05f4:	b11b      	cbz	r3, 80a05fe <_ZN14PietteTech_DHT7acquireEv+0xee>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a05f6:	a902      	add	r1, sp, #8
 80a05f8:	2203      	movs	r2, #3
 80a05fa:	4608      	mov	r0, r1
 80a05fc:	4798      	blx	r3
 80a05fe:	2001      	movs	r0, #1

    return DHTLIB_ACQUIRING;
  }
  else
    return DHTLIB_ERROR_ACQUIRING;
}
 80a0600:	b006      	add	sp, #24
 80a0602:	bd70      	pop	{r4, r5, r6, pc}
 80a0604:	080a0359 	.word	0x080a0359
 80a0608:	080a033d 	.word	0x080a033d
 80a060c:	080a04a3 	.word	0x080a04a3

080a0610 <_ZN14PietteTech_DHT7convertEv>:
  default:
    break;
  }
}

void PietteTech_DHT::convert() {
 80a0610:	b510      	push	{r4, lr}
  // Calculate the temperature and humidity based on the sensor type
  switch (_type) {
 80a0612:	6c83      	ldr	r3, [r0, #72]	; 0x48
  default:
    break;
  }
}

void PietteTech_DHT::convert() {
 80a0614:	4604      	mov	r4, r0
  // Calculate the temperature and humidity based on the sensor type
  switch (_type) {
 80a0616:	2b0b      	cmp	r3, #11
 80a0618:	d030      	beq.n	80a067c <_ZN14PietteTech_DHT7convertEv+0x6c>
 80a061a:	db39      	blt.n	80a0690 <_ZN14PietteTech_DHT7convertEv+0x80>
 80a061c:	3b15      	subs	r3, #21
 80a061e:	2b01      	cmp	r3, #1
 80a0620:	d836      	bhi.n	80a0690 <_ZN14PietteTech_DHT7convertEv+0x80>
    _hum = _bits[0];
    _temp = _bits[2];
    break;
  case DHT22:
  case DHT21:
    _hum = word(_bits[0], _bits[1]) * 0.1;
 80a0622:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
 80a0626:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 80a062a:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 80a062e:	b280      	uxth	r0, r0
 80a0630:	f002 fffe 	bl	80a3630 <__aeabi_i2d>
 80a0634:	a318      	add	r3, pc, #96	; (adr r3, 80a0698 <_ZN14PietteTech_DHT7convertEv+0x88>)
 80a0636:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a063a:	f003 f85f 	bl	80a36fc <__aeabi_dmul>
 80a063e:	f003 fb55 	bl	80a3cec <__aeabi_d2f>
    _temp = (_bits[2] & 0x80 ?
 80a0642:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    _hum = _bits[0];
    _temp = _bits[2];
    break;
  case DHT22:
  case DHT21:
    _hum = word(_bits[0], _bits[1]) * 0.1;
 80a0646:	6560      	str	r0, [r4, #84]	; 0x54
    _temp = (_bits[2] & 0x80 ?
      -word(_bits[2] & 0x7F, _bits[3]) :
 80a0648:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
      word(_bits[2], _bits[3])) * 0.1;
 80a064c:	f013 0f80 	tst.w	r3, #128	; 0x80
    break;
  case DHT22:
  case DHT21:
    _hum = word(_bits[0], _bits[1]) * 0.1;
    _temp = (_bits[2] & 0x80 ?
      -word(_bits[2] & 0x7F, _bits[3]) :
 80a0650:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
      word(_bits[2], _bits[3])) * 0.1;
 80a0654:	bf1b      	ittet	ne
 80a0656:	f000 007f 	andne.w	r0, r0, #127	; 0x7f
 80a065a:	eb03 2000 	addne.w	r0, r3, r0, lsl #8
 80a065e:	eb03 2000 	addeq.w	r0, r3, r0, lsl #8
 80a0662:	4240      	negne	r0, r0
 80a0664:	bf08      	it	eq
 80a0666:	b280      	uxtheq	r0, r0
 80a0668:	f002 ffe2 	bl	80a3630 <__aeabi_i2d>
 80a066c:	a30a      	add	r3, pc, #40	; (adr r3, 80a0698 <_ZN14PietteTech_DHT7convertEv+0x88>)
 80a066e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0672:	f003 f843 	bl	80a36fc <__aeabi_dmul>
 80a0676:	f003 fb39 	bl	80a3cec <__aeabi_d2f>
 80a067a:	e008      	b.n	80a068e <_ZN14PietteTech_DHT7convertEv+0x7e>

void PietteTech_DHT::convert() {
  // Calculate the temperature and humidity based on the sensor type
  switch (_type) {
  case DHT11:
    _hum = _bits[0];
 80a067c:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
 80a0680:	f003 fc3a 	bl	80a3ef8 <__aeabi_ui2f>
 80a0684:	6560      	str	r0, [r4, #84]	; 0x54
    _temp = _bits[2];
 80a0686:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 80a068a:	f003 fc35 	bl	80a3ef8 <__aeabi_ui2f>
  case DHT22:
  case DHT21:
    _hum = word(_bits[0], _bits[1]) * 0.1;
    _temp = (_bits[2] & 0x80 ?
      -word(_bits[2] & 0x7F, _bits[3]) :
      word(_bits[2], _bits[3])) * 0.1;
 80a068e:	65a0      	str	r0, [r4, #88]	; 0x58
    break;
  }
  _convert = false;
 80a0690:	2300      	movs	r3, #0
 80a0692:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80a0696:	bd10      	pop	{r4, pc}
 80a0698:	9999999a 	.word	0x9999999a
 80a069c:	3fb99999 	.word	0x3fb99999

080a06a0 <_ZN14PietteTech_DHT9acquiringEv>:
}

bool PietteTech_DHT::acquiring() {
  if (_state != ACQUIRED && _state != STOPPED)
 80a06a0:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80a06a4:	2b02      	cmp	r3, #2
 80a06a6:	d005      	beq.n	80a06b4 <_ZN14PietteTech_DHT9acquiringEv+0x14>
 80a06a8:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 80a06ac:	3803      	subs	r0, #3
 80a06ae:	bf18      	it	ne
 80a06b0:	2001      	movne	r0, #1
 80a06b2:	4770      	bx	lr
    return true;
  return false;
 80a06b4:	2000      	movs	r0, #0
}
 80a06b6:	4770      	bx	lr

080a06b8 <_ZN14PietteTech_DHT14acquireAndWaitEm>:
  }
  else
    return DHTLIB_ERROR_ACQUIRING;
}

int PietteTech_DHT::acquireAndWait(uint32_t timeout) {
 80a06b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a06ba:	460d      	mov	r5, r1
 80a06bc:	4604      	mov	r4, r0
  acquire();
 80a06be:	f7ff ff27 	bl	80a0510 <_ZN14PietteTech_DHT7acquireEv>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a06c2:	f000 fa31 	bl	80a0b28 <HAL_Timer_Get_Milli_Seconds>
 80a06c6:	4607      	mov	r7, r0
 80a06c8:	4e0c      	ldr	r6, [pc, #48]	; (80a06fc <_ZN14PietteTech_DHT14acquireAndWaitEm+0x44>)
  uint32_t start = millis();
  while (acquiring() && (timeout == 0 || ((millis() - start) < timeout))) Particle.process();
 80a06ca:	4620      	mov	r0, r4
 80a06cc:	f7ff ffe8 	bl	80a06a0 <_ZN14PietteTech_DHT9acquiringEv>
 80a06d0:	b158      	cbz	r0, 80a06ea <_ZN14PietteTech_DHT14acquireAndWaitEm+0x32>
 80a06d2:	b125      	cbz	r5, 80a06de <_ZN14PietteTech_DHT14acquireAndWaitEm+0x26>
 80a06d4:	f000 fa28 	bl	80a0b28 <HAL_Timer_Get_Milli_Seconds>
 80a06d8:	1bc0      	subs	r0, r0, r7
 80a06da:	4285      	cmp	r5, r0
 80a06dc:	d905      	bls.n	80a06ea <_ZN14PietteTech_DHT14acquireAndWaitEm+0x32>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a06de:	f000 fa23 	bl	80a0b28 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a06e2:	6030      	str	r0, [r6, #0]
 80a06e4:	f000 fb3e 	bl	80a0d64 <spark_process>
 80a06e8:	e7ef      	b.n	80a06ca <_ZN14PietteTech_DHT14acquireAndWaitEm+0x12>
  if (acquiring())
 80a06ea:	4620      	mov	r0, r4
 80a06ec:	f7ff ffd8 	bl	80a06a0 <_ZN14PietteTech_DHT9acquiringEv>
 80a06f0:	b110      	cbz	r0, 80a06f8 <_ZN14PietteTech_DHT14acquireAndWaitEm+0x40>
  {
    _status = DHTLIB_ERROR_RESPONSE_TIMEOUT;
 80a06f2:	f06f 0302 	mvn.w	r3, #2
 80a06f6:	62e3      	str	r3, [r4, #44]	; 0x2c
    return true;
  return false;
}

int PietteTech_DHT::getStatus() {
  return _status;
 80a06f8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  if (acquiring())
  {
    _status = DHTLIB_ERROR_RESPONSE_TIMEOUT;
  }
  return getStatus();
}
 80a06fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a06fc:	200008b8 	.word	0x200008b8

080a0700 <_ZN14PietteTech_DHT10getCelsiusEv>:

int PietteTech_DHT::getStatus() {
  return _status;
}

float PietteTech_DHT::getCelsius() {
 80a0700:	b510      	push	{r4, lr}
  DHT_CHECK_STATE;
 80a0702:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29

int PietteTech_DHT::getStatus() {
  return _status;
}

float PietteTech_DHT::getCelsius() {
 80a0706:	4604      	mov	r4, r0
  DHT_CHECK_STATE;
 80a0708:	2b03      	cmp	r3, #3
 80a070a:	d103      	bne.n	80a0714 <_ZN14PietteTech_DHT10getCelsiusEv+0x14>
 80a070c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80a070e:	f003 fbf7 	bl	80a3f00 <__aeabi_i2f>
 80a0712:	bd10      	pop	{r4, pc}
 80a0714:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80a0718:	2b02      	cmp	r3, #2
 80a071a:	d106      	bne.n	80a072a <_ZN14PietteTech_DHT10getCelsiusEv+0x2a>
 80a071c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80a0720:	b10b      	cbz	r3, 80a0726 <_ZN14PietteTech_DHT10getCelsiusEv+0x26>
 80a0722:	f7ff ff75 	bl	80a0610 <_ZN14PietteTech_DHT7convertEv>
  return _temp;
 80a0726:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80a0728:	bd10      	pop	{r4, pc}
int PietteTech_DHT::getStatus() {
  return _status;
}

float PietteTech_DHT::getCelsius() {
  DHT_CHECK_STATE;
 80a072a:	4801      	ldr	r0, [pc, #4]	; (80a0730 <_ZN14PietteTech_DHT10getCelsiusEv+0x30>)
  return _temp;
}
 80a072c:	bd10      	pop	{r4, pc}
 80a072e:	bf00      	nop
 80a0730:	c0a00000 	.word	0xc0a00000

080a0734 <_ZN14PietteTech_DHT11getHumidityEv>:

float PietteTech_DHT::getHumidity() {
 80a0734:	b510      	push	{r4, lr}
  DHT_CHECK_STATE;
 80a0736:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
float PietteTech_DHT::getCelsius() {
  DHT_CHECK_STATE;
  return _temp;
}

float PietteTech_DHT::getHumidity() {
 80a073a:	4604      	mov	r4, r0
  DHT_CHECK_STATE;
 80a073c:	2b03      	cmp	r3, #3
 80a073e:	d103      	bne.n	80a0748 <_ZN14PietteTech_DHT11getHumidityEv+0x14>
 80a0740:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80a0742:	f003 fbdd 	bl	80a3f00 <__aeabi_i2f>
 80a0746:	bd10      	pop	{r4, pc}
 80a0748:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80a074c:	2b02      	cmp	r3, #2
 80a074e:	d106      	bne.n	80a075e <_ZN14PietteTech_DHT11getHumidityEv+0x2a>
 80a0750:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80a0754:	b10b      	cbz	r3, 80a075a <_ZN14PietteTech_DHT11getHumidityEv+0x26>
 80a0756:	f7ff ff5b 	bl	80a0610 <_ZN14PietteTech_DHT7convertEv>
  return _hum;
 80a075a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80a075c:	bd10      	pop	{r4, pc}
  DHT_CHECK_STATE;
  return _temp;
}

float PietteTech_DHT::getHumidity() {
  DHT_CHECK_STATE;
 80a075e:	4801      	ldr	r0, [pc, #4]	; (80a0764 <_ZN14PietteTech_DHT11getHumidityEv+0x30>)
  return _hum;
}
 80a0760:	bd10      	pop	{r4, pc}
 80a0762:	bf00      	nop
 80a0764:	c0a00000 	.word	0xc0a00000

080a0768 <_ZN14PietteTech_DHT13getFahrenheitEv>:

float PietteTech_DHT::getFahrenheit() {
 80a0768:	b510      	push	{r4, lr}
  DHT_CHECK_STATE;
 80a076a:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
float PietteTech_DHT::getHumidity() {
  DHT_CHECK_STATE;
  return _hum;
}

float PietteTech_DHT::getFahrenheit() {
 80a076e:	4604      	mov	r4, r0
  DHT_CHECK_STATE;
 80a0770:	2b03      	cmp	r3, #3
 80a0772:	d103      	bne.n	80a077c <_ZN14PietteTech_DHT13getFahrenheitEv+0x14>
 80a0774:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80a0776:	f003 fbc3 	bl	80a3f00 <__aeabi_i2f>
 80a077a:	bd10      	pop	{r4, pc}
 80a077c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80a0780:	2b02      	cmp	r3, #2
 80a0782:	d110      	bne.n	80a07a6 <_ZN14PietteTech_DHT13getFahrenheitEv+0x3e>
 80a0784:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80a0788:	b10b      	cbz	r3, 80a078e <_ZN14PietteTech_DHT13getFahrenheitEv+0x26>
 80a078a:	f7ff ff41 	bl	80a0610 <_ZN14PietteTech_DHT7convertEv>
  return _temp * 9 / 5 + 32;
 80a078e:	4907      	ldr	r1, [pc, #28]	; (80a07ac <_ZN14PietteTech_DHT13getFahrenheitEv+0x44>)
 80a0790:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80a0792:	f003 fc09 	bl	80a3fa8 <__aeabi_fmul>
 80a0796:	4906      	ldr	r1, [pc, #24]	; (80a07b0 <_ZN14PietteTech_DHT13getFahrenheitEv+0x48>)
 80a0798:	f003 fcba 	bl	80a4110 <__aeabi_fdiv>
 80a079c:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 80a07a0:	f003 fafa 	bl	80a3d98 <__addsf3>
 80a07a4:	bd10      	pop	{r4, pc}
  DHT_CHECK_STATE;
  return _hum;
}

float PietteTech_DHT::getFahrenheit() {
  DHT_CHECK_STATE;
 80a07a6:	4803      	ldr	r0, [pc, #12]	; (80a07b4 <_ZN14PietteTech_DHT13getFahrenheitEv+0x4c>)
  return _temp * 9 / 5 + 32;
}
 80a07a8:	bd10      	pop	{r4, pc}
 80a07aa:	bf00      	nop
 80a07ac:	41100000 	.word	0x41100000
 80a07b0:	40a00000 	.word	0x40a00000
 80a07b4:	c0a00000 	.word	0xc0a00000

080a07b8 <_ZN14PietteTech_DHT9getKelvinEv>:

float PietteTech_DHT::getKelvin() {
 80a07b8:	b510      	push	{r4, lr}
  DHT_CHECK_STATE;
 80a07ba:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
float PietteTech_DHT::getFahrenheit() {
  DHT_CHECK_STATE;
  return _temp * 9 / 5 + 32;
}

float PietteTech_DHT::getKelvin() {
 80a07be:	4604      	mov	r4, r0
  DHT_CHECK_STATE;
 80a07c0:	2b03      	cmp	r3, #3
 80a07c2:	d103      	bne.n	80a07cc <_ZN14PietteTech_DHT9getKelvinEv+0x14>
 80a07c4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80a07c6:	f003 fb9b 	bl	80a3f00 <__aeabi_i2f>
 80a07ca:	bd10      	pop	{r4, pc}
 80a07cc:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80a07d0:	2b02      	cmp	r3, #2
 80a07d2:	d10f      	bne.n	80a07f4 <_ZN14PietteTech_DHT9getKelvinEv+0x3c>
 80a07d4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80a07d8:	b10b      	cbz	r3, 80a07de <_ZN14PietteTech_DHT9getKelvinEv+0x26>
 80a07da:	f7ff ff19 	bl	80a0610 <_ZN14PietteTech_DHT7convertEv>
  return _temp + 273.15;
 80a07de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80a07e0:	f002 ff38 	bl	80a3654 <__aeabi_f2d>
 80a07e4:	a304      	add	r3, pc, #16	; (adr r3, 80a07f8 <_ZN14PietteTech_DHT9getKelvinEv+0x40>)
 80a07e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a07ea:	f002 fdd5 	bl	80a3398 <__adddf3>
 80a07ee:	f003 fa7d 	bl	80a3cec <__aeabi_d2f>
 80a07f2:	bd10      	pop	{r4, pc}
  DHT_CHECK_STATE;
  return _temp * 9 / 5 + 32;
}

float PietteTech_DHT::getKelvin() {
  DHT_CHECK_STATE;
 80a07f4:	4802      	ldr	r0, [pc, #8]	; (80a0800 <_ZN14PietteTech_DHT9getKelvinEv+0x48>)
  return _temp + 273.15;
}
 80a07f6:	bd10      	pop	{r4, pc}
 80a07f8:	66666666 	.word	0x66666666
 80a07fc:	40711266 	.word	0x40711266
 80a0800:	c0a00000 	.word	0xc0a00000
 80a0804:	00000000 	.word	0x00000000

080a0808 <_ZN14PietteTech_DHT11getDewPointEv>:
}

// delta max = 0.6544 wrt dewPoint()
// 5x faster than dewPoint()
// reference: http://en.wikipedia.org/wiki/Dew_point
double PietteTech_DHT::getDewPoint() {
 80a0808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  DHT_CHECK_STATE;
 80a080c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
}

// delta max = 0.6544 wrt dewPoint()
// 5x faster than dewPoint()
// reference: http://en.wikipedia.org/wiki/Dew_point
double PietteTech_DHT::getDewPoint() {
 80a0810:	4604      	mov	r4, r0
  DHT_CHECK_STATE;
 80a0812:	2b03      	cmp	r3, #3
 80a0814:	d104      	bne.n	80a0820 <_ZN14PietteTech_DHT11getDewPointEv+0x18>
 80a0816:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80a0818:	f002 ff0a 	bl	80a3630 <__aeabi_i2d>
 80a081c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a0820:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80a0824:	2b02      	cmp	r3, #2
 80a0826:	d146      	bne.n	80a08b6 <_ZN14PietteTech_DHT11getDewPointEv+0xae>
 80a0828:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80a082c:	b10b      	cbz	r3, 80a0832 <_ZN14PietteTech_DHT11getDewPointEv+0x2a>
 80a082e:	f7ff feef 	bl	80a0610 <_ZN14PietteTech_DHT7convertEv>
  double a = 17.271;
  double b = 237.7;
  double temp_ = (a * (double)_temp) / (b + (double)_temp) + log((double)_hum / 100);
 80a0832:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80a0834:	f002 ff0e 	bl	80a3654 <__aeabi_f2d>
 80a0838:	4606      	mov	r6, r0
 80a083a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80a083c:	460f      	mov	r7, r1
 80a083e:	f002 ff09 	bl	80a3654 <__aeabi_f2d>
 80a0842:	2200      	movs	r2, #0
 80a0844:	4b22      	ldr	r3, [pc, #136]	; (80a08d0 <_ZN14PietteTech_DHT11getDewPointEv+0xc8>)
 80a0846:	f003 f883 	bl	80a3950 <__aeabi_ddiv>
 80a084a:	f001 f941 	bl	80a1ad0 <log>
 80a084e:	a31c      	add	r3, pc, #112	; (adr r3, 80a08c0 <_ZN14PietteTech_DHT11getDewPointEv+0xb8>)
 80a0850:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0854:	4604      	mov	r4, r0
 80a0856:	460d      	mov	r5, r1
 80a0858:	4630      	mov	r0, r6
 80a085a:	4639      	mov	r1, r7
 80a085c:	f002 ff4e 	bl	80a36fc <__aeabi_dmul>
 80a0860:	a319      	add	r3, pc, #100	; (adr r3, 80a08c8 <_ZN14PietteTech_DHT11getDewPointEv+0xc0>)
 80a0862:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0866:	4680      	mov	r8, r0
 80a0868:	4689      	mov	r9, r1
 80a086a:	4630      	mov	r0, r6
 80a086c:	4639      	mov	r1, r7
 80a086e:	f002 fd93 	bl	80a3398 <__adddf3>
 80a0872:	4602      	mov	r2, r0
 80a0874:	460b      	mov	r3, r1
 80a0876:	4640      	mov	r0, r8
 80a0878:	4649      	mov	r1, r9
 80a087a:	f003 f869 	bl	80a3950 <__aeabi_ddiv>
 80a087e:	4622      	mov	r2, r4
 80a0880:	462b      	mov	r3, r5
 80a0882:	f002 fd89 	bl	80a3398 <__adddf3>
  double Td = (b * temp_) / (a - temp_);
 80a0886:	a310      	add	r3, pc, #64	; (adr r3, 80a08c8 <_ZN14PietteTech_DHT11getDewPointEv+0xc0>)
 80a0888:	e9d3 2300 	ldrd	r2, r3, [r3]
// reference: http://en.wikipedia.org/wiki/Dew_point
double PietteTech_DHT::getDewPoint() {
  DHT_CHECK_STATE;
  double a = 17.271;
  double b = 237.7;
  double temp_ = (a * (double)_temp) / (b + (double)_temp) + log((double)_hum / 100);
 80a088c:	4606      	mov	r6, r0
 80a088e:	460f      	mov	r7, r1
  double Td = (b * temp_) / (a - temp_);
 80a0890:	f002 ff34 	bl	80a36fc <__aeabi_dmul>
 80a0894:	4632      	mov	r2, r6
 80a0896:	4604      	mov	r4, r0
 80a0898:	460d      	mov	r5, r1
 80a089a:	a109      	add	r1, pc, #36	; (adr r1, 80a08c0 <_ZN14PietteTech_DHT11getDewPointEv+0xb8>)
 80a089c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a08a0:	463b      	mov	r3, r7
 80a08a2:	f002 fd77 	bl	80a3394 <__aeabi_dsub>
 80a08a6:	4602      	mov	r2, r0
 80a08a8:	460b      	mov	r3, r1
 80a08aa:	4620      	mov	r0, r4
 80a08ac:	4629      	mov	r1, r5
 80a08ae:	f003 f84f 	bl	80a3950 <__aeabi_ddiv>
  return Td;
 80a08b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

// delta max = 0.6544 wrt dewPoint()
// 5x faster than dewPoint()
// reference: http://en.wikipedia.org/wiki/Dew_point
double PietteTech_DHT::getDewPoint() {
  DHT_CHECK_STATE;
 80a08b6:	2000      	movs	r0, #0
 80a08b8:	4906      	ldr	r1, [pc, #24]	; (80a08d4 <_ZN14PietteTech_DHT11getDewPointEv+0xcc>)
  double a = 17.271;
  double b = 237.7;
  double temp_ = (a * (double)_temp) / (b + (double)_temp) + log((double)_hum / 100);
  double Td = (b * temp_) / (a - temp_);
  return Td;
}
 80a08ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a08be:	bf00      	nop
 80a08c0:	4189374c 	.word	0x4189374c
 80a08c4:	40314560 	.word	0x40314560
 80a08c8:	66666666 	.word	0x66666666
 80a08cc:	406db666 	.word	0x406db666
 80a08d0:	40590000 	.word	0x40590000
 80a08d4:	c0140000 	.word	0xc0140000

080a08d8 <_ZN14PietteTech_DHT15getDewPointSlowEv>:

// dewPoint function NOAA
// reference: http://wahiduddin.net/calc/density_algorithms.htm
double PietteTech_DHT::getDewPointSlow() {
 80a08d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  DHT_CHECK_STATE;
 80a08dc:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
  return Td;
}

// dewPoint function NOAA
// reference: http://wahiduddin.net/calc/density_algorithms.htm
double PietteTech_DHT::getDewPointSlow() {
 80a08e0:	4682      	mov	sl, r0
  DHT_CHECK_STATE;
 80a08e2:	2b03      	cmp	r3, #3
 80a08e4:	d104      	bne.n	80a08f0 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x18>
 80a08e6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80a08e8:	f002 fea2 	bl	80a3630 <__aeabi_i2d>
 80a08ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a08f0:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80a08f4:	2b02      	cmp	r3, #2
 80a08f6:	f040 80ab 	bne.w	80a0a50 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x178>
 80a08fa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80a08fe:	b10b      	cbz	r3, 80a0904 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x2c>
 80a0900:	f7ff fe86 	bl	80a0610 <_ZN14PietteTech_DHT7convertEv>
  double a0 = (double) 373.15 / (273.15 + (double)_temp);
 80a0904:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 80a0908:	f002 fea4 	bl	80a3654 <__aeabi_f2d>
 80a090c:	a352      	add	r3, pc, #328	; (adr r3, 80a0a58 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x180>)
 80a090e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0912:	f002 fd41 	bl	80a3398 <__adddf3>
 80a0916:	4602      	mov	r2, r0
 80a0918:	460b      	mov	r3, r1
 80a091a:	a151      	add	r1, pc, #324	; (adr r1, 80a0a60 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x188>)
 80a091c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a0920:	f003 f816 	bl	80a3950 <__aeabi_ddiv>
  double SUM = (double)-7.90298 * (a0 - 1.0);
 80a0924:	2200      	movs	r2, #0
 80a0926:	4b64      	ldr	r3, [pc, #400]	; (80a0ab8 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e0>)

// dewPoint function NOAA
// reference: http://wahiduddin.net/calc/density_algorithms.htm
double PietteTech_DHT::getDewPointSlow() {
  DHT_CHECK_STATE;
  double a0 = (double) 373.15 / (273.15 + (double)_temp);
 80a0928:	4604      	mov	r4, r0
 80a092a:	460d      	mov	r5, r1
  double SUM = (double)-7.90298 * (a0 - 1.0);
 80a092c:	f002 fd32 	bl	80a3394 <__aeabi_dsub>
 80a0930:	a34d      	add	r3, pc, #308	; (adr r3, 80a0a68 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x190>)
 80a0932:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0936:	4606      	mov	r6, r0
 80a0938:	460f      	mov	r7, r1
 80a093a:	f002 fedf 	bl	80a36fc <__aeabi_dmul>
 80a093e:	4680      	mov	r8, r0
 80a0940:	4689      	mov	r9, r1
  SUM += 5.02808 * log10(a0);
 80a0942:	4620      	mov	r0, r4
 80a0944:	4629      	mov	r1, r5
 80a0946:	f001 f943 	bl	80a1bd0 <log10>
 80a094a:	a349      	add	r3, pc, #292	; (adr r3, 80a0a70 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x198>)
 80a094c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0950:	f002 fed4 	bl	80a36fc <__aeabi_dmul>
 80a0954:	4642      	mov	r2, r8
 80a0956:	464b      	mov	r3, r9
 80a0958:	f002 fd1e 	bl	80a3398 <__adddf3>
  SUM += -1.3816e-7 * (pow(10, (11.344*(1 - 1 / a0))) - 1);
 80a095c:	4622      	mov	r2, r4
// reference: http://wahiduddin.net/calc/density_algorithms.htm
double PietteTech_DHT::getDewPointSlow() {
  DHT_CHECK_STATE;
  double a0 = (double) 373.15 / (273.15 + (double)_temp);
  double SUM = (double)-7.90298 * (a0 - 1.0);
  SUM += 5.02808 * log10(a0);
 80a095e:	4680      	mov	r8, r0
 80a0960:	4689      	mov	r9, r1
  SUM += -1.3816e-7 * (pow(10, (11.344*(1 - 1 / a0))) - 1);
 80a0962:	462b      	mov	r3, r5
 80a0964:	2000      	movs	r0, #0
 80a0966:	4954      	ldr	r1, [pc, #336]	; (80a0ab8 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e0>)
 80a0968:	f002 fff2 	bl	80a3950 <__aeabi_ddiv>
 80a096c:	4602      	mov	r2, r0
 80a096e:	460b      	mov	r3, r1
 80a0970:	2000      	movs	r0, #0
 80a0972:	4951      	ldr	r1, [pc, #324]	; (80a0ab8 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e0>)
 80a0974:	f002 fd0e 	bl	80a3394 <__aeabi_dsub>
 80a0978:	a33f      	add	r3, pc, #252	; (adr r3, 80a0a78 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1a0>)
 80a097a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a097e:	f002 febd 	bl	80a36fc <__aeabi_dmul>
 80a0982:	4602      	mov	r2, r0
 80a0984:	460b      	mov	r3, r1
 80a0986:	2000      	movs	r0, #0
 80a0988:	494c      	ldr	r1, [pc, #304]	; (80a0abc <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e4>)
 80a098a:	f001 f9a3 	bl	80a1cd4 <pow>
 80a098e:	2200      	movs	r2, #0
 80a0990:	4b49      	ldr	r3, [pc, #292]	; (80a0ab8 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e0>)
 80a0992:	f002 fcff 	bl	80a3394 <__aeabi_dsub>
 80a0996:	a33a      	add	r3, pc, #232	; (adr r3, 80a0a80 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1a8>)
 80a0998:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a099c:	f002 feae 	bl	80a36fc <__aeabi_dmul>
 80a09a0:	4642      	mov	r2, r8
 80a09a2:	464b      	mov	r3, r9
 80a09a4:	f002 fcf8 	bl	80a3398 <__adddf3>
  SUM += 8.1328e-3 * (pow(10, (-3.49149*(a0 - 1))) - 1);
 80a09a8:	a337      	add	r3, pc, #220	; (adr r3, 80a0a88 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1b0>)
 80a09aa:	e9d3 2300 	ldrd	r2, r3, [r3]
double PietteTech_DHT::getDewPointSlow() {
  DHT_CHECK_STATE;
  double a0 = (double) 373.15 / (273.15 + (double)_temp);
  double SUM = (double)-7.90298 * (a0 - 1.0);
  SUM += 5.02808 * log10(a0);
  SUM += -1.3816e-7 * (pow(10, (11.344*(1 - 1 / a0))) - 1);
 80a09ae:	4604      	mov	r4, r0
 80a09b0:	460d      	mov	r5, r1
  SUM += 8.1328e-3 * (pow(10, (-3.49149*(a0 - 1))) - 1);
 80a09b2:	4630      	mov	r0, r6
 80a09b4:	4639      	mov	r1, r7
 80a09b6:	f002 fea1 	bl	80a36fc <__aeabi_dmul>
 80a09ba:	4602      	mov	r2, r0
 80a09bc:	460b      	mov	r3, r1
 80a09be:	2000      	movs	r0, #0
 80a09c0:	493e      	ldr	r1, [pc, #248]	; (80a0abc <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e4>)
 80a09c2:	f001 f987 	bl	80a1cd4 <pow>
 80a09c6:	2200      	movs	r2, #0
 80a09c8:	4b3b      	ldr	r3, [pc, #236]	; (80a0ab8 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e0>)
 80a09ca:	f002 fce3 	bl	80a3394 <__aeabi_dsub>
 80a09ce:	a330      	add	r3, pc, #192	; (adr r3, 80a0a90 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1b8>)
 80a09d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a09d4:	f002 fe92 	bl	80a36fc <__aeabi_dmul>
 80a09d8:	4622      	mov	r2, r4
 80a09da:	462b      	mov	r3, r5
 80a09dc:	f002 fcdc 	bl	80a3398 <__adddf3>
  SUM += log10(1013.246);
  double VP = pow(10, SUM - 3) * (double)_hum;
 80a09e0:	a32d      	add	r3, pc, #180	; (adr r3, 80a0a98 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1c0>)
 80a09e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a09e6:	f002 fcd7 	bl	80a3398 <__adddf3>
 80a09ea:	2200      	movs	r2, #0
 80a09ec:	4b34      	ldr	r3, [pc, #208]	; (80a0ac0 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e8>)
 80a09ee:	f002 fcd1 	bl	80a3394 <__aeabi_dsub>
 80a09f2:	4602      	mov	r2, r0
 80a09f4:	460b      	mov	r3, r1
 80a09f6:	2000      	movs	r0, #0
 80a09f8:	4930      	ldr	r1, [pc, #192]	; (80a0abc <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e4>)
 80a09fa:	f001 f96b 	bl	80a1cd4 <pow>
 80a09fe:	4604      	mov	r4, r0
 80a0a00:	460d      	mov	r5, r1
  double T = log(VP / 0.61078); // temp var
 80a0a02:	f8da 0054 	ldr.w	r0, [sl, #84]	; 0x54
 80a0a06:	f002 fe25 	bl	80a3654 <__aeabi_f2d>
 80a0a0a:	4622      	mov	r2, r4
 80a0a0c:	462b      	mov	r3, r5
 80a0a0e:	f002 fe75 	bl	80a36fc <__aeabi_dmul>
 80a0a12:	a323      	add	r3, pc, #140	; (adr r3, 80a0aa0 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1c8>)
 80a0a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0a18:	f002 ff9a 	bl	80a3950 <__aeabi_ddiv>
 80a0a1c:	f001 f858 	bl	80a1ad0 <log>
  return (241.88 * T) / (17.558 - T);
 80a0a20:	a321      	add	r3, pc, #132	; (adr r3, 80a0aa8 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1d0>)
 80a0a22:	e9d3 2300 	ldrd	r2, r3, [r3]
  SUM += 5.02808 * log10(a0);
  SUM += -1.3816e-7 * (pow(10, (11.344*(1 - 1 / a0))) - 1);
  SUM += 8.1328e-3 * (pow(10, (-3.49149*(a0 - 1))) - 1);
  SUM += log10(1013.246);
  double VP = pow(10, SUM - 3) * (double)_hum;
  double T = log(VP / 0.61078); // temp var
 80a0a26:	4606      	mov	r6, r0
 80a0a28:	460f      	mov	r7, r1
  return (241.88 * T) / (17.558 - T);
 80a0a2a:	f002 fe67 	bl	80a36fc <__aeabi_dmul>
 80a0a2e:	4632      	mov	r2, r6
 80a0a30:	4604      	mov	r4, r0
 80a0a32:	460d      	mov	r5, r1
 80a0a34:	a11e      	add	r1, pc, #120	; (adr r1, 80a0ab0 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1d8>)
 80a0a36:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a0a3a:	463b      	mov	r3, r7
 80a0a3c:	f002 fcaa 	bl	80a3394 <__aeabi_dsub>
 80a0a40:	4602      	mov	r2, r0
 80a0a42:	460b      	mov	r3, r1
 80a0a44:	4620      	mov	r0, r4
 80a0a46:	4629      	mov	r1, r5
 80a0a48:	f002 ff82 	bl	80a3950 <__aeabi_ddiv>
 80a0a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
}

// dewPoint function NOAA
// reference: http://wahiduddin.net/calc/density_algorithms.htm
double PietteTech_DHT::getDewPointSlow() {
  DHT_CHECK_STATE;
 80a0a50:	2000      	movs	r0, #0
 80a0a52:	491c      	ldr	r1, [pc, #112]	; (80a0ac4 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1ec>)
  SUM += 8.1328e-3 * (pow(10, (-3.49149*(a0 - 1))) - 1);
  SUM += log10(1013.246);
  double VP = pow(10, SUM - 3) * (double)_hum;
  double T = log(VP / 0.61078); // temp var
  return (241.88 * T) / (17.558 - T);
}
 80a0a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a0a58:	66666666 	.word	0x66666666
 80a0a5c:	40711266 	.word	0x40711266
 80a0a60:	66666666 	.word	0x66666666
 80a0a64:	40775266 	.word	0x40775266
 80a0a68:	ca03c4b1 	.word	0xca03c4b1
 80a0a6c:	c01f9ca6 	.word	0xc01f9ca6
 80a0a70:	00e6afcd 	.word	0x00e6afcd
 80a0a74:	40141cc1 	.word	0x40141cc1
 80a0a78:	c49ba5e3 	.word	0xc49ba5e3
 80a0a7c:	4026b020 	.word	0x4026b020
 80a0a80:	36423db1 	.word	0x36423db1
 80a0a84:	be828b24 	.word	0xbe828b24
 80a0a88:	4f227d03 	.word	0x4f227d03
 80a0a8c:	c00bee92 	.word	0xc00bee92
 80a0a90:	f0330363 	.word	0xf0330363
 80a0a94:	3f80a7ed 	.word	0x3f80a7ed
 80a0a98:	409e541b 	.word	0x409e541b
 80a0a9c:	40080bb4 	.word	0x40080bb4
 80a0aa0:	7fa1a0cf 	.word	0x7fa1a0cf
 80a0aa4:	3fe38b82 	.word	0x3fe38b82
 80a0aa8:	f5c28f5c 	.word	0xf5c28f5c
 80a0aac:	406e3c28 	.word	0x406e3c28
 80a0ab0:	16872b02 	.word	0x16872b02
 80a0ab4:	40318ed9 	.word	0x40318ed9
 80a0ab8:	3ff00000 	.word	0x3ff00000
 80a0abc:	40240000 	.word	0x40240000
 80a0ac0:	40080000 	.word	0x40080000
 80a0ac4:	c0140000 	.word	0xc0140000

080a0ac8 <_GLOBAL__sub_I__Z4wordhh>:
 80a0ac8:	f000 b836 	b.w	80a0b38 <HAL_Pin_Map>

080a0acc <_GLOBAL__sub_I__Z10BlynkResetv>:
 80a0acc:	f000 b834 	b.w	80a0b38 <HAL_Pin_Map>

080a0ad0 <_GLOBAL__sub_I_BlynkNoOpCbk>:
 80a0ad0:	f000 b832 	b.w	80a0b38 <HAL_Pin_Map>

080a0ad4 <_GLOBAL__sub_I__ZN10BlynkTimerC2Ev>:
 80a0ad4:	f000 b830 	b.w	80a0b38 <HAL_Pin_Map>

080a0ad8 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a0ad8:	b508      	push	{r3, lr}
 80a0ada:	4b02      	ldr	r3, [pc, #8]	; (80a0ae4 <os_mutex_create+0xc>)
 80a0adc:	681b      	ldr	r3, [r3, #0]
 80a0ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0ae0:	9301      	str	r3, [sp, #4]
 80a0ae2:	bd08      	pop	{r3, pc}
 80a0ae4:	080601d0 	.word	0x080601d0

080a0ae8 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 80a0ae8:	b508      	push	{r3, lr}
 80a0aea:	4b02      	ldr	r3, [pc, #8]	; (80a0af4 <HAL_Core_Get_Last_Reset_Info+0xc>)
 80a0aec:	681b      	ldr	r3, [r3, #0]
 80a0aee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0af0:	9301      	str	r3, [sp, #4]
 80a0af2:	bd08      	pop	{r3, pc}
 80a0af4:	080601b8 	.word	0x080601b8

080a0af8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0af8:	b508      	push	{r3, lr}
 80a0afa:	4b02      	ldr	r3, [pc, #8]	; (80a0b04 <HAL_RNG_GetRandomNumber+0xc>)
 80a0afc:	681b      	ldr	r3, [r3, #0]
 80a0afe:	685b      	ldr	r3, [r3, #4]
 80a0b00:	9301      	str	r3, [sp, #4]
 80a0b02:	bd08      	pop	{r3, pc}
 80a0b04:	0806019c 	.word	0x0806019c

080a0b08 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a0b08:	b508      	push	{r3, lr}
 80a0b0a:	4b02      	ldr	r3, [pc, #8]	; (80a0b14 <HAL_Delay_Microseconds+0xc>)
 80a0b0c:	681b      	ldr	r3, [r3, #0]
 80a0b0e:	68db      	ldr	r3, [r3, #12]
 80a0b10:	9301      	str	r3, [sp, #4]
 80a0b12:	bd08      	pop	{r3, pc}
 80a0b14:	0806019c 	.word	0x0806019c

080a0b18 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a0b18:	b508      	push	{r3, lr}
 80a0b1a:	4b02      	ldr	r3, [pc, #8]	; (80a0b24 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a0b1c:	681b      	ldr	r3, [r3, #0]
 80a0b1e:	691b      	ldr	r3, [r3, #16]
 80a0b20:	9301      	str	r3, [sp, #4]
 80a0b22:	bd08      	pop	{r3, pc}
 80a0b24:	0806019c 	.word	0x0806019c

080a0b28 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0b28:	b508      	push	{r3, lr}
 80a0b2a:	4b02      	ldr	r3, [pc, #8]	; (80a0b34 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0b2c:	681b      	ldr	r3, [r3, #0]
 80a0b2e:	695b      	ldr	r3, [r3, #20]
 80a0b30:	9301      	str	r3, [sp, #4]
 80a0b32:	bd08      	pop	{r3, pc}
 80a0b34:	0806019c 	.word	0x0806019c

080a0b38 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a0b38:	b508      	push	{r3, lr}
 80a0b3a:	4b02      	ldr	r3, [pc, #8]	; (80a0b44 <HAL_Pin_Map+0xc>)
 80a0b3c:	681b      	ldr	r3, [r3, #0]
 80a0b3e:	681b      	ldr	r3, [r3, #0]
 80a0b40:	9301      	str	r3, [sp, #4]
 80a0b42:	bd08      	pop	{r3, pc}
 80a0b44:	080601b0 	.word	0x080601b0

080a0b48 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0b48:	b508      	push	{r3, lr}
 80a0b4a:	4b02      	ldr	r3, [pc, #8]	; (80a0b54 <HAL_Pin_Mode+0xc>)
 80a0b4c:	681b      	ldr	r3, [r3, #0]
 80a0b4e:	689b      	ldr	r3, [r3, #8]
 80a0b50:	9301      	str	r3, [sp, #4]
 80a0b52:	bd08      	pop	{r3, pc}
 80a0b54:	080601b0 	.word	0x080601b0

080a0b58 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0b58:	b508      	push	{r3, lr}
 80a0b5a:	4b02      	ldr	r3, [pc, #8]	; (80a0b64 <HAL_Get_Pin_Mode+0xc>)
 80a0b5c:	681b      	ldr	r3, [r3, #0]
 80a0b5e:	68db      	ldr	r3, [r3, #12]
 80a0b60:	9301      	str	r3, [sp, #4]
 80a0b62:	bd08      	pop	{r3, pc}
 80a0b64:	080601b0 	.word	0x080601b0

080a0b68 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0b68:	b508      	push	{r3, lr}
 80a0b6a:	4b02      	ldr	r3, [pc, #8]	; (80a0b74 <HAL_GPIO_Write+0xc>)
 80a0b6c:	681b      	ldr	r3, [r3, #0]
 80a0b6e:	691b      	ldr	r3, [r3, #16]
 80a0b70:	9301      	str	r3, [sp, #4]
 80a0b72:	bd08      	pop	{r3, pc}
 80a0b74:	080601b0 	.word	0x080601b0

080a0b78 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 80a0b78:	b508      	push	{r3, lr}
 80a0b7a:	4b02      	ldr	r3, [pc, #8]	; (80a0b84 <HAL_Interrupts_Attach+0xc>)
 80a0b7c:	681b      	ldr	r3, [r3, #0]
 80a0b7e:	699b      	ldr	r3, [r3, #24]
 80a0b80:	9301      	str	r3, [sp, #4]
 80a0b82:	bd08      	pop	{r3, pc}
 80a0b84:	080601b0 	.word	0x080601b0

080a0b88 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
 80a0b88:	b508      	push	{r3, lr}
 80a0b8a:	4b02      	ldr	r3, [pc, #8]	; (80a0b94 <HAL_Interrupts_Detach+0xc>)
 80a0b8c:	681b      	ldr	r3, [r3, #0]
 80a0b8e:	69db      	ldr	r3, [r3, #28]
 80a0b90:	9301      	str	r3, [sp, #4]
 80a0b92:	bd08      	pop	{r3, pc}
 80a0b94:	080601b0 	.word	0x080601b0

080a0b98 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a0b98:	b508      	push	{r3, lr}
 80a0b9a:	4b02      	ldr	r3, [pc, #8]	; (80a0ba4 <HAL_I2C_Write_Data+0xc>)
 80a0b9c:	681b      	ldr	r3, [r3, #0]
 80a0b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0ba0:	9301      	str	r3, [sp, #4]
 80a0ba2:	bd08      	pop	{r3, pc}
 80a0ba4:	080601ac 	.word	0x080601ac

080a0ba8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a0ba8:	b508      	push	{r3, lr}
 80a0baa:	4b02      	ldr	r3, [pc, #8]	; (80a0bb4 <HAL_I2C_Available_Data+0xc>)
 80a0bac:	681b      	ldr	r3, [r3, #0]
 80a0bae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0bb0:	9301      	str	r3, [sp, #4]
 80a0bb2:	bd08      	pop	{r3, pc}
 80a0bb4:	080601ac 	.word	0x080601ac

080a0bb8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a0bb8:	b508      	push	{r3, lr}
 80a0bba:	4b02      	ldr	r3, [pc, #8]	; (80a0bc4 <HAL_I2C_Read_Data+0xc>)
 80a0bbc:	681b      	ldr	r3, [r3, #0]
 80a0bbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0bc0:	9301      	str	r3, [sp, #4]
 80a0bc2:	bd08      	pop	{r3, pc}
 80a0bc4:	080601ac 	.word	0x080601ac

080a0bc8 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0bc8:	b508      	push	{r3, lr}
 80a0bca:	4b02      	ldr	r3, [pc, #8]	; (80a0bd4 <HAL_I2C_Peek_Data+0xc>)
 80a0bcc:	681b      	ldr	r3, [r3, #0]
 80a0bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0bd0:	9301      	str	r3, [sp, #4]
 80a0bd2:	bd08      	pop	{r3, pc}
 80a0bd4:	080601ac 	.word	0x080601ac

080a0bd8 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a0bd8:	b508      	push	{r3, lr}
 80a0bda:	4b02      	ldr	r3, [pc, #8]	; (80a0be4 <HAL_I2C_Flush_Data+0xc>)
 80a0bdc:	681b      	ldr	r3, [r3, #0]
 80a0bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0be0:	9301      	str	r3, [sp, #4]
 80a0be2:	bd08      	pop	{r3, pc}
 80a0be4:	080601ac 	.word	0x080601ac

080a0be8 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a0be8:	b508      	push	{r3, lr}
 80a0bea:	4b02      	ldr	r3, [pc, #8]	; (80a0bf4 <HAL_I2C_Is_Enabled+0xc>)
 80a0bec:	681b      	ldr	r3, [r3, #0]
 80a0bee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0bf0:	9301      	str	r3, [sp, #4]
 80a0bf2:	bd08      	pop	{r3, pc}
 80a0bf4:	080601ac 	.word	0x080601ac

080a0bf8 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a0bf8:	b508      	push	{r3, lr}
 80a0bfa:	4b03      	ldr	r3, [pc, #12]	; (80a0c08 <HAL_I2C_Init+0x10>)
 80a0bfc:	681b      	ldr	r3, [r3, #0]
 80a0bfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0c02:	9301      	str	r3, [sp, #4]
 80a0c04:	bd08      	pop	{r3, pc}
 80a0c06:	0000      	.short	0x0000
 80a0c08:	080601ac 	.word	0x080601ac

080a0c0c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0c0c:	b508      	push	{r3, lr}
 80a0c0e:	4b02      	ldr	r3, [pc, #8]	; (80a0c18 <HAL_SPI_Init+0xc>)
 80a0c10:	681b      	ldr	r3, [r3, #0]
 80a0c12:	69db      	ldr	r3, [r3, #28]
 80a0c14:	9301      	str	r3, [sp, #4]
 80a0c16:	bd08      	pop	{r3, pc}
 80a0c18:	080601b4 	.word	0x080601b4

080a0c1c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a0c1c:	b508      	push	{r3, lr}
 80a0c1e:	4b02      	ldr	r3, [pc, #8]	; (80a0c28 <HAL_SPI_Is_Enabled+0xc>)
 80a0c20:	681b      	ldr	r3, [r3, #0]
 80a0c22:	6a1b      	ldr	r3, [r3, #32]
 80a0c24:	9301      	str	r3, [sp, #4]
 80a0c26:	bd08      	pop	{r3, pc}
 80a0c28:	080601b4 	.word	0x080601b4

080a0c2c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0c2c:	b508      	push	{r3, lr}
 80a0c2e:	4b02      	ldr	r3, [pc, #8]	; (80a0c38 <HAL_USART_Init+0xc>)
 80a0c30:	681b      	ldr	r3, [r3, #0]
 80a0c32:	699b      	ldr	r3, [r3, #24]
 80a0c34:	9301      	str	r3, [sp, #4]
 80a0c36:	bd08      	pop	{r3, pc}
 80a0c38:	080601c4 	.word	0x080601c4

080a0c3c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0c3c:	b508      	push	{r3, lr}
 80a0c3e:	4b02      	ldr	r3, [pc, #8]	; (80a0c48 <HAL_USART_Write_Data+0xc>)
 80a0c40:	681b      	ldr	r3, [r3, #0]
 80a0c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0c44:	9301      	str	r3, [sp, #4]
 80a0c46:	bd08      	pop	{r3, pc}
 80a0c48:	080601c4 	.word	0x080601c4

080a0c4c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0c4c:	b508      	push	{r3, lr}
 80a0c4e:	4b02      	ldr	r3, [pc, #8]	; (80a0c58 <HAL_USART_Available_Data+0xc>)
 80a0c50:	681b      	ldr	r3, [r3, #0]
 80a0c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0c54:	9301      	str	r3, [sp, #4]
 80a0c56:	bd08      	pop	{r3, pc}
 80a0c58:	080601c4 	.word	0x080601c4

080a0c5c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0c5c:	b508      	push	{r3, lr}
 80a0c5e:	4b02      	ldr	r3, [pc, #8]	; (80a0c68 <HAL_USART_Read_Data+0xc>)
 80a0c60:	681b      	ldr	r3, [r3, #0]
 80a0c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0c64:	9301      	str	r3, [sp, #4]
 80a0c66:	bd08      	pop	{r3, pc}
 80a0c68:	080601c4 	.word	0x080601c4

080a0c6c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0c6c:	b508      	push	{r3, lr}
 80a0c6e:	4b02      	ldr	r3, [pc, #8]	; (80a0c78 <HAL_USART_Peek_Data+0xc>)
 80a0c70:	681b      	ldr	r3, [r3, #0]
 80a0c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0c74:	9301      	str	r3, [sp, #4]
 80a0c76:	bd08      	pop	{r3, pc}
 80a0c78:	080601c4 	.word	0x080601c4

080a0c7c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0c7c:	b508      	push	{r3, lr}
 80a0c7e:	4b02      	ldr	r3, [pc, #8]	; (80a0c88 <HAL_USART_Flush_Data+0xc>)
 80a0c80:	681b      	ldr	r3, [r3, #0]
 80a0c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0c84:	9301      	str	r3, [sp, #4]
 80a0c86:	bd08      	pop	{r3, pc}
 80a0c88:	080601c4 	.word	0x080601c4

080a0c8c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0c8c:	b508      	push	{r3, lr}
 80a0c8e:	4b02      	ldr	r3, [pc, #8]	; (80a0c98 <HAL_USART_Is_Enabled+0xc>)
 80a0c90:	681b      	ldr	r3, [r3, #0]
 80a0c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0c94:	9301      	str	r3, [sp, #4]
 80a0c96:	bd08      	pop	{r3, pc}
 80a0c98:	080601c4 	.word	0x080601c4

080a0c9c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0c9c:	b508      	push	{r3, lr}
 80a0c9e:	4b02      	ldr	r3, [pc, #8]	; (80a0ca8 <HAL_USART_Available_Data_For_Write+0xc>)
 80a0ca0:	681b      	ldr	r3, [r3, #0]
 80a0ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0ca4:	9301      	str	r3, [sp, #4]
 80a0ca6:	bd08      	pop	{r3, pc}
 80a0ca8:	080601c4 	.word	0x080601c4

080a0cac <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0cac:	b508      	push	{r3, lr}
 80a0cae:	4b02      	ldr	r3, [pc, #8]	; (80a0cb8 <HAL_USB_USART_Init+0xc>)
 80a0cb0:	681b      	ldr	r3, [r3, #0]
 80a0cb2:	681b      	ldr	r3, [r3, #0]
 80a0cb4:	9301      	str	r3, [sp, #4]
 80a0cb6:	bd08      	pop	{r3, pc}
 80a0cb8:	080601d8 	.word	0x080601d8

080a0cbc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0cbc:	b508      	push	{r3, lr}
 80a0cbe:	4b02      	ldr	r3, [pc, #8]	; (80a0cc8 <HAL_USB_USART_Begin+0xc>)
 80a0cc0:	681b      	ldr	r3, [r3, #0]
 80a0cc2:	685b      	ldr	r3, [r3, #4]
 80a0cc4:	9301      	str	r3, [sp, #4]
 80a0cc6:	bd08      	pop	{r3, pc}
 80a0cc8:	080601d8 	.word	0x080601d8

080a0ccc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0ccc:	b508      	push	{r3, lr}
 80a0cce:	4b02      	ldr	r3, [pc, #8]	; (80a0cd8 <HAL_USB_USART_Available_Data+0xc>)
 80a0cd0:	681b      	ldr	r3, [r3, #0]
 80a0cd2:	691b      	ldr	r3, [r3, #16]
 80a0cd4:	9301      	str	r3, [sp, #4]
 80a0cd6:	bd08      	pop	{r3, pc}
 80a0cd8:	080601d8 	.word	0x080601d8

080a0cdc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0cdc:	b508      	push	{r3, lr}
 80a0cde:	4b02      	ldr	r3, [pc, #8]	; (80a0ce8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0ce0:	681b      	ldr	r3, [r3, #0]
 80a0ce2:	695b      	ldr	r3, [r3, #20]
 80a0ce4:	9301      	str	r3, [sp, #4]
 80a0ce6:	bd08      	pop	{r3, pc}
 80a0ce8:	080601d8 	.word	0x080601d8

080a0cec <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0cec:	b508      	push	{r3, lr}
 80a0cee:	4b02      	ldr	r3, [pc, #8]	; (80a0cf8 <HAL_USB_USART_Receive_Data+0xc>)
 80a0cf0:	681b      	ldr	r3, [r3, #0]
 80a0cf2:	699b      	ldr	r3, [r3, #24]
 80a0cf4:	9301      	str	r3, [sp, #4]
 80a0cf6:	bd08      	pop	{r3, pc}
 80a0cf8:	080601d8 	.word	0x080601d8

080a0cfc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0cfc:	b508      	push	{r3, lr}
 80a0cfe:	4b02      	ldr	r3, [pc, #8]	; (80a0d08 <HAL_USB_USART_Send_Data+0xc>)
 80a0d00:	681b      	ldr	r3, [r3, #0]
 80a0d02:	69db      	ldr	r3, [r3, #28]
 80a0d04:	9301      	str	r3, [sp, #4]
 80a0d06:	bd08      	pop	{r3, pc}
 80a0d08:	080601d8 	.word	0x080601d8

080a0d0c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0d0c:	b508      	push	{r3, lr}
 80a0d0e:	4b02      	ldr	r3, [pc, #8]	; (80a0d18 <HAL_USB_USART_Flush_Data+0xc>)
 80a0d10:	681b      	ldr	r3, [r3, #0]
 80a0d12:	6a1b      	ldr	r3, [r3, #32]
 80a0d14:	9301      	str	r3, [sp, #4]
 80a0d16:	bd08      	pop	{r3, pc}
 80a0d18:	080601d8 	.word	0x080601d8

080a0d1c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0d1c:	b508      	push	{r3, lr}
 80a0d1e:	4b02      	ldr	r3, [pc, #8]	; (80a0d28 <set_system_mode+0xc>)
 80a0d20:	681b      	ldr	r3, [r3, #0]
 80a0d22:	685b      	ldr	r3, [r3, #4]
 80a0d24:	9301      	str	r3, [sp, #4]
 80a0d26:	bd08      	pop	{r3, pc}
 80a0d28:	080601a4 	.word	0x080601a4

080a0d2c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0d2c:	b508      	push	{r3, lr}
 80a0d2e:	4b02      	ldr	r3, [pc, #8]	; (80a0d38 <system_delay_ms+0xc>)
 80a0d30:	681b      	ldr	r3, [r3, #0]
 80a0d32:	695b      	ldr	r3, [r3, #20]
 80a0d34:	9301      	str	r3, [sp, #4]
 80a0d36:	bd08      	pop	{r3, pc}
 80a0d38:	080601a4 	.word	0x080601a4

080a0d3c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0d3c:	b508      	push	{r3, lr}
 80a0d3e:	4b03      	ldr	r3, [pc, #12]	; (80a0d4c <system_ctrl_set_app_request_handler+0x10>)
 80a0d40:	681b      	ldr	r3, [r3, #0]
 80a0d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0d46:	9301      	str	r3, [sp, #4]
 80a0d48:	bd08      	pop	{r3, pc}
 80a0d4a:	0000      	.short	0x0000
 80a0d4c:	080601a4 	.word	0x080601a4

080a0d50 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0d50:	b508      	push	{r3, lr}
 80a0d52:	4b03      	ldr	r3, [pc, #12]	; (80a0d60 <system_ctrl_set_result+0x10>)
 80a0d54:	681b      	ldr	r3, [r3, #0]
 80a0d56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0d5a:	9301      	str	r3, [sp, #4]
 80a0d5c:	bd08      	pop	{r3, pc}
 80a0d5e:	0000      	.short	0x0000
 80a0d60:	080601a4 	.word	0x080601a4

080a0d64 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a0d64:	b508      	push	{r3, lr}
 80a0d66:	4b02      	ldr	r3, [pc, #8]	; (80a0d70 <spark_process+0xc>)
 80a0d68:	681b      	ldr	r3, [r3, #0]
 80a0d6a:	689b      	ldr	r3, [r3, #8]
 80a0d6c:	9301      	str	r3, [sp, #4]
 80a0d6e:	bd08      	pop	{r3, pc}
 80a0d70:	080601cc 	.word	0x080601cc

080a0d74 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0d74:	b508      	push	{r3, lr}
 80a0d76:	4b02      	ldr	r3, [pc, #8]	; (80a0d80 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0d78:	681b      	ldr	r3, [r3, #0]
 80a0d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0d7c:	9301      	str	r3, [sp, #4]
 80a0d7e:	bd08      	pop	{r3, pc}
 80a0d80:	080601cc 	.word	0x080601cc

080a0d84 <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0d84:	b508      	push	{r3, lr}
 80a0d86:	4b02      	ldr	r3, [pc, #8]	; (80a0d90 <network_ready+0xc>)
 80a0d88:	681b      	ldr	r3, [r3, #0]
 80a0d8a:	691b      	ldr	r3, [r3, #16]
 80a0d8c:	9301      	str	r3, [sp, #4]
 80a0d8e:	bd08      	pop	{r3, pc}
 80a0d90:	080601c8 	.word	0x080601c8

080a0d94 <malloc>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0d94:	b508      	push	{r3, lr}
 80a0d96:	4b02      	ldr	r3, [pc, #8]	; (80a0da0 <malloc+0xc>)
 80a0d98:	681b      	ldr	r3, [r3, #0]
 80a0d9a:	681b      	ldr	r3, [r3, #0]
 80a0d9c:	9301      	str	r3, [sp, #4]
 80a0d9e:	bd08      	pop	{r3, pc}
 80a0da0:	080601a0 	.word	0x080601a0

080a0da4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0da4:	b508      	push	{r3, lr}
 80a0da6:	4b02      	ldr	r3, [pc, #8]	; (80a0db0 <free+0xc>)
 80a0da8:	681b      	ldr	r3, [r3, #0]
 80a0daa:	685b      	ldr	r3, [r3, #4]
 80a0dac:	9301      	str	r3, [sp, #4]
 80a0dae:	bd08      	pop	{r3, pc}
 80a0db0:	080601a0 	.word	0x080601a0

080a0db4 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a0db4:	b508      	push	{r3, lr}
 80a0db6:	4b02      	ldr	r3, [pc, #8]	; (80a0dc0 <abort+0xc>)
 80a0db8:	681b      	ldr	r3, [r3, #0]
 80a0dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0dbc:	9301      	str	r3, [sp, #4]
 80a0dbe:	bd08      	pop	{r3, pc}
 80a0dc0:	080601a0 	.word	0x080601a0

080a0dc4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0dc4:	2100      	movs	r1, #0
 80a0dc6:	f7ff bfb1 	b.w	80a0d2c <system_delay_ms>

080a0dca <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0dca:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0dcc:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0dce:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0dd0:	b113      	cbz	r3, 80a0dd8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0dd2:	2203      	movs	r2, #3
 80a0dd4:	4601      	mov	r1, r0
 80a0dd6:	4798      	blx	r3
    }
 80a0dd8:	4620      	mov	r0, r4
 80a0dda:	bd10      	pop	{r4, pc}

080a0ddc <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a0ddc:	4770      	bx	lr

080a0dde <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0dde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0de0:	4606      	mov	r6, r0
 80a0de2:	4615      	mov	r5, r2
 80a0de4:	460c      	mov	r4, r1
 80a0de6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0de8:	42bc      	cmp	r4, r7
 80a0dea:	d006      	beq.n	80a0dfa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0dec:	6833      	ldr	r3, [r6, #0]
 80a0dee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0df2:	689b      	ldr	r3, [r3, #8]
 80a0df4:	4630      	mov	r0, r6
 80a0df6:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0df8:	e7f6      	b.n	80a0de8 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a0dfa:	4628      	mov	r0, r5
 80a0dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0dfe <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a0dfe:	2200      	movs	r2, #0
 80a0e00:	7c00      	ldrb	r0, [r0, #16]
 80a0e02:	f7ff bec9 	b.w	80a0b98 <HAL_I2C_Write_Data>

080a0e06 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a0e06:	2100      	movs	r1, #0
 80a0e08:	7c00      	ldrb	r0, [r0, #16]
 80a0e0a:	f7ff becd 	b.w	80a0ba8 <HAL_I2C_Available_Data>

080a0e0e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a0e0e:	2100      	movs	r1, #0
 80a0e10:	7c00      	ldrb	r0, [r0, #16]
 80a0e12:	f7ff bed1 	b.w	80a0bb8 <HAL_I2C_Read_Data>

080a0e16 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a0e16:	2100      	movs	r1, #0
 80a0e18:	7c00      	ldrb	r0, [r0, #16]
 80a0e1a:	f7ff bed5 	b.w	80a0bc8 <HAL_I2C_Peek_Data>

080a0e1e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a0e1e:	2100      	movs	r1, #0
 80a0e20:	7c00      	ldrb	r0, [r0, #16]
 80a0e22:	f7ff bed9 	b.w	80a0bd8 <HAL_I2C_Flush_Data>

080a0e26 <_ZN7TwoWireD0Ev>:
 80a0e26:	b510      	push	{r4, lr}
 80a0e28:	4604      	mov	r4, r0
 80a0e2a:	f7ff f938 	bl	80a009e <_ZdlPv>
 80a0e2e:	4620      	mov	r0, r4
 80a0e30:	bd10      	pop	{r4, pc}
	...

080a0e34 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0e34:	b510      	push	{r4, lr}
 80a0e36:	4604      	mov	r4, r0
 80a0e38:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0e3e:	60a3      	str	r3, [r4, #8]
 80a0e40:	4b04      	ldr	r3, [pc, #16]	; (80a0e54 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0e42:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a0e44:	7420      	strb	r0, [r4, #16]
 80a0e46:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0e48:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a0e4a:	f7ff fed5 	bl	80a0bf8 <HAL_I2C_Init>

}
 80a0e4e:	4620      	mov	r0, r4
 80a0e50:	bd10      	pop	{r4, pc}
 80a0e52:	bf00      	nop
 80a0e54:	080a44e0 	.word	0x080a44e0

080a0e58 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a0e58:	2100      	movs	r1, #0
 80a0e5a:	7c00      	ldrb	r0, [r0, #16]
 80a0e5c:	f7ff bec4 	b.w	80a0be8 <HAL_I2C_Is_Enabled>

080a0e60 <_Z29call_wiring_interrupt_handlerPv>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0e60:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
 80a0e62:	b510      	push	{r4, lr}
 80a0e64:	b90a      	cbnz	r2, 80a0e6a <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
 80a0e66:	f000 fce8 	bl	80a183a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0e6a:	68c3      	ldr	r3, [r0, #12]
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
 80a0e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0e70:	4718      	bx	r3
	...

080a0e74 <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void detachInterrupt(uint16_t pin)
{
 80a0e74:	b570      	push	{r4, r5, r6, lr}
 80a0e76:	4606      	mov	r6, r0
#if Wiring_Cellular == 1
    /* safety check that prevents users from detaching an interrupt from
     * BATT_INT_PC13 for power management which is shared with D7 */
    if (pin == D7) return;
#endif
    HAL_Interrupts_Detach(pin);
 80a0e78:	f7ff fe86 	bl	80a0b88 <HAL_Interrupts_Detach>
    delete handlers[pin];
 80a0e7c:	4b07      	ldr	r3, [pc, #28]	; (80a0e9c <_Z15detachInterruptt+0x28>)
 80a0e7e:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 80a0e82:	461c      	mov	r4, r3
 80a0e84:	b12d      	cbz	r5, 80a0e92 <_Z15detachInterruptt+0x1e>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0e86:	4628      	mov	r0, r5
 80a0e88:	f7ff ff9f 	bl	80a0dca <_ZNSt14_Function_baseD1Ev>
 80a0e8c:	4628      	mov	r0, r5
 80a0e8e:	f7ff f906 	bl	80a009e <_ZdlPv>
    handlers[pin] = NULL;
 80a0e92:	2300      	movs	r3, #0
 80a0e94:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
 80a0e98:	bd70      	pop	{r4, r5, r6, pc}
 80a0e9a:	bf00      	nop
 80a0e9c:	200003d0 	.word	0x200003d0

080a0ea0 <_ZNSt8functionIFvvEEC1ERKS1_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0ea0:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0ea2:	2300      	movs	r3, #0
 80a0ea4:	6083      	str	r3, [r0, #8]
 80a0ea6:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0ea8:	4604      	mov	r4, r0
 80a0eaa:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a0eac:	b12b      	cbz	r3, 80a0eba <_ZNSt8functionIFvvEEC1ERKS1_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a0eae:	2202      	movs	r2, #2
 80a0eb0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a0eb2:	68eb      	ldr	r3, [r5, #12]
 80a0eb4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a0eb6:	68ab      	ldr	r3, [r5, #8]
 80a0eb8:	60a3      	str	r3, [r4, #8]
	}
    }
 80a0eba:	4620      	mov	r0, r4
 80a0ebc:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0ec0 <_Z16allocate_handlertRSt8functionIFvvEE>:
#include "spark_wiring_platform.h"

static wiring_interrupt_handler_t* handlers[TOTAL_PINS];

wiring_interrupt_handler_t* allocate_handler(uint16_t pin, wiring_interrupt_handler_t& fn)
{
 80a0ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    delete handlers[pin];
 80a0ec2:	4b0c      	ldr	r3, [pc, #48]	; (80a0ef4 <_Z16allocate_handlertRSt8functionIFvvEE+0x34>)
#include "spark_wiring_platform.h"

static wiring_interrupt_handler_t* handlers[TOTAL_PINS];

wiring_interrupt_handler_t* allocate_handler(uint16_t pin, wiring_interrupt_handler_t& fn)
{
 80a0ec4:	4606      	mov	r6, r0
    delete handlers[pin];
 80a0ec6:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
#include "spark_wiring_platform.h"

static wiring_interrupt_handler_t* handlers[TOTAL_PINS];

wiring_interrupt_handler_t* allocate_handler(uint16_t pin, wiring_interrupt_handler_t& fn)
{
 80a0eca:	460f      	mov	r7, r1
 80a0ecc:	461c      	mov	r4, r3
    delete handlers[pin];
 80a0ece:	b12d      	cbz	r5, 80a0edc <_Z16allocate_handlertRSt8functionIFvvEE+0x1c>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0ed0:	4628      	mov	r0, r5
 80a0ed2:	f7ff ff7a 	bl	80a0dca <_ZNSt14_Function_baseD1Ev>
 80a0ed6:	4628      	mov	r0, r5
 80a0ed8:	f7ff f8e1 	bl	80a009e <_ZdlPv>
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
 80a0edc:	2010      	movs	r0, #16
 80a0ede:	f7ff f8dc 	bl	80a009a <_Znwj>
 80a0ee2:	4605      	mov	r5, r0
 80a0ee4:	b110      	cbz	r0, 80a0eec <_Z16allocate_handlertRSt8functionIFvvEE+0x2c>
 80a0ee6:	4639      	mov	r1, r7
 80a0ee8:	f7ff ffda 	bl	80a0ea0 <_ZNSt8functionIFvvEEC1ERKS1_>
 80a0eec:	f844 5026 	str.w	r5, [r4, r6, lsl #2]
}
 80a0ef0:	4628      	mov	r0, r5
 80a0ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0ef4:	200003d0 	.word	0x200003d0

080a0ef8 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>:
  }
  return nullptr;
}

bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t fn, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 80a0ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0efa:	460c      	mov	r4, r1
 80a0efc:	4605      	mov	r5, r0
 80a0efe:	b085      	sub	sp, #20
 80a0f00:	4617      	mov	r7, r2
 80a0f02:	461e      	mov	r6, r3
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
 80a0f04:	f7ff fe40 	bl	80a0b88 <HAL_Interrupts_Detach>
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
 80a0f08:	4621      	mov	r1, r4
 80a0f0a:	4628      	mov	r0, r5
 80a0f0c:	f7ff ffd8 	bl	80a0ec0 <_Z16allocate_handlertRSt8functionIFvvEE>
    if (handler) {
 80a0f10:	4604      	mov	r4, r0
 80a0f12:	b1b8      	cbz	r0, 80a0f44 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x4c>
        HAL_InterruptExtraConfiguration extra = {0};
 80a0f14:	2100      	movs	r1, #0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a0f16:	2304      	movs	r3, #4
  if (priority >= 0) {
 80a0f18:	428e      	cmp	r6, r1
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
 80a0f1a:	9103      	str	r1, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a0f1c:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
  }
  return nullptr;
 80a0f20:	bfb4      	ite	lt
 80a0f22:	460b      	movlt	r3, r1
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a0f24:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
#endif
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
        HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority));
 80a0f28:	4602      	mov	r2, r0
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a0f2a:	bfa4      	itt	ge
 80a0f2c:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
 80a0f30:	ab03      	addge	r3, sp, #12
#endif
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
        HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority));
 80a0f32:	9300      	str	r3, [sp, #0]
 80a0f34:	4906      	ldr	r1, [pc, #24]	; (80a0f50 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>)
 80a0f36:	463b      	mov	r3, r7
 80a0f38:	4628      	mov	r0, r5

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 80a0f3a:	bfa8      	it	ge
 80a0f3c:	f88d 600d 	strbge.w	r6, [sp, #13]
#endif
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
        HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority));
 80a0f40:	f7ff fe1a 	bl	80a0b78 <HAL_Interrupts_Attach>
    }
    return handler!=NULL;
}
 80a0f44:	1c20      	adds	r0, r4, #0
 80a0f46:	bf18      	it	ne
 80a0f48:	2001      	movne	r0, #1
 80a0f4a:	b005      	add	sp, #20
 80a0f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0f4e:	bf00      	nop
 80a0f50:	080a0e61 	.word	0x080a0e61

080a0f54 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0f54:	4770      	bx	lr

080a0f56 <_ZN9IPAddressD0Ev>:
 80a0f56:	b510      	push	{r4, lr}
 80a0f58:	4604      	mov	r4, r0
 80a0f5a:	f7ff f8a0 	bl	80a009e <_ZdlPv>
 80a0f5e:	4620      	mov	r0, r4
 80a0f60:	bd10      	pop	{r4, pc}

080a0f62 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0f62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0f64:	460f      	mov	r7, r1
 80a0f66:	f100 0608 	add.w	r6, r0, #8
 80a0f6a:	1d05      	adds	r5, r0, #4
 80a0f6c:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0f6e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a0f72:	220a      	movs	r2, #10
 80a0f74:	4638      	mov	r0, r7
 80a0f76:	f000 f89c 	bl	80a10b2 <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0f7a:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0f7c:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0f7e:	d007      	beq.n	80a0f90 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a0f80:	2c00      	cmp	r4, #0
 80a0f82:	d0f4      	beq.n	80a0f6e <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0f84:	212e      	movs	r1, #46	; 0x2e
 80a0f86:	4638      	mov	r0, r7
 80a0f88:	f000 f850 	bl	80a102c <_ZN5Print5printEc>
 80a0f8c:	4404      	add	r4, r0
 80a0f8e:	e7ee      	b.n	80a0f6e <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a0f90:	4620      	mov	r0, r4
 80a0f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0f94 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a0f94:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0f96:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0f9a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a0f9e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a0fa2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a0fa6:	2304      	movs	r3, #4
 80a0fa8:	6041      	str	r1, [r0, #4]
 80a0faa:	7503      	strb	r3, [r0, #20]
 80a0fac:	bd10      	pop	{r4, pc}
	...

080a0fb0 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0fb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0fb2:	4d04      	ldr	r5, [pc, #16]	; (80a0fc4 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0fb4:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0fb6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0fba:	9500      	str	r5, [sp, #0]
 80a0fbc:	f7ff ffea 	bl	80a0f94 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0fc0:	b003      	add	sp, #12
 80a0fc2:	bd30      	pop	{r4, r5, pc}
 80a0fc4:	080a4508 	.word	0x080a4508

080a0fc8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0fc8:	4a01      	ldr	r2, [pc, #4]	; (80a0fd0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0fca:	4b02      	ldr	r3, [pc, #8]	; (80a0fd4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0fcc:	601a      	str	r2, [r3, #0]
 80a0fce:	4770      	bx	lr
 80a0fd0:	080a45cd 	.word	0x080a45cd
 80a0fd4:	20000430 	.word	0x20000430

080a0fd8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0fda:	4606      	mov	r6, r0
 80a0fdc:	460d      	mov	r5, r1
 80a0fde:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a0fe0:	2400      	movs	r4, #0
  while (size--) {
 80a0fe2:	42bd      	cmp	r5, r7
 80a0fe4:	d00c      	beq.n	80a1000 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0fe6:	6833      	ldr	r3, [r6, #0]
 80a0fe8:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0fec:	689b      	ldr	r3, [r3, #8]
 80a0fee:	4630      	mov	r0, r6
 80a0ff0:	4798      	blx	r3
     if (chunk>=0)
 80a0ff2:	2800      	cmp	r0, #0
 80a0ff4:	db01      	blt.n	80a0ffa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0ff6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a0ff8:	e7f3      	b.n	80a0fe2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0ffa:	2c00      	cmp	r4, #0
 80a0ffc:	bf08      	it	eq
 80a0ffe:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1000:	4620      	mov	r0, r4
 80a1002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1004 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1004:	b570      	push	{r4, r5, r6, lr}
 80a1006:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1008:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a100a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a100c:	b149      	cbz	r1, 80a1022 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a100e:	f003 f96b 	bl	80a42e8 <strlen>
 80a1012:	682b      	ldr	r3, [r5, #0]
 80a1014:	4602      	mov	r2, r0
 80a1016:	4621      	mov	r1, r4
 80a1018:	4628      	mov	r0, r5
    }
 80a101a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a101e:	68db      	ldr	r3, [r3, #12]
 80a1020:	4718      	bx	r3
    }
 80a1022:	bd70      	pop	{r4, r5, r6, pc}

080a1024 <_ZN5Print5printEPKc>:
 80a1024:	b508      	push	{r3, lr}
 80a1026:	f7ff ffed 	bl	80a1004 <_ZN5Print5writeEPKc>
 80a102a:	bd08      	pop	{r3, pc}

080a102c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a102c:	6803      	ldr	r3, [r0, #0]
 80a102e:	689b      	ldr	r3, [r3, #8]
 80a1030:	4718      	bx	r3

080a1032 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1032:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1034:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1036:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1038:	f7ff fff8 	bl	80a102c <_ZN5Print5printEc>
  n += print('\n');
 80a103c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a103e:	4604      	mov	r4, r0
  n += print('\n');
 80a1040:	4628      	mov	r0, r5
 80a1042:	f7ff fff3 	bl	80a102c <_ZN5Print5printEc>
  return n;
}
 80a1046:	4420      	add	r0, r4
 80a1048:	bd38      	pop	{r3, r4, r5, pc}

080a104a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a104a:	b538      	push	{r3, r4, r5, lr}
 80a104c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a104e:	f7ff ffd9 	bl	80a1004 <_ZN5Print5writeEPKc>
 80a1052:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a1054:	4628      	mov	r0, r5
 80a1056:	f7ff ffec 	bl	80a1032 <_ZN5Print7printlnEv>
  return n;
}
 80a105a:	4420      	add	r0, r4
 80a105c:	bd38      	pop	{r3, r4, r5, pc}

080a105e <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a105e:	2a01      	cmp	r2, #1
 80a1060:	bf98      	it	ls
 80a1062:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1064:	b530      	push	{r4, r5, lr}
 80a1066:	460b      	mov	r3, r1
 80a1068:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a106a:	2100      	movs	r1, #0
 80a106c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a1070:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a1074:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a1078:	fb05 3312 	mls	r3, r5, r2, r3
 80a107c:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a107e:	2b09      	cmp	r3, #9
 80a1080:	bf94      	ite	ls
 80a1082:	3330      	addls	r3, #48	; 0x30
 80a1084:	3337      	addhi	r3, #55	; 0x37
 80a1086:	b2db      	uxtb	r3, r3
 80a1088:	4621      	mov	r1, r4
 80a108a:	f804 3901 	strb.w	r3, [r4], #-1
 80a108e:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a1090:	2d00      	cmp	r5, #0
 80a1092:	d1ef      	bne.n	80a1074 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1094:	f7ff ffb6 	bl	80a1004 <_ZN5Print5writeEPKc>
}
 80a1098:	b00b      	add	sp, #44	; 0x2c
 80a109a:	bd30      	pop	{r4, r5, pc}

080a109c <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a109c:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a109e:	b922      	cbnz	r2, 80a10aa <_ZN5Print5printEmi+0xe>
 80a10a0:	6803      	ldr	r3, [r0, #0]
 80a10a2:	b2c9      	uxtb	r1, r1
 80a10a4:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a10a6:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a10a8:	4718      	bx	r3
  else return printNumber(n, base);
 80a10aa:	b2d2      	uxtb	r2, r2
}
 80a10ac:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a10ae:	f7ff bfd6 	b.w	80a105e <_ZN5Print11printNumberEmh>

080a10b2 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a10b2:	f7ff bff3 	b.w	80a109c <_ZN5Print5printEmi>

080a10b6 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a10b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a10ba:	4607      	mov	r7, r0
 80a10bc:	460e      	mov	r6, r1
  if (base == 0) {
 80a10be:	4615      	mov	r5, r2
 80a10c0:	b92a      	cbnz	r2, 80a10ce <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a10c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a10c6:	6803      	ldr	r3, [r0, #0]
 80a10c8:	b2c9      	uxtb	r1, r1
 80a10ca:	689b      	ldr	r3, [r3, #8]
 80a10cc:	4718      	bx	r3
  } else if (base == 10) {
 80a10ce:	2a0a      	cmp	r2, #10
 80a10d0:	d102      	bne.n	80a10d8 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a10d2:	2900      	cmp	r1, #0
 80a10d4:	da01      	bge.n	80a10da <_ZN5Print5printEli+0x24>
 80a10d6:	e004      	b.n	80a10e2 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a10d8:	b2d2      	uxtb	r2, r2
  }
}
 80a10da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a10de:	f7ff bfbe 	b.w	80a105e <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a10e2:	212d      	movs	r1, #45	; 0x2d
 80a10e4:	f7ff ffa2 	bl	80a102c <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a10e8:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a10ea:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a10ec:	4271      	negs	r1, r6
 80a10ee:	4638      	mov	r0, r7
 80a10f0:	f7ff ffb5 	bl	80a105e <_ZN5Print11printNumberEmh>
 80a10f4:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a10f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a10fa <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a10fa:	f7ff bfdc 	b.w	80a10b6 <_ZN5Print5printEli>
	...

080a1100 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a1100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a1104:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a1106:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a1108:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a110a:	4617      	mov	r7, r2
 80a110c:	461e      	mov	r6, r3
 80a110e:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a1112:	f002 fd8d 	bl	80a3c30 <__aeabi_dcmpun>
 80a1116:	b108      	cbz	r0, 80a111c <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1118:	4947      	ldr	r1, [pc, #284]	; (80a1238 <_ZN5Print10printFloatEdh+0x138>)
 80a111a:	e012      	b.n	80a1142 <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a111c:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a1120:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a1124:	4b45      	ldr	r3, [pc, #276]	; (80a123c <_ZN5Print10printFloatEdh+0x13c>)
 80a1126:	4638      	mov	r0, r7
 80a1128:	4621      	mov	r1, r4
 80a112a:	f002 fd81 	bl	80a3c30 <__aeabi_dcmpun>
 80a112e:	b968      	cbnz	r0, 80a114c <_ZN5Print10printFloatEdh+0x4c>
 80a1130:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a1134:	4b41      	ldr	r3, [pc, #260]	; (80a123c <_ZN5Print10printFloatEdh+0x13c>)
 80a1136:	4638      	mov	r0, r7
 80a1138:	4621      	mov	r1, r4
 80a113a:	f002 fd5b 	bl	80a3bf4 <__aeabi_dcmple>
 80a113e:	b928      	cbnz	r0, 80a114c <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1140:	493f      	ldr	r1, [pc, #252]	; (80a1240 <_ZN5Print10printFloatEdh+0x140>)
 80a1142:	4640      	mov	r0, r8
 80a1144:	f7ff ff5e 	bl	80a1004 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a1148:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a114c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a1150:	4b3c      	ldr	r3, [pc, #240]	; (80a1244 <_ZN5Print10printFloatEdh+0x144>)
 80a1152:	4638      	mov	r0, r7
 80a1154:	4631      	mov	r1, r6
 80a1156:	f002 fd61 	bl	80a3c1c <__aeabi_dcmpgt>
 80a115a:	b108      	cbz	r0, 80a1160 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a115c:	493a      	ldr	r1, [pc, #232]	; (80a1248 <_ZN5Print10printFloatEdh+0x148>)
 80a115e:	e7f0      	b.n	80a1142 <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a1160:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a1164:	4b39      	ldr	r3, [pc, #228]	; (80a124c <_ZN5Print10printFloatEdh+0x14c>)
 80a1166:	4638      	mov	r0, r7
 80a1168:	4631      	mov	r1, r6
 80a116a:	f002 fd39 	bl	80a3be0 <__aeabi_dcmplt>
 80a116e:	2800      	cmp	r0, #0
 80a1170:	d1f4      	bne.n	80a115c <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a1172:	2200      	movs	r2, #0
 80a1174:	2300      	movs	r3, #0
 80a1176:	4638      	mov	r0, r7
 80a1178:	4631      	mov	r1, r6
 80a117a:	f002 fd31 	bl	80a3be0 <__aeabi_dcmplt>
 80a117e:	b138      	cbz	r0, 80a1190 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a1180:	212d      	movs	r1, #45	; 0x2d
 80a1182:	4640      	mov	r0, r8
 80a1184:	f7ff ff52 	bl	80a102c <_ZN5Print5printEc>
     number = -number;
 80a1188:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a118c:	4604      	mov	r4, r0
 80a118e:	e000      	b.n	80a1192 <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a1190:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a1192:	492f      	ldr	r1, [pc, #188]	; (80a1250 <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a1194:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a1198:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a119a:	fa5f f389 	uxtb.w	r3, r9
 80a119e:	429d      	cmp	r5, r3
 80a11a0:	d906      	bls.n	80a11b0 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a11a2:	2200      	movs	r2, #0
 80a11a4:	4b2b      	ldr	r3, [pc, #172]	; (80a1254 <_ZN5Print10printFloatEdh+0x154>)
 80a11a6:	f002 fbd3 	bl	80a3950 <__aeabi_ddiv>
 80a11aa:	f109 0901 	add.w	r9, r9, #1
 80a11ae:	e7f4      	b.n	80a119a <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a11b0:	463a      	mov	r2, r7
 80a11b2:	4633      	mov	r3, r6
 80a11b4:	f002 f8f0 	bl	80a3398 <__adddf3>
 80a11b8:	460f      	mov	r7, r1
 80a11ba:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a11bc:	f002 fd76 	bl	80a3cac <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a11c0:	220a      	movs	r2, #10
 80a11c2:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a11c4:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a11c6:	4640      	mov	r0, r8
 80a11c8:	f7ff ff49 	bl	80a105e <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a11cc:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a11ce:	b37d      	cbz	r5, 80a1230 <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a11d0:	4648      	mov	r0, r9
 80a11d2:	f002 fa1d 	bl	80a3610 <__aeabi_ui2d>
 80a11d6:	4602      	mov	r2, r0
 80a11d8:	460b      	mov	r3, r1
 80a11da:	4630      	mov	r0, r6
 80a11dc:	4639      	mov	r1, r7
 80a11de:	f002 f8d9 	bl	80a3394 <__aeabi_dsub>
 80a11e2:	4606      	mov	r6, r0
 80a11e4:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a11e6:	4640      	mov	r0, r8
 80a11e8:	491b      	ldr	r1, [pc, #108]	; (80a1258 <_ZN5Print10printFloatEdh+0x158>)
 80a11ea:	f7ff ff0b 	bl	80a1004 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a11ee:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a11f0:	4b18      	ldr	r3, [pc, #96]	; (80a1254 <_ZN5Print10printFloatEdh+0x154>)
 80a11f2:	2200      	movs	r2, #0
 80a11f4:	4630      	mov	r0, r6
 80a11f6:	4639      	mov	r1, r7
 80a11f8:	f002 fa80 	bl	80a36fc <__aeabi_dmul>
 80a11fc:	460f      	mov	r7, r1
 80a11fe:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 80a1200:	f002 fd2c 	bl	80a3c5c <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a1204:	220a      	movs	r2, #10
 80a1206:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 80a1208:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a120a:	4640      	mov	r0, r8
 80a120c:	f7ff ff53 	bl	80a10b6 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 80a1210:	4404      	add	r4, r0
    remainder -= toPrint;
 80a1212:	4648      	mov	r0, r9
 80a1214:	f002 fa0c 	bl	80a3630 <__aeabi_i2d>
 80a1218:	4602      	mov	r2, r0
 80a121a:	460b      	mov	r3, r1
 80a121c:	4630      	mov	r0, r6
 80a121e:	4639      	mov	r1, r7
 80a1220:	f002 f8b8 	bl	80a3394 <__aeabi_dsub>
 80a1224:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a1226:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a122a:	4606      	mov	r6, r0
 80a122c:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a122e:	d1df      	bne.n	80a11f0 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a1230:	4620      	mov	r0, r4
 80a1232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a1236:	bf00      	nop
 80a1238:	080a45ec 	.word	0x080a45ec
 80a123c:	7fefffff 	.word	0x7fefffff
 80a1240:	080a45f4 	.word	0x080a45f4
 80a1244:	41efffff 	.word	0x41efffff
 80a1248:	080a45f0 	.word	0x080a45f0
 80a124c:	c1efffff 	.word	0xc1efffff
 80a1250:	3fe00000 	.word	0x3fe00000
 80a1254:	40240000 	.word	0x40240000
 80a1258:	080a4322 	.word	0x080a4322

080a125c <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a125c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a125e:	f89d 1018 	ldrb.w	r1, [sp, #24]
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a1262:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a1264:	9100      	str	r1, [sp, #0]
 80a1266:	f7ff ff4b 	bl	80a1100 <_ZN5Print10printFloatEdh>
 80a126a:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
 80a126c:	4628      	mov	r0, r5
 80a126e:	f7ff fee0 	bl	80a1032 <_ZN5Print7printlnEv>
  return n;
}
 80a1272:	4420      	add	r0, r4
 80a1274:	b003      	add	sp, #12
 80a1276:	bd30      	pop	{r4, r5, pc}

080a1278 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a1278:	b510      	push	{r4, lr}
 80a127a:	4604      	mov	r4, r0
 80a127c:	f7ff fda5 	bl	80a0dca <_ZNSt14_Function_baseD1Ev>
 80a1280:	4620      	mov	r0, r4
 80a1282:	bd10      	pop	{r4, pc}

080a1284 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1284:	4803      	ldr	r0, [pc, #12]	; (80a1294 <_GLOBAL__sub_I_RGB+0x10>)
 80a1286:	2300      	movs	r3, #0
 80a1288:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a128a:	4a03      	ldr	r2, [pc, #12]	; (80a1298 <_GLOBAL__sub_I_RGB+0x14>)
 80a128c:	4903      	ldr	r1, [pc, #12]	; (80a129c <_GLOBAL__sub_I_RGB+0x18>)
 80a128e:	f000 bacf 	b.w	80a1830 <__aeabi_atexit>
 80a1292:	bf00      	nop
 80a1294:	20000434 	.word	0x20000434
 80a1298:	2000036c 	.word	0x2000036c
 80a129c:	080a1279 	.word	0x080a1279

080a12a0 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a12a0:	4770      	bx	lr

080a12a2 <_ZN8SPIClassD0Ev>:
 80a12a2:	b510      	push	{r4, lr}
 80a12a4:	4604      	mov	r4, r0
 80a12a6:	f7fe fefa 	bl	80a009e <_ZdlPv>
 80a12aa:	4620      	mov	r0, r4
 80a12ac:	bd10      	pop	{r4, pc}
	...

080a12b0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a12b0:	b570      	push	{r4, r5, r6, lr}
 80a12b2:	4604      	mov	r4, r0
 80a12b4:	460e      	mov	r6, r1
 80a12b6:	4b07      	ldr	r3, [pc, #28]	; (80a12d4 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a12b8:	2500      	movs	r5, #0
 80a12ba:	6003      	str	r3, [r0, #0]
 80a12bc:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a12c0:	f7ff fc0a 	bl	80a0ad8 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a12c4:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a12c6:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a12c8:	f7ff fca0 	bl	80a0c0c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a12cc:	60a5      	str	r5, [r4, #8]
}
 80a12ce:	4620      	mov	r0, r4
 80a12d0:	bd70      	pop	{r4, r5, r6, pc}
 80a12d2:	bf00      	nop
 80a12d4:	080a4600 	.word	0x080a4600

080a12d8 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a12d8:	7900      	ldrb	r0, [r0, #4]
 80a12da:	f7ff bc9f 	b.w	80a0c1c <HAL_SPI_Is_Enabled>
	...

080a12e0 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a12e0:	f64f 739c 	movw	r3, #65436	; 0xff9c
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
}
 80a12e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a12e6:	4c0d      	ldr	r4, [pc, #52]	; (80a131c <_GLOBAL__sub_I_System+0x3c>)
 80a12e8:	2500      	movs	r5, #0
 80a12ea:	8063      	strh	r3, [r4, #2]
 80a12ec:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a12f0:	4628      	mov	r0, r5
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a12f2:	80a3      	strh	r3, [r4, #4]
 80a12f4:	7025      	strb	r5, [r4, #0]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a12f6:	f7ff fd11 	bl	80a0d1c <set_system_mode>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 80a12fa:	a802      	add	r0, sp, #8
 80a12fc:	f840 5d04 	str.w	r5, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80a1300:	462a      	mov	r2, r5
 80a1302:	4629      	mov	r1, r5
 80a1304:	f7ff fbf0 	bl	80a0ae8 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 80a1308:	9b01      	ldr	r3, [sp, #4]
class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
        if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
 80a130a:	2b1e      	cmp	r3, #30
 80a130c:	d104      	bne.n	80a1318 <_GLOBAL__sub_I_System+0x38>
            // Woken up from standby mode
            sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
 80a130e:	2303      	movs	r3, #3
 80a1310:	7023      	strb	r3, [r4, #0]
 80a1312:	2311      	movs	r3, #17
 80a1314:	8065      	strh	r5, [r4, #2]
 80a1316:	80a3      	strh	r3, [r4, #4]
 80a1318:	b003      	add	sp, #12
 80a131a:	bd30      	pop	{r4, r5, pc}
 80a131c:	20000444 	.word	0x20000444

080a1320 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1320:	4b02      	ldr	r3, [pc, #8]	; (80a132c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1322:	681a      	ldr	r2, [r3, #0]
 80a1324:	4b02      	ldr	r3, [pc, #8]	; (80a1330 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1326:	601a      	str	r2, [r3, #0]
 80a1328:	4770      	bx	lr
 80a132a:	bf00      	nop
 80a132c:	20000300 	.word	0x20000300
 80a1330:	2000044c 	.word	0x2000044c

080a1334 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1334:	4770      	bx	lr

080a1336 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1336:	7441      	strb	r1, [r0, #17]
 80a1338:	4770      	bx	lr

080a133a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a133a:	7c00      	ldrb	r0, [r0, #16]
 80a133c:	f7ff bcae 	b.w	80a0c9c <HAL_USART_Available_Data_For_Write>

080a1340 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a1340:	7c00      	ldrb	r0, [r0, #16]
 80a1342:	f7ff bc83 	b.w	80a0c4c <HAL_USART_Available_Data>

080a1346 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a1346:	7c00      	ldrb	r0, [r0, #16]
 80a1348:	f7ff bc90 	b.w	80a0c6c <HAL_USART_Peek_Data>

080a134c <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a134c:	7c00      	ldrb	r0, [r0, #16]
 80a134e:	f7ff bc85 	b.w	80a0c5c <HAL_USART_Read_Data>

080a1352 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a1352:	7c00      	ldrb	r0, [r0, #16]
 80a1354:	f7ff bc92 	b.w	80a0c7c <HAL_USART_Flush_Data>

080a1358 <_ZN11USARTSerialD0Ev>:
 80a1358:	b510      	push	{r4, lr}
 80a135a:	4604      	mov	r4, r0
 80a135c:	f7fe fe9f 	bl	80a009e <_ZdlPv>
 80a1360:	4620      	mov	r0, r4
 80a1362:	bd10      	pop	{r4, pc}

080a1364 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1364:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1366:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a1368:	4604      	mov	r4, r0
 80a136a:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a136c:	b925      	cbnz	r5, 80a1378 <_ZN11USARTSerial5writeEh+0x14>
 80a136e:	7c00      	ldrb	r0, [r0, #16]
 80a1370:	f7ff fc94 	bl	80a0c9c <HAL_USART_Available_Data_For_Write>
 80a1374:	2800      	cmp	r0, #0
 80a1376:	dd05      	ble.n	80a1384 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1378:	4631      	mov	r1, r6
 80a137a:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a137c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1380:	f7ff bc5c 	b.w	80a0c3c <HAL_USART_Write_Data>
  }
  return 0;
}
 80a1384:	4628      	mov	r0, r5
 80a1386:	bd70      	pop	{r4, r5, r6, pc}

080a1388 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1388:	b510      	push	{r4, lr}
 80a138a:	4604      	mov	r4, r0
 80a138c:	4608      	mov	r0, r1
 80a138e:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1390:	2200      	movs	r2, #0
 80a1392:	6062      	str	r2, [r4, #4]
 80a1394:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1398:	60a2      	str	r2, [r4, #8]
 80a139a:	4a05      	ldr	r2, [pc, #20]	; (80a13b0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a139c:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a139e:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a13a0:	2201      	movs	r2, #1
 80a13a2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a13a4:	461a      	mov	r2, r3
 80a13a6:	f7ff fc41 	bl	80a0c2c <HAL_USART_Init>
}
 80a13aa:	4620      	mov	r0, r4
 80a13ac:	bd10      	pop	{r4, pc}
 80a13ae:	bf00      	nop
 80a13b0:	080a463c 	.word	0x080a463c

080a13b4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a13b4:	7c00      	ldrb	r0, [r0, #16]
 80a13b6:	f7ff bc69 	b.w	80a0c8c <HAL_USART_Is_Enabled>
	...

080a13bc <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a13bc:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a13be:	4d0c      	ldr	r5, [pc, #48]	; (80a13f0 <_Z22__fetch_global_Serial1v+0x34>)
 80a13c0:	6829      	ldr	r1, [r5, #0]
 80a13c2:	f011 0401 	ands.w	r4, r1, #1
 80a13c6:	d111      	bne.n	80a13ec <_Z22__fetch_global_Serial1v+0x30>
 80a13c8:	4628      	mov	r0, r5
 80a13ca:	f7fe fe6a 	bl	80a00a2 <__cxa_guard_acquire>
 80a13ce:	b168      	cbz	r0, 80a13ec <_Z22__fetch_global_Serial1v+0x30>
 80a13d0:	4a08      	ldr	r2, [pc, #32]	; (80a13f4 <_Z22__fetch_global_Serial1v+0x38>)
 80a13d2:	4621      	mov	r1, r4
 80a13d4:	4b08      	ldr	r3, [pc, #32]	; (80a13f8 <_Z22__fetch_global_Serial1v+0x3c>)
 80a13d6:	4809      	ldr	r0, [pc, #36]	; (80a13fc <_Z22__fetch_global_Serial1v+0x40>)
 80a13d8:	f7ff ffd6 	bl	80a1388 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a13dc:	4628      	mov	r0, r5
 80a13de:	f7fe fe65 	bl	80a00ac <__cxa_guard_release>
 80a13e2:	4a07      	ldr	r2, [pc, #28]	; (80a1400 <_Z22__fetch_global_Serial1v+0x44>)
 80a13e4:	4907      	ldr	r1, [pc, #28]	; (80a1404 <_Z22__fetch_global_Serial1v+0x48>)
 80a13e6:	4805      	ldr	r0, [pc, #20]	; (80a13fc <_Z22__fetch_global_Serial1v+0x40>)
 80a13e8:	f000 fa22 	bl	80a1830 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a13ec:	4803      	ldr	r0, [pc, #12]	; (80a13fc <_Z22__fetch_global_Serial1v+0x40>)
 80a13ee:	bd38      	pop	{r3, r4, r5, pc}
 80a13f0:	200004e8 	.word	0x200004e8
 80a13f4:	200004ec 	.word	0x200004ec
 80a13f8:	20000464 	.word	0x20000464
 80a13fc:	20000450 	.word	0x20000450
 80a1400:	2000036c 	.word	0x2000036c
 80a1404:	080a1335 	.word	0x080a1335

080a1408 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1408:	7441      	strb	r1, [r0, #17]
 80a140a:	4770      	bx	lr

080a140c <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 80a140c:	4770      	bx	lr

080a140e <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a140e:	2100      	movs	r1, #0
 80a1410:	7c00      	ldrb	r0, [r0, #16]
 80a1412:	f7ff bc6b 	b.w	80a0cec <HAL_USB_USART_Receive_Data>

080a1416 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a1416:	2101      	movs	r1, #1
 80a1418:	7c00      	ldrb	r0, [r0, #16]
 80a141a:	f7ff bc67 	b.w	80a0cec <HAL_USB_USART_Receive_Data>

080a141e <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a141e:	7c00      	ldrb	r0, [r0, #16]
 80a1420:	f7ff bc5c 	b.w	80a0cdc <HAL_USB_USART_Available_Data_For_Write>

080a1424 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a1424:	7c00      	ldrb	r0, [r0, #16]
 80a1426:	f7ff bc51 	b.w	80a0ccc <HAL_USB_USART_Available_Data>

080a142a <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a142a:	b538      	push	{r3, r4, r5, lr}
 80a142c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a142e:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a1430:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1432:	f7ff fc53 	bl	80a0cdc <HAL_USB_USART_Available_Data_For_Write>
 80a1436:	2800      	cmp	r0, #0
 80a1438:	dc01      	bgt.n	80a143e <_ZN9USBSerial5writeEh+0x14>
 80a143a:	7c60      	ldrb	r0, [r4, #17]
 80a143c:	b120      	cbz	r0, 80a1448 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a143e:	4629      	mov	r1, r5
 80a1440:	7c20      	ldrb	r0, [r4, #16]
 80a1442:	f7ff fc5b 	bl	80a0cfc <HAL_USB_USART_Send_Data>
    return 1;
 80a1446:	2001      	movs	r0, #1
  }
  return 0;
}
 80a1448:	bd38      	pop	{r3, r4, r5, pc}

080a144a <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a144a:	7c00      	ldrb	r0, [r0, #16]
 80a144c:	f7ff bc5e 	b.w	80a0d0c <HAL_USB_USART_Flush_Data>

080a1450 <_ZN9USBSerialD0Ev>:
 80a1450:	b510      	push	{r4, lr}
 80a1452:	4604      	mov	r4, r0
 80a1454:	f7fe fe23 	bl	80a009e <_ZdlPv>
 80a1458:	4620      	mov	r0, r4
 80a145a:	bd10      	pop	{r4, pc}

080a145c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a145c:	b510      	push	{r4, lr}
 80a145e:	4604      	mov	r4, r0
 80a1460:	2300      	movs	r3, #0
 80a1462:	6063      	str	r3, [r4, #4]
 80a1464:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1468:	60a3      	str	r3, [r4, #8]
 80a146a:	4b05      	ldr	r3, [pc, #20]	; (80a1480 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a146c:	4608      	mov	r0, r1
 80a146e:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a1470:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a1472:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a1474:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a1476:	4611      	mov	r1, r2
 80a1478:	f7ff fc18 	bl	80a0cac <HAL_USB_USART_Init>
}
 80a147c:	4620      	mov	r0, r4
 80a147e:	bd10      	pop	{r4, pc}
 80a1480:	080a466c 	.word	0x080a466c

080a1484 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a1484:	2200      	movs	r2, #0
 80a1486:	7c00      	ldrb	r0, [r0, #16]
 80a1488:	f7ff bc18 	b.w	80a0cbc <HAL_USB_USART_Begin>

080a148c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a148c:	b510      	push	{r4, lr}
 80a148e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1490:	2214      	movs	r2, #20
 80a1492:	2100      	movs	r1, #0
 80a1494:	f002 fef7 	bl	80a4286 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1498:	4b05      	ldr	r3, [pc, #20]	; (80a14b0 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a149a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a149c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a149e:	4b05      	ldr	r3, [pc, #20]	; (80a14b4 <_Z19acquireSerialBufferv+0x28>)
 80a14a0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a14a2:	f240 1301 	movw	r3, #257	; 0x101
 80a14a6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a14a8:	2381      	movs	r3, #129	; 0x81
 80a14aa:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a14ac:	bd10      	pop	{r4, pc}
 80a14ae:	bf00      	nop
 80a14b0:	200005f5 	.word	0x200005f5
 80a14b4:	20000574 	.word	0x20000574

080a14b8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a14b8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a14ba:	4d0e      	ldr	r5, [pc, #56]	; (80a14f4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a14bc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a14be:	a801      	add	r0, sp, #4
 80a14c0:	f7ff ffe4 	bl	80a148c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a14c4:	6829      	ldr	r1, [r5, #0]
 80a14c6:	f011 0401 	ands.w	r4, r1, #1
 80a14ca:	d110      	bne.n	80a14ee <_Z16_fetch_usbserialv+0x36>
 80a14cc:	4628      	mov	r0, r5
 80a14ce:	f7fe fde8 	bl	80a00a2 <__cxa_guard_acquire>
 80a14d2:	b160      	cbz	r0, 80a14ee <_Z16_fetch_usbserialv+0x36>
 80a14d4:	aa01      	add	r2, sp, #4
 80a14d6:	4621      	mov	r1, r4
 80a14d8:	4807      	ldr	r0, [pc, #28]	; (80a14f8 <_Z16_fetch_usbserialv+0x40>)
 80a14da:	f7ff ffbf 	bl	80a145c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a14de:	4628      	mov	r0, r5
 80a14e0:	f7fe fde4 	bl	80a00ac <__cxa_guard_release>
 80a14e4:	4a05      	ldr	r2, [pc, #20]	; (80a14fc <_Z16_fetch_usbserialv+0x44>)
 80a14e6:	4906      	ldr	r1, [pc, #24]	; (80a1500 <_Z16_fetch_usbserialv+0x48>)
 80a14e8:	4803      	ldr	r0, [pc, #12]	; (80a14f8 <_Z16_fetch_usbserialv+0x40>)
 80a14ea:	f000 f9a1 	bl	80a1830 <__aeabi_atexit>
	return _usbserial;
}
 80a14ee:	4802      	ldr	r0, [pc, #8]	; (80a14f8 <_Z16_fetch_usbserialv+0x40>)
 80a14f0:	b007      	add	sp, #28
 80a14f2:	bd30      	pop	{r4, r5, pc}
 80a14f4:	20000570 	.word	0x20000570
 80a14f8:	200006f8 	.word	0x200006f8
 80a14fc:	2000036c 	.word	0x2000036c
 80a1500:	080a140d 	.word	0x080a140d

080a1504 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1504:	b510      	push	{r4, lr}
 80a1506:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1508:	2214      	movs	r2, #20
 80a150a:	2100      	movs	r1, #0
 80a150c:	f002 febb 	bl	80a4286 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1510:	4b05      	ldr	r3, [pc, #20]	; (80a1528 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1512:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1514:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a1516:	4b05      	ldr	r3, [pc, #20]	; (80a152c <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1518:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a151a:	f240 1301 	movw	r3, #257	; 0x101
 80a151e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1520:	2381      	movs	r3, #129	; 0x81
 80a1522:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1524:	bd10      	pop	{r4, pc}
 80a1526:	bf00      	nop
 80a1528:	200007a8 	.word	0x200007a8
 80a152c:	20000710 	.word	0x20000710

080a1530 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1530:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1532:	4c0e      	ldr	r4, [pc, #56]	; (80a156c <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a1534:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1536:	a801      	add	r0, sp, #4
 80a1538:	f7ff ffe4 	bl	80a1504 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a153c:	6823      	ldr	r3, [r4, #0]
 80a153e:	07db      	lsls	r3, r3, #31
 80a1540:	d410      	bmi.n	80a1564 <_Z17_fetch_usbserial1v+0x34>
 80a1542:	4620      	mov	r0, r4
 80a1544:	f7fe fdad 	bl	80a00a2 <__cxa_guard_acquire>
 80a1548:	b160      	cbz	r0, 80a1564 <_Z17_fetch_usbserial1v+0x34>
 80a154a:	aa01      	add	r2, sp, #4
 80a154c:	2101      	movs	r1, #1
 80a154e:	4808      	ldr	r0, [pc, #32]	; (80a1570 <_Z17_fetch_usbserial1v+0x40>)
 80a1550:	f7ff ff84 	bl	80a145c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1554:	4620      	mov	r0, r4
 80a1556:	f7fe fda9 	bl	80a00ac <__cxa_guard_release>
 80a155a:	4a06      	ldr	r2, [pc, #24]	; (80a1574 <_Z17_fetch_usbserial1v+0x44>)
 80a155c:	4906      	ldr	r1, [pc, #24]	; (80a1578 <_Z17_fetch_usbserial1v+0x48>)
 80a155e:	4804      	ldr	r0, [pc, #16]	; (80a1570 <_Z17_fetch_usbserial1v+0x40>)
 80a1560:	f000 f966 	bl	80a1830 <__aeabi_atexit>
  return _usbserial1;
}
 80a1564:	4802      	ldr	r0, [pc, #8]	; (80a1570 <_Z17_fetch_usbserial1v+0x40>)
 80a1566:	b006      	add	sp, #24
 80a1568:	bd10      	pop	{r4, pc}
 80a156a:	bf00      	nop
 80a156c:	2000070c 	.word	0x2000070c
 80a1570:	20000794 	.word	0x20000794
 80a1574:	2000036c 	.word	0x2000036c
 80a1578:	080a140d 	.word	0x080a140d

080a157c <_ZN5spark9WiFiClassD1Ev>:
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
    ~WiFiClass() {}
 80a157c:	4770      	bx	lr

080a157e <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a157e:	2200      	movs	r2, #0
 80a1580:	4611      	mov	r1, r2
 80a1582:	4610      	mov	r0, r2
 80a1584:	f7ff bbfe 	b.w	80a0d84 <network_ready>

080a1588 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    void setIPAddressSource(IPAddressSource source) {
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
 80a1588:	4803      	ldr	r0, [pc, #12]	; (80a1598 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a158a:	4b04      	ldr	r3, [pc, #16]	; (80a159c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x14>)
one second timeout is reached). If the aforementioned "bug" is ever fixed by
TI, no changes need to be made to this function, as it would be implemented
the same way.
*****************************************************************************/

    WiFiClass WiFi;
 80a158c:	4a04      	ldr	r2, [pc, #16]	; (80a15a0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x18>)
 80a158e:	4905      	ldr	r1, [pc, #20]	; (80a15a4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x1c>)
 80a1590:	6003      	str	r3, [r0, #0]
 80a1592:	f000 b94d 	b.w	80a1830 <__aeabi_atexit>
 80a1596:	bf00      	nop
 80a1598:	200008ac 	.word	0x200008ac
 80a159c:	080a469c 	.word	0x080a469c
 80a15a0:	2000036c 	.word	0x2000036c
 80a15a4:	080a157d 	.word	0x080a157d

080a15a8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a15a8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a15aa:	4b14      	ldr	r3, [pc, #80]	; (80a15fc <serialEventRun+0x54>)
 80a15ac:	b133      	cbz	r3, 80a15bc <serialEventRun+0x14>
 80a15ae:	f7ff ff83 	bl	80a14b8 <_Z16_fetch_usbserialv>
 80a15b2:	6803      	ldr	r3, [r0, #0]
 80a15b4:	691b      	ldr	r3, [r3, #16]
 80a15b6:	4798      	blx	r3
 80a15b8:	2800      	cmp	r0, #0
 80a15ba:	dc16      	bgt.n	80a15ea <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a15bc:	4b10      	ldr	r3, [pc, #64]	; (80a1600 <serialEventRun+0x58>)
 80a15be:	b133      	cbz	r3, 80a15ce <serialEventRun+0x26>
 80a15c0:	f7ff fefc 	bl	80a13bc <_Z22__fetch_global_Serial1v>
 80a15c4:	6803      	ldr	r3, [r0, #0]
 80a15c6:	691b      	ldr	r3, [r3, #16]
 80a15c8:	4798      	blx	r3
 80a15ca:	2800      	cmp	r0, #0
 80a15cc:	dc10      	bgt.n	80a15f0 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a15ce:	4b0d      	ldr	r3, [pc, #52]	; (80a1604 <serialEventRun+0x5c>)
 80a15d0:	b10b      	cbz	r3, 80a15d6 <serialEventRun+0x2e>
 80a15d2:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a15d6:	4b0c      	ldr	r3, [pc, #48]	; (80a1608 <serialEventRun+0x60>)
 80a15d8:	b17b      	cbz	r3, 80a15fa <serialEventRun+0x52>
 80a15da:	f7ff ffa9 	bl	80a1530 <_Z17_fetch_usbserial1v>
 80a15de:	6803      	ldr	r3, [r0, #0]
 80a15e0:	691b      	ldr	r3, [r3, #16]
 80a15e2:	4798      	blx	r3
 80a15e4:	2800      	cmp	r0, #0
 80a15e6:	dc06      	bgt.n	80a15f6 <serialEventRun+0x4e>
 80a15e8:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a15ea:	f3af 8000 	nop.w
 80a15ee:	e7e5      	b.n	80a15bc <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a15f0:	f3af 8000 	nop.w
 80a15f4:	e7eb      	b.n	80a15ce <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a15f6:	f3af 8000 	nop.w
 80a15fa:	bd08      	pop	{r3, pc}
	...

080a160c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a160c:	b508      	push	{r3, lr}
	serialEventRun();
 80a160e:	f7ff ffcb 	bl	80a15a8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1612:	f7ff fa89 	bl	80a0b28 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1616:	4b01      	ldr	r3, [pc, #4]	; (80a161c <_post_loop+0x10>)
 80a1618:	6018      	str	r0, [r3, #0]
 80a161a:	bd08      	pop	{r3, pc}
 80a161c:	200008b8 	.word	0x200008b8

080a1620 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1620:	4802      	ldr	r0, [pc, #8]	; (80a162c <_Z33system_initialize_user_backup_ramv+0xc>)
 80a1622:	4a03      	ldr	r2, [pc, #12]	; (80a1630 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1624:	4903      	ldr	r1, [pc, #12]	; (80a1634 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1626:	1a12      	subs	r2, r2, r0
 80a1628:	f002 be22 	b.w	80a4270 <memcpy>
 80a162c:	40024000 	.word	0x40024000
 80a1630:	40024004 	.word	0x40024004
 80a1634:	080a4770 	.word	0x080a4770

080a1638 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1638:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a163a:	2300      	movs	r3, #0
 80a163c:	9300      	str	r3, [sp, #0]
 80a163e:	461a      	mov	r2, r3
 80a1640:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1644:	f7ff fb84 	bl	80a0d50 <system_ctrl_set_result>
}
 80a1648:	b003      	add	sp, #12
 80a164a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1650 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a1650:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a1652:	8843      	ldrh	r3, [r0, #2]
 80a1654:	2b0a      	cmp	r3, #10
 80a1656:	d008      	beq.n	80a166a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1658:	2b50      	cmp	r3, #80	; 0x50
 80a165a:	d109      	bne.n	80a1670 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a165c:	4b09      	ldr	r3, [pc, #36]	; (80a1684 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a165e:	681b      	ldr	r3, [r3, #0]
 80a1660:	b13b      	cbz	r3, 80a1672 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a1662:	b003      	add	sp, #12
 80a1664:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a1668:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a166a:	f7ff ffe5 	bl	80a1638 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a166e:	e006      	b.n	80a167e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1670:	2300      	movs	r3, #0
 80a1672:	9300      	str	r3, [sp, #0]
 80a1674:	461a      	mov	r2, r3
 80a1676:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a167a:	f7ff fb69 	bl	80a0d50 <system_ctrl_set_result>
        break;
    }
}
 80a167e:	b003      	add	sp, #12
 80a1680:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1684:	200008b0 	.word	0x200008b0

080a1688 <module_user_init_hook>:

void module_user_init_hook()
{
 80a1688:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a168a:	4c10      	ldr	r4, [pc, #64]	; (80a16cc <module_user_init_hook+0x44>)
 80a168c:	4d10      	ldr	r5, [pc, #64]	; (80a16d0 <module_user_init_hook+0x48>)
 80a168e:	6823      	ldr	r3, [r4, #0]
 80a1690:	42ab      	cmp	r3, r5
 80a1692:	4b10      	ldr	r3, [pc, #64]	; (80a16d4 <module_user_init_hook+0x4c>)
 80a1694:	bf0c      	ite	eq
 80a1696:	2201      	moveq	r2, #1
 80a1698:	2200      	movne	r2, #0
 80a169a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a169c:	d002      	beq.n	80a16a4 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a169e:	f7ff ffbf 	bl	80a1620 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a16a2:	6025      	str	r5, [r4, #0]
#endif

    // todo - add a RNG define for that capability
#if defined(STM32F2XX)
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    srand(HAL_RNG_GetRandomNumber());
 80a16a4:	f7ff fa28 	bl	80a0af8 <HAL_RNG_GetRandomNumber>
 80a16a8:	f002 fdf6 	bl	80a4298 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a16ac:	4b0a      	ldr	r3, [pc, #40]	; (80a16d8 <module_user_init_hook+0x50>)
 80a16ae:	b11b      	cbz	r3, 80a16b8 <module_user_init_hook+0x30>
        uint32_t seed = HAL_RNG_GetRandomNumber();
 80a16b0:	f7ff fa22 	bl	80a0af8 <HAL_RNG_GetRandomNumber>
        random_seed_from_cloud(seed);
 80a16b4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a16b8:	2100      	movs	r1, #0
 80a16ba:	4807      	ldr	r0, [pc, #28]	; (80a16d8 <module_user_init_hook+0x50>)
 80a16bc:	f7ff fb5a 	bl	80a0d74 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a16c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a16c4:	2100      	movs	r1, #0
 80a16c6:	4805      	ldr	r0, [pc, #20]	; (80a16dc <module_user_init_hook+0x54>)
 80a16c8:	f7ff bb38 	b.w	80a0d3c <system_ctrl_set_app_request_handler>
 80a16cc:	40024000 	.word	0x40024000
 80a16d0:	9a271c1e 	.word	0x9a271c1e
 80a16d4:	200008b4 	.word	0x200008b4
 80a16d8:	00000000 	.word	0x00000000
 80a16dc:	080a1651 	.word	0x080a1651

080a16e0 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a16e0:	b510      	push	{r4, lr}
 80a16e2:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a16e4:	480f      	ldr	r0, [pc, #60]	; (80a1724 <pinAvailable+0x44>)
 80a16e6:	f7ff fdf7 	bl	80a12d8 <_ZN8SPIClass9isEnabledEv>
 80a16ea:	b128      	cbz	r0, 80a16f8 <pinAvailable+0x18>
 80a16ec:	f1a4 030d 	sub.w	r3, r4, #13
 80a16f0:	2b02      	cmp	r3, #2
 80a16f2:	d801      	bhi.n	80a16f8 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a16f4:	2000      	movs	r0, #0
 80a16f6:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a16f8:	f000 f840 	bl	80a177c <_Z19__fetch_global_Wirev>
 80a16fc:	f7ff fbac 	bl	80a0e58 <_ZN7TwoWire9isEnabledEv>
 80a1700:	b108      	cbz	r0, 80a1706 <pinAvailable+0x26>
 80a1702:	2c01      	cmp	r4, #1
 80a1704:	d9f6      	bls.n	80a16f4 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a1706:	f7ff fe59 	bl	80a13bc <_Z22__fetch_global_Serial1v>
 80a170a:	f7ff fe53 	bl	80a13b4 <_ZN11USARTSerial9isEnabledEv>
 80a170e:	b118      	cbz	r0, 80a1718 <pinAvailable+0x38>
 80a1710:	f1a4 0312 	sub.w	r3, r4, #18
 80a1714:	2b01      	cmp	r3, #1
 80a1716:	d9ed      	bls.n	80a16f4 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a1718:	2c17      	cmp	r4, #23
 80a171a:	bf8c      	ite	hi
 80a171c:	2000      	movhi	r0, #0
 80a171e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a1720:	bd10      	pop	{r4, pc}
 80a1722:	bf00      	nop
 80a1724:	200008ec 	.word	0x200008ec

080a1728 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1728:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a172a:	b538      	push	{r3, r4, r5, lr}
 80a172c:	4604      	mov	r4, r0
 80a172e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1730:	d80a      	bhi.n	80a1748 <pinMode+0x20>
 80a1732:	29ff      	cmp	r1, #255	; 0xff
 80a1734:	d008      	beq.n	80a1748 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a1736:	f7ff ffd3 	bl	80a16e0 <pinAvailable>
 80a173a:	b128      	cbz	r0, 80a1748 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a173c:	4629      	mov	r1, r5
 80a173e:	4620      	mov	r0, r4
}
 80a1740:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1744:	f7ff ba00 	b.w	80a0b48 <HAL_Pin_Mode>
 80a1748:	bd38      	pop	{r3, r4, r5, pc}

080a174a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a174a:	b538      	push	{r3, r4, r5, lr}
 80a174c:	4604      	mov	r4, r0
 80a174e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a1750:	f7ff fa02 	bl	80a0b58 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a1754:	28ff      	cmp	r0, #255	; 0xff
 80a1756:	d010      	beq.n	80a177a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a1758:	2806      	cmp	r0, #6
 80a175a:	d804      	bhi.n	80a1766 <digitalWrite+0x1c>
 80a175c:	234d      	movs	r3, #77	; 0x4d
 80a175e:	fa23 f000 	lsr.w	r0, r3, r0
 80a1762:	07c3      	lsls	r3, r0, #31
 80a1764:	d409      	bmi.n	80a177a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a1766:	4620      	mov	r0, r4
 80a1768:	f7ff ffba 	bl	80a16e0 <pinAvailable>
 80a176c:	b128      	cbz	r0, 80a177a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a176e:	4629      	mov	r1, r5
 80a1770:	4620      	mov	r0, r4
}
 80a1772:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a1776:	f7ff b9f7 	b.w	80a0b68 <HAL_GPIO_Write>
 80a177a:	bd38      	pop	{r3, r4, r5, pc}

080a177c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a177c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a177e:	4d0b      	ldr	r5, [pc, #44]	; (80a17ac <_Z19__fetch_global_Wirev+0x30>)
 80a1780:	6829      	ldr	r1, [r5, #0]
 80a1782:	f011 0401 	ands.w	r4, r1, #1
 80a1786:	d10f      	bne.n	80a17a8 <_Z19__fetch_global_Wirev+0x2c>
 80a1788:	4628      	mov	r0, r5
 80a178a:	f7fe fc8a 	bl	80a00a2 <__cxa_guard_acquire>
 80a178e:	b158      	cbz	r0, 80a17a8 <_Z19__fetch_global_Wirev+0x2c>
 80a1790:	4621      	mov	r1, r4
 80a1792:	4807      	ldr	r0, [pc, #28]	; (80a17b0 <_Z19__fetch_global_Wirev+0x34>)
 80a1794:	f7ff fb4e 	bl	80a0e34 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a1798:	4628      	mov	r0, r5
 80a179a:	f7fe fc87 	bl	80a00ac <__cxa_guard_release>
 80a179e:	4a05      	ldr	r2, [pc, #20]	; (80a17b4 <_Z19__fetch_global_Wirev+0x38>)
 80a17a0:	4905      	ldr	r1, [pc, #20]	; (80a17b8 <_Z19__fetch_global_Wirev+0x3c>)
 80a17a2:	4803      	ldr	r0, [pc, #12]	; (80a17b0 <_Z19__fetch_global_Wirev+0x34>)
 80a17a4:	f000 f844 	bl	80a1830 <__aeabi_atexit>
	return wire;
}
 80a17a8:	4801      	ldr	r0, [pc, #4]	; (80a17b0 <_Z19__fetch_global_Wirev+0x34>)
 80a17aa:	bd38      	pop	{r3, r4, r5, pc}
 80a17ac:	200008bc 	.word	0x200008bc
 80a17b0:	200008c0 	.word	0x200008c0
 80a17b4:	2000036c 	.word	0x2000036c
 80a17b8:	080a0ddd 	.word	0x080a0ddd

080a17bc <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a17bc:	b513      	push	{r0, r1, r4, lr}
 80a17be:	4c08      	ldr	r4, [pc, #32]	; (80a17e0 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a17c0:	2300      	movs	r3, #0
 80a17c2:	461a      	mov	r2, r3
 80a17c4:	4619      	mov	r1, r3
 80a17c6:	9300      	str	r3, [sp, #0]
 80a17c8:	4620      	mov	r0, r4
 80a17ca:	f7ff fbf1 	bl	80a0fb0 <_ZN9IPAddressC1Ehhhh>
 80a17ce:	4620      	mov	r0, r4
 80a17d0:	4a04      	ldr	r2, [pc, #16]	; (80a17e4 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a17d2:	4905      	ldr	r1, [pc, #20]	; (80a17e8 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a17d4:	b002      	add	sp, #8
 80a17d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a17da:	f000 b829 	b.w	80a1830 <__aeabi_atexit>
 80a17de:	bf00      	nop
 80a17e0:	200008d4 	.word	0x200008d4
 80a17e4:	2000036c 	.word	0x2000036c
 80a17e8:	080a0f55 	.word	0x080a0f55

080a17ec <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a17ec:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a17ee:	4c0c      	ldr	r4, [pc, #48]	; (80a1820 <_GLOBAL__sub_I_SPI+0x34>)
 80a17f0:	4e0c      	ldr	r6, [pc, #48]	; (80a1824 <_GLOBAL__sub_I_SPI+0x38>)
 80a17f2:	4d0d      	ldr	r5, [pc, #52]	; (80a1828 <_GLOBAL__sub_I_SPI+0x3c>)
 80a17f4:	2100      	movs	r1, #0
 80a17f6:	4620      	mov	r0, r4
 80a17f8:	f7ff fd5a 	bl	80a12b0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a17fc:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a17fe:	4c0b      	ldr	r4, [pc, #44]	; (80a182c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1800:	4632      	mov	r2, r6
 80a1802:	4629      	mov	r1, r5
 80a1804:	f000 f814 	bl	80a1830 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1808:	2101      	movs	r1, #1
 80a180a:	4620      	mov	r0, r4
 80a180c:	f7ff fd50 	bl	80a12b0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1810:	4632      	mov	r2, r6
 80a1812:	4629      	mov	r1, r5
 80a1814:	4620      	mov	r0, r4
 80a1816:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a181a:	f000 b809 	b.w	80a1830 <__aeabi_atexit>
 80a181e:	bf00      	nop
 80a1820:	200008ec 	.word	0x200008ec
 80a1824:	2000036c 	.word	0x2000036c
 80a1828:	080a12a1 	.word	0x080a12a1
 80a182c:	200008fc 	.word	0x200008fc

080a1830 <__aeabi_atexit>:
 80a1830:	460b      	mov	r3, r1
 80a1832:	4601      	mov	r1, r0
 80a1834:	4618      	mov	r0, r3
 80a1836:	f002 bd07 	b.w	80a4248 <__cxa_atexit>

080a183a <_ZSt25__throw_bad_function_callv>:
 80a183a:	b508      	push	{r3, lr}
 80a183c:	f7ff faba 	bl	80a0db4 <abort>

080a1840 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a1840:	4b24      	ldr	r3, [pc, #144]	; (80a18d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a1842:	681a      	ldr	r2, [r3, #0]
 80a1844:	07d0      	lsls	r0, r2, #31
 80a1846:	bf5c      	itt	pl
 80a1848:	2201      	movpl	r2, #1
 80a184a:	601a      	strpl	r2, [r3, #0]
 80a184c:	4b22      	ldr	r3, [pc, #136]	; (80a18d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a184e:	681a      	ldr	r2, [r3, #0]
 80a1850:	07d1      	lsls	r1, r2, #31
 80a1852:	bf5c      	itt	pl
 80a1854:	2201      	movpl	r2, #1
 80a1856:	601a      	strpl	r2, [r3, #0]
 80a1858:	4b20      	ldr	r3, [pc, #128]	; (80a18dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a185a:	681a      	ldr	r2, [r3, #0]
 80a185c:	07d2      	lsls	r2, r2, #31
 80a185e:	bf5c      	itt	pl
 80a1860:	2201      	movpl	r2, #1
 80a1862:	601a      	strpl	r2, [r3, #0]
 80a1864:	4b1e      	ldr	r3, [pc, #120]	; (80a18e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a1866:	681a      	ldr	r2, [r3, #0]
 80a1868:	07d0      	lsls	r0, r2, #31
 80a186a:	bf5c      	itt	pl
 80a186c:	2201      	movpl	r2, #1
 80a186e:	601a      	strpl	r2, [r3, #0]
 80a1870:	4b1c      	ldr	r3, [pc, #112]	; (80a18e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a1872:	681a      	ldr	r2, [r3, #0]
 80a1874:	07d1      	lsls	r1, r2, #31
 80a1876:	bf5c      	itt	pl
 80a1878:	2201      	movpl	r2, #1
 80a187a:	601a      	strpl	r2, [r3, #0]
 80a187c:	4b1a      	ldr	r3, [pc, #104]	; (80a18e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a187e:	681a      	ldr	r2, [r3, #0]
 80a1880:	07d2      	lsls	r2, r2, #31
 80a1882:	bf5c      	itt	pl
 80a1884:	2201      	movpl	r2, #1
 80a1886:	601a      	strpl	r2, [r3, #0]
 80a1888:	4b18      	ldr	r3, [pc, #96]	; (80a18ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a188a:	681a      	ldr	r2, [r3, #0]
 80a188c:	07d0      	lsls	r0, r2, #31
 80a188e:	bf5c      	itt	pl
 80a1890:	2201      	movpl	r2, #1
 80a1892:	601a      	strpl	r2, [r3, #0]
 80a1894:	4b16      	ldr	r3, [pc, #88]	; (80a18f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a1896:	681a      	ldr	r2, [r3, #0]
 80a1898:	07d1      	lsls	r1, r2, #31
 80a189a:	bf5c      	itt	pl
 80a189c:	2201      	movpl	r2, #1
 80a189e:	601a      	strpl	r2, [r3, #0]
 80a18a0:	4b14      	ldr	r3, [pc, #80]	; (80a18f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a18a2:	681a      	ldr	r2, [r3, #0]
 80a18a4:	07d2      	lsls	r2, r2, #31
 80a18a6:	bf5c      	itt	pl
 80a18a8:	2201      	movpl	r2, #1
 80a18aa:	601a      	strpl	r2, [r3, #0]
 80a18ac:	4b12      	ldr	r3, [pc, #72]	; (80a18f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a18ae:	681a      	ldr	r2, [r3, #0]
 80a18b0:	07d0      	lsls	r0, r2, #31
 80a18b2:	bf5c      	itt	pl
 80a18b4:	2201      	movpl	r2, #1
 80a18b6:	601a      	strpl	r2, [r3, #0]
 80a18b8:	4b10      	ldr	r3, [pc, #64]	; (80a18fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a18ba:	681a      	ldr	r2, [r3, #0]
 80a18bc:	07d1      	lsls	r1, r2, #31
 80a18be:	bf5c      	itt	pl
 80a18c0:	2201      	movpl	r2, #1
 80a18c2:	601a      	strpl	r2, [r3, #0]
 80a18c4:	4b0e      	ldr	r3, [pc, #56]	; (80a1900 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a18c6:	681a      	ldr	r2, [r3, #0]
 80a18c8:	07d2      	lsls	r2, r2, #31
 80a18ca:	bf5c      	itt	pl
 80a18cc:	2201      	movpl	r2, #1
 80a18ce:	601a      	strpl	r2, [r3, #0]
 80a18d0:	4770      	bx	lr
 80a18d2:	bf00      	nop
 80a18d4:	20000938 	.word	0x20000938
 80a18d8:	20000934 	.word	0x20000934
 80a18dc:	20000930 	.word	0x20000930
 80a18e0:	2000092c 	.word	0x2000092c
 80a18e4:	20000928 	.word	0x20000928
 80a18e8:	20000924 	.word	0x20000924
 80a18ec:	20000920 	.word	0x20000920
 80a18f0:	2000091c 	.word	0x2000091c
 80a18f4:	20000918 	.word	0x20000918
 80a18f8:	20000914 	.word	0x20000914
 80a18fc:	20000910 	.word	0x20000910
 80a1900:	2000090c 	.word	0x2000090c

080a1904 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1904:	4b18      	ldr	r3, [pc, #96]	; (80a1968 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1906:	681a      	ldr	r2, [r3, #0]
 80a1908:	07d1      	lsls	r1, r2, #31
 80a190a:	bf5c      	itt	pl
 80a190c:	2201      	movpl	r2, #1
 80a190e:	601a      	strpl	r2, [r3, #0]
 80a1910:	4b16      	ldr	r3, [pc, #88]	; (80a196c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1912:	681a      	ldr	r2, [r3, #0]
 80a1914:	07d2      	lsls	r2, r2, #31
 80a1916:	bf5c      	itt	pl
 80a1918:	2201      	movpl	r2, #1
 80a191a:	601a      	strpl	r2, [r3, #0]
 80a191c:	4b14      	ldr	r3, [pc, #80]	; (80a1970 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a191e:	681a      	ldr	r2, [r3, #0]
 80a1920:	07d0      	lsls	r0, r2, #31
 80a1922:	bf5c      	itt	pl
 80a1924:	2201      	movpl	r2, #1
 80a1926:	601a      	strpl	r2, [r3, #0]
 80a1928:	4b12      	ldr	r3, [pc, #72]	; (80a1974 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a192a:	681a      	ldr	r2, [r3, #0]
 80a192c:	07d1      	lsls	r1, r2, #31
 80a192e:	bf5c      	itt	pl
 80a1930:	2201      	movpl	r2, #1
 80a1932:	601a      	strpl	r2, [r3, #0]
 80a1934:	4b10      	ldr	r3, [pc, #64]	; (80a1978 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1936:	681a      	ldr	r2, [r3, #0]
 80a1938:	07d2      	lsls	r2, r2, #31
 80a193a:	bf5c      	itt	pl
 80a193c:	2201      	movpl	r2, #1
 80a193e:	601a      	strpl	r2, [r3, #0]
 80a1940:	4b0e      	ldr	r3, [pc, #56]	; (80a197c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1942:	681a      	ldr	r2, [r3, #0]
 80a1944:	07d0      	lsls	r0, r2, #31
 80a1946:	bf5c      	itt	pl
 80a1948:	2201      	movpl	r2, #1
 80a194a:	601a      	strpl	r2, [r3, #0]
 80a194c:	4b0c      	ldr	r3, [pc, #48]	; (80a1980 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a194e:	681a      	ldr	r2, [r3, #0]
 80a1950:	07d1      	lsls	r1, r2, #31
 80a1952:	bf5c      	itt	pl
 80a1954:	2201      	movpl	r2, #1
 80a1956:	601a      	strpl	r2, [r3, #0]
 80a1958:	4b0a      	ldr	r3, [pc, #40]	; (80a1984 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a195a:	681a      	ldr	r2, [r3, #0]
 80a195c:	07d2      	lsls	r2, r2, #31
 80a195e:	bf5c      	itt	pl
 80a1960:	2201      	movpl	r2, #1
 80a1962:	601a      	strpl	r2, [r3, #0]
 80a1964:	4770      	bx	lr
 80a1966:	bf00      	nop
 80a1968:	20000958 	.word	0x20000958
 80a196c:	20000954 	.word	0x20000954
 80a1970:	20000950 	.word	0x20000950
 80a1974:	2000094c 	.word	0x2000094c
 80a1978:	20000948 	.word	0x20000948
 80a197c:	20000944 	.word	0x20000944
 80a1980:	20000940 	.word	0x20000940
 80a1984:	2000093c 	.word	0x2000093c

080a1988 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1988:	4b18      	ldr	r3, [pc, #96]	; (80a19ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a198a:	681a      	ldr	r2, [r3, #0]
 80a198c:	07d1      	lsls	r1, r2, #31
 80a198e:	bf5c      	itt	pl
 80a1990:	2201      	movpl	r2, #1
 80a1992:	601a      	strpl	r2, [r3, #0]
 80a1994:	4b16      	ldr	r3, [pc, #88]	; (80a19f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1996:	681a      	ldr	r2, [r3, #0]
 80a1998:	07d2      	lsls	r2, r2, #31
 80a199a:	bf5c      	itt	pl
 80a199c:	2201      	movpl	r2, #1
 80a199e:	601a      	strpl	r2, [r3, #0]
 80a19a0:	4b14      	ldr	r3, [pc, #80]	; (80a19f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a19a2:	681a      	ldr	r2, [r3, #0]
 80a19a4:	07d0      	lsls	r0, r2, #31
 80a19a6:	bf5c      	itt	pl
 80a19a8:	2201      	movpl	r2, #1
 80a19aa:	601a      	strpl	r2, [r3, #0]
 80a19ac:	4b12      	ldr	r3, [pc, #72]	; (80a19f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a19ae:	681a      	ldr	r2, [r3, #0]
 80a19b0:	07d1      	lsls	r1, r2, #31
 80a19b2:	bf5c      	itt	pl
 80a19b4:	2201      	movpl	r2, #1
 80a19b6:	601a      	strpl	r2, [r3, #0]
 80a19b8:	4b10      	ldr	r3, [pc, #64]	; (80a19fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a19ba:	681a      	ldr	r2, [r3, #0]
 80a19bc:	07d2      	lsls	r2, r2, #31
 80a19be:	bf5c      	itt	pl
 80a19c0:	2201      	movpl	r2, #1
 80a19c2:	601a      	strpl	r2, [r3, #0]
 80a19c4:	4b0e      	ldr	r3, [pc, #56]	; (80a1a00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a19c6:	681a      	ldr	r2, [r3, #0]
 80a19c8:	07d0      	lsls	r0, r2, #31
 80a19ca:	bf5c      	itt	pl
 80a19cc:	2201      	movpl	r2, #1
 80a19ce:	601a      	strpl	r2, [r3, #0]
 80a19d0:	4b0c      	ldr	r3, [pc, #48]	; (80a1a04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a19d2:	681a      	ldr	r2, [r3, #0]
 80a19d4:	07d1      	lsls	r1, r2, #31
 80a19d6:	bf5c      	itt	pl
 80a19d8:	2201      	movpl	r2, #1
 80a19da:	601a      	strpl	r2, [r3, #0]
 80a19dc:	4b0a      	ldr	r3, [pc, #40]	; (80a1a08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a19de:	681a      	ldr	r2, [r3, #0]
 80a19e0:	07d2      	lsls	r2, r2, #31
 80a19e2:	bf5c      	itt	pl
 80a19e4:	2201      	movpl	r2, #1
 80a19e6:	601a      	strpl	r2, [r3, #0]
 80a19e8:	4770      	bx	lr
 80a19ea:	bf00      	nop
 80a19ec:	20000978 	.word	0x20000978
 80a19f0:	20000974 	.word	0x20000974
 80a19f4:	20000970 	.word	0x20000970
 80a19f8:	2000096c 	.word	0x2000096c
 80a19fc:	20000968 	.word	0x20000968
 80a1a00:	20000964 	.word	0x20000964
 80a1a04:	20000960 	.word	0x20000960
 80a1a08:	2000095c 	.word	0x2000095c

080a1a0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a1a0c:	4b24      	ldr	r3, [pc, #144]	; (80a1aa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a1a0e:	681a      	ldr	r2, [r3, #0]
 80a1a10:	07d0      	lsls	r0, r2, #31
 80a1a12:	bf5c      	itt	pl
 80a1a14:	2201      	movpl	r2, #1
 80a1a16:	601a      	strpl	r2, [r3, #0]
 80a1a18:	4b22      	ldr	r3, [pc, #136]	; (80a1aa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a1a1a:	681a      	ldr	r2, [r3, #0]
 80a1a1c:	07d1      	lsls	r1, r2, #31
 80a1a1e:	bf5c      	itt	pl
 80a1a20:	2201      	movpl	r2, #1
 80a1a22:	601a      	strpl	r2, [r3, #0]
 80a1a24:	4b20      	ldr	r3, [pc, #128]	; (80a1aa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a1a26:	681a      	ldr	r2, [r3, #0]
 80a1a28:	07d2      	lsls	r2, r2, #31
 80a1a2a:	bf5c      	itt	pl
 80a1a2c:	2201      	movpl	r2, #1
 80a1a2e:	601a      	strpl	r2, [r3, #0]
 80a1a30:	4b1e      	ldr	r3, [pc, #120]	; (80a1aac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a1a32:	681a      	ldr	r2, [r3, #0]
 80a1a34:	07d0      	lsls	r0, r2, #31
 80a1a36:	bf5c      	itt	pl
 80a1a38:	2201      	movpl	r2, #1
 80a1a3a:	601a      	strpl	r2, [r3, #0]
 80a1a3c:	4b1c      	ldr	r3, [pc, #112]	; (80a1ab0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a1a3e:	681a      	ldr	r2, [r3, #0]
 80a1a40:	07d1      	lsls	r1, r2, #31
 80a1a42:	bf5c      	itt	pl
 80a1a44:	2201      	movpl	r2, #1
 80a1a46:	601a      	strpl	r2, [r3, #0]
 80a1a48:	4b1a      	ldr	r3, [pc, #104]	; (80a1ab4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a1a4a:	681a      	ldr	r2, [r3, #0]
 80a1a4c:	07d2      	lsls	r2, r2, #31
 80a1a4e:	bf5c      	itt	pl
 80a1a50:	2201      	movpl	r2, #1
 80a1a52:	601a      	strpl	r2, [r3, #0]
 80a1a54:	4b18      	ldr	r3, [pc, #96]	; (80a1ab8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a1a56:	681a      	ldr	r2, [r3, #0]
 80a1a58:	07d0      	lsls	r0, r2, #31
 80a1a5a:	bf5c      	itt	pl
 80a1a5c:	2201      	movpl	r2, #1
 80a1a5e:	601a      	strpl	r2, [r3, #0]
 80a1a60:	4b16      	ldr	r3, [pc, #88]	; (80a1abc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a1a62:	681a      	ldr	r2, [r3, #0]
 80a1a64:	07d1      	lsls	r1, r2, #31
 80a1a66:	bf5c      	itt	pl
 80a1a68:	2201      	movpl	r2, #1
 80a1a6a:	601a      	strpl	r2, [r3, #0]
 80a1a6c:	4b14      	ldr	r3, [pc, #80]	; (80a1ac0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a1a6e:	681a      	ldr	r2, [r3, #0]
 80a1a70:	07d2      	lsls	r2, r2, #31
 80a1a72:	bf5c      	itt	pl
 80a1a74:	2201      	movpl	r2, #1
 80a1a76:	601a      	strpl	r2, [r3, #0]
 80a1a78:	4b12      	ldr	r3, [pc, #72]	; (80a1ac4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a1a7a:	681a      	ldr	r2, [r3, #0]
 80a1a7c:	07d0      	lsls	r0, r2, #31
 80a1a7e:	bf5c      	itt	pl
 80a1a80:	2201      	movpl	r2, #1
 80a1a82:	601a      	strpl	r2, [r3, #0]
 80a1a84:	4b10      	ldr	r3, [pc, #64]	; (80a1ac8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a1a86:	681a      	ldr	r2, [r3, #0]
 80a1a88:	07d1      	lsls	r1, r2, #31
 80a1a8a:	bf5c      	itt	pl
 80a1a8c:	2201      	movpl	r2, #1
 80a1a8e:	601a      	strpl	r2, [r3, #0]
 80a1a90:	4b0e      	ldr	r3, [pc, #56]	; (80a1acc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a1a92:	681a      	ldr	r2, [r3, #0]
 80a1a94:	07d2      	lsls	r2, r2, #31
 80a1a96:	bf5c      	itt	pl
 80a1a98:	2201      	movpl	r2, #1
 80a1a9a:	601a      	strpl	r2, [r3, #0]
 80a1a9c:	4770      	bx	lr
 80a1a9e:	bf00      	nop
 80a1aa0:	200009a8 	.word	0x200009a8
 80a1aa4:	200009a4 	.word	0x200009a4
 80a1aa8:	200009a0 	.word	0x200009a0
 80a1aac:	2000099c 	.word	0x2000099c
 80a1ab0:	20000998 	.word	0x20000998
 80a1ab4:	20000994 	.word	0x20000994
 80a1ab8:	20000990 	.word	0x20000990
 80a1abc:	2000098c 	.word	0x2000098c
 80a1ac0:	20000988 	.word	0x20000988
 80a1ac4:	20000984 	.word	0x20000984
 80a1ac8:	20000980 	.word	0x20000980
 80a1acc:	2000097c 	.word	0x2000097c

080a1ad0 <log>:
 80a1ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1ad4:	b08a      	sub	sp, #40	; 0x28
 80a1ad6:	4604      	mov	r4, r0
 80a1ad8:	460d      	mov	r5, r1
 80a1ada:	f000 fa95 	bl	80a2008 <__ieee754_log>
 80a1ade:	4b37      	ldr	r3, [pc, #220]	; (80a1bbc <log+0xec>)
 80a1ae0:	4606      	mov	r6, r0
 80a1ae2:	f993 8000 	ldrsb.w	r8, [r3]
 80a1ae6:	460f      	mov	r7, r1
 80a1ae8:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80a1aec:	d00d      	beq.n	80a1b0a <log+0x3a>
 80a1aee:	4622      	mov	r2, r4
 80a1af0:	462b      	mov	r3, r5
 80a1af2:	4620      	mov	r0, r4
 80a1af4:	4629      	mov	r1, r5
 80a1af6:	f002 f89b 	bl	80a3c30 <__aeabi_dcmpun>
 80a1afa:	b930      	cbnz	r0, 80a1b0a <log+0x3a>
 80a1afc:	2200      	movs	r2, #0
 80a1afe:	2300      	movs	r3, #0
 80a1b00:	4620      	mov	r0, r4
 80a1b02:	4629      	mov	r1, r5
 80a1b04:	f002 f88a 	bl	80a3c1c <__aeabi_dcmpgt>
 80a1b08:	b120      	cbz	r0, 80a1b14 <log+0x44>
 80a1b0a:	4630      	mov	r0, r6
 80a1b0c:	4639      	mov	r1, r7
 80a1b0e:	b00a      	add	sp, #40	; 0x28
 80a1b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1b14:	4b2a      	ldr	r3, [pc, #168]	; (80a1bc0 <log+0xf0>)
 80a1b16:	9008      	str	r0, [sp, #32]
 80a1b18:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80a1b1c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80a1b20:	9301      	str	r3, [sp, #4]
 80a1b22:	f1b8 0f00 	cmp.w	r8, #0
 80a1b26:	d119      	bne.n	80a1b5c <log+0x8c>
 80a1b28:	4f26      	ldr	r7, [pc, #152]	; (80a1bc4 <log+0xf4>)
 80a1b2a:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
 80a1b2e:	4620      	mov	r0, r4
 80a1b30:	4629      	mov	r1, r5
 80a1b32:	2200      	movs	r2, #0
 80a1b34:	2300      	movs	r3, #0
 80a1b36:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a1b3a:	f002 f847 	bl	80a3bcc <__aeabi_dcmpeq>
 80a1b3e:	2800      	cmp	r0, #0
 80a1b40:	d034      	beq.n	80a1bac <log+0xdc>
 80a1b42:	2302      	movs	r3, #2
 80a1b44:	9300      	str	r3, [sp, #0]
 80a1b46:	4668      	mov	r0, sp
 80a1b48:	f001 fb0e 	bl	80a3168 <matherr>
 80a1b4c:	b1a8      	cbz	r0, 80a1b7a <log+0xaa>
 80a1b4e:	9b08      	ldr	r3, [sp, #32]
 80a1b50:	b9c3      	cbnz	r3, 80a1b84 <log+0xb4>
 80a1b52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a1b56:	b00a      	add	sp, #40	; 0x28
 80a1b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1b5c:	4f1a      	ldr	r7, [pc, #104]	; (80a1bc8 <log+0xf8>)
 80a1b5e:	2600      	movs	r6, #0
 80a1b60:	4620      	mov	r0, r4
 80a1b62:	4629      	mov	r1, r5
 80a1b64:	2200      	movs	r2, #0
 80a1b66:	2300      	movs	r3, #0
 80a1b68:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a1b6c:	f002 f82e 	bl	80a3bcc <__aeabi_dcmpeq>
 80a1b70:	b168      	cbz	r0, 80a1b8e <log+0xbe>
 80a1b72:	2302      	movs	r3, #2
 80a1b74:	4598      	cmp	r8, r3
 80a1b76:	9300      	str	r3, [sp, #0]
 80a1b78:	d1e5      	bne.n	80a1b46 <log+0x76>
 80a1b7a:	f002 fb73 	bl	80a4264 <__errno>
 80a1b7e:	2322      	movs	r3, #34	; 0x22
 80a1b80:	6003      	str	r3, [r0, #0]
 80a1b82:	e7e4      	b.n	80a1b4e <log+0x7e>
 80a1b84:	f002 fb6e 	bl	80a4264 <__errno>
 80a1b88:	9b08      	ldr	r3, [sp, #32]
 80a1b8a:	6003      	str	r3, [r0, #0]
 80a1b8c:	e7e1      	b.n	80a1b52 <log+0x82>
 80a1b8e:	2301      	movs	r3, #1
 80a1b90:	f1b8 0f02 	cmp.w	r8, #2
 80a1b94:	9300      	str	r3, [sp, #0]
 80a1b96:	d10b      	bne.n	80a1bb0 <log+0xe0>
 80a1b98:	f002 fb64 	bl	80a4264 <__errno>
 80a1b9c:	2321      	movs	r3, #33	; 0x21
 80a1b9e:	6003      	str	r3, [r0, #0]
 80a1ba0:	480a      	ldr	r0, [pc, #40]	; (80a1bcc <log+0xfc>)
 80a1ba2:	f001 fae3 	bl	80a316c <nan>
 80a1ba6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a1baa:	e7d0      	b.n	80a1b4e <log+0x7e>
 80a1bac:	2301      	movs	r3, #1
 80a1bae:	9300      	str	r3, [sp, #0]
 80a1bb0:	4668      	mov	r0, sp
 80a1bb2:	f001 fad9 	bl	80a3168 <matherr>
 80a1bb6:	2800      	cmp	r0, #0
 80a1bb8:	d1f2      	bne.n	80a1ba0 <log+0xd0>
 80a1bba:	e7ed      	b.n	80a1b98 <log+0xc8>
 80a1bbc:	20000304 	.word	0x20000304
 80a1bc0:	080a46a0 	.word	0x080a46a0
 80a1bc4:	c7efffff 	.word	0xc7efffff
 80a1bc8:	fff00000 	.word	0xfff00000
 80a1bcc:	080a46a4 	.word	0x080a46a4

080a1bd0 <log10>:
 80a1bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1bd4:	b08b      	sub	sp, #44	; 0x2c
 80a1bd6:	4604      	mov	r4, r0
 80a1bd8:	460d      	mov	r5, r1
 80a1bda:	f000 fc09 	bl	80a23f0 <__ieee754_log10>
 80a1bde:	4b38      	ldr	r3, [pc, #224]	; (80a1cc0 <log10+0xf0>)
 80a1be0:	4606      	mov	r6, r0
 80a1be2:	f993 8000 	ldrsb.w	r8, [r3]
 80a1be6:	460f      	mov	r7, r1
 80a1be8:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80a1bec:	d00e      	beq.n	80a1c0c <log10+0x3c>
 80a1bee:	4622      	mov	r2, r4
 80a1bf0:	462b      	mov	r3, r5
 80a1bf2:	4620      	mov	r0, r4
 80a1bf4:	4629      	mov	r1, r5
 80a1bf6:	f002 f81b 	bl	80a3c30 <__aeabi_dcmpun>
 80a1bfa:	4681      	mov	r9, r0
 80a1bfc:	b930      	cbnz	r0, 80a1c0c <log10+0x3c>
 80a1bfe:	2200      	movs	r2, #0
 80a1c00:	2300      	movs	r3, #0
 80a1c02:	4620      	mov	r0, r4
 80a1c04:	4629      	mov	r1, r5
 80a1c06:	f001 fff5 	bl	80a3bf4 <__aeabi_dcmple>
 80a1c0a:	b920      	cbnz	r0, 80a1c16 <log10+0x46>
 80a1c0c:	4630      	mov	r0, r6
 80a1c0e:	4639      	mov	r1, r7
 80a1c10:	b00b      	add	sp, #44	; 0x2c
 80a1c12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a1c16:	4b2b      	ldr	r3, [pc, #172]	; (80a1cc4 <log10+0xf4>)
 80a1c18:	f8cd 9020 	str.w	r9, [sp, #32]
 80a1c1c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80a1c20:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80a1c24:	9301      	str	r3, [sp, #4]
 80a1c26:	f1b8 0f00 	cmp.w	r8, #0
 80a1c2a:	d119      	bne.n	80a1c60 <log10+0x90>
 80a1c2c:	4f26      	ldr	r7, [pc, #152]	; (80a1cc8 <log10+0xf8>)
 80a1c2e:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
 80a1c32:	4620      	mov	r0, r4
 80a1c34:	4629      	mov	r1, r5
 80a1c36:	2200      	movs	r2, #0
 80a1c38:	2300      	movs	r3, #0
 80a1c3a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a1c3e:	f001 ffc5 	bl	80a3bcc <__aeabi_dcmpeq>
 80a1c42:	2800      	cmp	r0, #0
 80a1c44:	d034      	beq.n	80a1cb0 <log10+0xe0>
 80a1c46:	2302      	movs	r3, #2
 80a1c48:	9300      	str	r3, [sp, #0]
 80a1c4a:	4668      	mov	r0, sp
 80a1c4c:	f001 fa8c 	bl	80a3168 <matherr>
 80a1c50:	b1a8      	cbz	r0, 80a1c7e <log10+0xae>
 80a1c52:	9b08      	ldr	r3, [sp, #32]
 80a1c54:	b9c3      	cbnz	r3, 80a1c88 <log10+0xb8>
 80a1c56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a1c5a:	b00b      	add	sp, #44	; 0x2c
 80a1c5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a1c60:	4f1a      	ldr	r7, [pc, #104]	; (80a1ccc <log10+0xfc>)
 80a1c62:	2600      	movs	r6, #0
 80a1c64:	4620      	mov	r0, r4
 80a1c66:	4629      	mov	r1, r5
 80a1c68:	2200      	movs	r2, #0
 80a1c6a:	2300      	movs	r3, #0
 80a1c6c:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a1c70:	f001 ffac 	bl	80a3bcc <__aeabi_dcmpeq>
 80a1c74:	b168      	cbz	r0, 80a1c92 <log10+0xc2>
 80a1c76:	2302      	movs	r3, #2
 80a1c78:	4598      	cmp	r8, r3
 80a1c7a:	9300      	str	r3, [sp, #0]
 80a1c7c:	d1e5      	bne.n	80a1c4a <log10+0x7a>
 80a1c7e:	f002 faf1 	bl	80a4264 <__errno>
 80a1c82:	2322      	movs	r3, #34	; 0x22
 80a1c84:	6003      	str	r3, [r0, #0]
 80a1c86:	e7e4      	b.n	80a1c52 <log10+0x82>
 80a1c88:	f002 faec 	bl	80a4264 <__errno>
 80a1c8c:	9b08      	ldr	r3, [sp, #32]
 80a1c8e:	6003      	str	r3, [r0, #0]
 80a1c90:	e7e1      	b.n	80a1c56 <log10+0x86>
 80a1c92:	2301      	movs	r3, #1
 80a1c94:	f1b8 0f02 	cmp.w	r8, #2
 80a1c98:	9300      	str	r3, [sp, #0]
 80a1c9a:	d10b      	bne.n	80a1cb4 <log10+0xe4>
 80a1c9c:	f002 fae2 	bl	80a4264 <__errno>
 80a1ca0:	2321      	movs	r3, #33	; 0x21
 80a1ca2:	6003      	str	r3, [r0, #0]
 80a1ca4:	480a      	ldr	r0, [pc, #40]	; (80a1cd0 <log10+0x100>)
 80a1ca6:	f001 fa61 	bl	80a316c <nan>
 80a1caa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a1cae:	e7d0      	b.n	80a1c52 <log10+0x82>
 80a1cb0:	2301      	movs	r3, #1
 80a1cb2:	9300      	str	r3, [sp, #0]
 80a1cb4:	4668      	mov	r0, sp
 80a1cb6:	f001 fa57 	bl	80a3168 <matherr>
 80a1cba:	2800      	cmp	r0, #0
 80a1cbc:	d1f2      	bne.n	80a1ca4 <log10+0xd4>
 80a1cbe:	e7ed      	b.n	80a1c9c <log10+0xcc>
 80a1cc0:	20000304 	.word	0x20000304
 80a1cc4:	080a46a8 	.word	0x080a46a8
 80a1cc8:	c7efffff 	.word	0xc7efffff
 80a1ccc:	fff00000 	.word	0xfff00000
 80a1cd0:	080a46a4 	.word	0x080a46a4

080a1cd4 <pow>:
 80a1cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1cd8:	b08d      	sub	sp, #52	; 0x34
 80a1cda:	4606      	mov	r6, r0
 80a1cdc:	460f      	mov	r7, r1
 80a1cde:	4614      	mov	r4, r2
 80a1ce0:	461d      	mov	r5, r3
 80a1ce2:	f000 fc11 	bl	80a2508 <__ieee754_pow>
 80a1ce6:	f8df 9310 	ldr.w	r9, [pc, #784]	; 80a1ff8 <pow+0x324>
 80a1cea:	e9cd 0100 	strd	r0, r1, [sp]
 80a1cee:	f999 8000 	ldrsb.w	r8, [r9]
 80a1cf2:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80a1cf6:	d046      	beq.n	80a1d86 <pow+0xb2>
 80a1cf8:	4622      	mov	r2, r4
 80a1cfa:	462b      	mov	r3, r5
 80a1cfc:	4620      	mov	r0, r4
 80a1cfe:	4629      	mov	r1, r5
 80a1d00:	f001 ff96 	bl	80a3c30 <__aeabi_dcmpun>
 80a1d04:	4683      	mov	fp, r0
 80a1d06:	2800      	cmp	r0, #0
 80a1d08:	d13d      	bne.n	80a1d86 <pow+0xb2>
 80a1d0a:	4632      	mov	r2, r6
 80a1d0c:	463b      	mov	r3, r7
 80a1d0e:	4630      	mov	r0, r6
 80a1d10:	4639      	mov	r1, r7
 80a1d12:	f001 ff8d 	bl	80a3c30 <__aeabi_dcmpun>
 80a1d16:	4682      	mov	sl, r0
 80a1d18:	2800      	cmp	r0, #0
 80a1d1a:	d174      	bne.n	80a1e06 <pow+0x132>
 80a1d1c:	4630      	mov	r0, r6
 80a1d1e:	4639      	mov	r1, r7
 80a1d20:	2200      	movs	r2, #0
 80a1d22:	2300      	movs	r3, #0
 80a1d24:	f001 ff52 	bl	80a3bcc <__aeabi_dcmpeq>
 80a1d28:	2800      	cmp	r0, #0
 80a1d2a:	d033      	beq.n	80a1d94 <pow+0xc0>
 80a1d2c:	2200      	movs	r2, #0
 80a1d2e:	2300      	movs	r3, #0
 80a1d30:	4620      	mov	r0, r4
 80a1d32:	4629      	mov	r1, r5
 80a1d34:	f001 ff4a 	bl	80a3bcc <__aeabi_dcmpeq>
 80a1d38:	4683      	mov	fp, r0
 80a1d3a:	b1b8      	cbz	r0, 80a1d6c <pow+0x98>
 80a1d3c:	4aa9      	ldr	r2, [pc, #676]	; (80a1fe4 <pow+0x310>)
 80a1d3e:	2301      	movs	r3, #1
 80a1d40:	2000      	movs	r0, #0
 80a1d42:	2100      	movs	r1, #0
 80a1d44:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80a1d48:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a1d4c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a1d50:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a1d54:	9203      	str	r2, [sp, #12]
 80a1d56:	9302      	str	r3, [sp, #8]
 80a1d58:	f1b8 0f00 	cmp.w	r8, #0
 80a1d5c:	d06c      	beq.n	80a1e38 <pow+0x164>
 80a1d5e:	4ba2      	ldr	r3, [pc, #648]	; (80a1fe8 <pow+0x314>)
 80a1d60:	2200      	movs	r2, #0
 80a1d62:	4610      	mov	r0, r2
 80a1d64:	4619      	mov	r1, r3
 80a1d66:	b00d      	add	sp, #52	; 0x34
 80a1d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1d6c:	4620      	mov	r0, r4
 80a1d6e:	4629      	mov	r1, r5
 80a1d70:	f001 f9f4 	bl	80a315c <finite>
 80a1d74:	b138      	cbz	r0, 80a1d86 <pow+0xb2>
 80a1d76:	2200      	movs	r2, #0
 80a1d78:	2300      	movs	r3, #0
 80a1d7a:	4620      	mov	r0, r4
 80a1d7c:	4629      	mov	r1, r5
 80a1d7e:	f001 ff2f 	bl	80a3be0 <__aeabi_dcmplt>
 80a1d82:	2800      	cmp	r0, #0
 80a1d84:	d16a      	bne.n	80a1e5c <pow+0x188>
 80a1d86:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a1d8a:	4610      	mov	r0, r2
 80a1d8c:	4619      	mov	r1, r3
 80a1d8e:	b00d      	add	sp, #52	; 0x34
 80a1d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1d94:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a1d98:	f001 f9e0 	bl	80a315c <finite>
 80a1d9c:	4680      	mov	r8, r0
 80a1d9e:	2800      	cmp	r0, #0
 80a1da0:	d07d      	beq.n	80a1e9e <pow+0x1ca>
 80a1da2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a1da6:	f04f 0a00 	mov.w	sl, #0
 80a1daa:	f04f 0b00 	mov.w	fp, #0
 80a1dae:	4652      	mov	r2, sl
 80a1db0:	465b      	mov	r3, fp
 80a1db2:	f001 ff0b 	bl	80a3bcc <__aeabi_dcmpeq>
 80a1db6:	2800      	cmp	r0, #0
 80a1db8:	d0e5      	beq.n	80a1d86 <pow+0xb2>
 80a1dba:	4630      	mov	r0, r6
 80a1dbc:	4639      	mov	r1, r7
 80a1dbe:	f001 f9cd 	bl	80a315c <finite>
 80a1dc2:	2800      	cmp	r0, #0
 80a1dc4:	d0df      	beq.n	80a1d86 <pow+0xb2>
 80a1dc6:	4620      	mov	r0, r4
 80a1dc8:	4629      	mov	r1, r5
 80a1dca:	f001 f9c7 	bl	80a315c <finite>
 80a1dce:	2800      	cmp	r0, #0
 80a1dd0:	d0d9      	beq.n	80a1d86 <pow+0xb2>
 80a1dd2:	f999 3000 	ldrsb.w	r3, [r9]
 80a1dd6:	4883      	ldr	r0, [pc, #524]	; (80a1fe4 <pow+0x310>)
 80a1dd8:	2104      	movs	r1, #4
 80a1dda:	2200      	movs	r2, #0
 80a1ddc:	2b02      	cmp	r3, #2
 80a1dde:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a1de2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a1de6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80a1dea:	9003      	str	r0, [sp, #12]
 80a1dec:	9102      	str	r1, [sp, #8]
 80a1dee:	920a      	str	r2, [sp, #40]	; 0x28
 80a1df0:	d004      	beq.n	80a1dfc <pow+0x128>
 80a1df2:	a802      	add	r0, sp, #8
 80a1df4:	f001 f9b8 	bl	80a3168 <matherr>
 80a1df8:	2800      	cmp	r0, #0
 80a1dfa:	d147      	bne.n	80a1e8c <pow+0x1b8>
 80a1dfc:	f002 fa32 	bl	80a4264 <__errno>
 80a1e00:	2322      	movs	r3, #34	; 0x22
 80a1e02:	6003      	str	r3, [r0, #0]
 80a1e04:	e042      	b.n	80a1e8c <pow+0x1b8>
 80a1e06:	2200      	movs	r2, #0
 80a1e08:	2300      	movs	r3, #0
 80a1e0a:	4620      	mov	r0, r4
 80a1e0c:	4629      	mov	r1, r5
 80a1e0e:	f001 fedd 	bl	80a3bcc <__aeabi_dcmpeq>
 80a1e12:	2800      	cmp	r0, #0
 80a1e14:	d0b7      	beq.n	80a1d86 <pow+0xb2>
 80a1e16:	4b74      	ldr	r3, [pc, #464]	; (80a1fe8 <pow+0x314>)
 80a1e18:	4872      	ldr	r0, [pc, #456]	; (80a1fe4 <pow+0x310>)
 80a1e1a:	2200      	movs	r2, #0
 80a1e1c:	2101      	movs	r1, #1
 80a1e1e:	f1b8 0f02 	cmp.w	r8, #2
 80a1e22:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80a1e26:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a1e2a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a1e2e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a1e32:	9003      	str	r0, [sp, #12]
 80a1e34:	9102      	str	r1, [sp, #8]
 80a1e36:	d0a8      	beq.n	80a1d8a <pow+0xb6>
 80a1e38:	a802      	add	r0, sp, #8
 80a1e3a:	f001 f995 	bl	80a3168 <matherr>
 80a1e3e:	2800      	cmp	r0, #0
 80a1e40:	d07e      	beq.n	80a1f40 <pow+0x26c>
 80a1e42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a1e44:	b343      	cbz	r3, 80a1e98 <pow+0x1c4>
 80a1e46:	f002 fa0d 	bl	80a4264 <__errno>
 80a1e4a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a1e4e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a1e50:	6001      	str	r1, [r0, #0]
 80a1e52:	4610      	mov	r0, r2
 80a1e54:	4619      	mov	r1, r3
 80a1e56:	b00d      	add	sp, #52	; 0x34
 80a1e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1e5c:	4961      	ldr	r1, [pc, #388]	; (80a1fe4 <pow+0x310>)
 80a1e5e:	f999 3000 	ldrsb.w	r3, [r9]
 80a1e62:	2201      	movs	r2, #1
 80a1e64:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80a1e68:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a1e6c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a1e70:	9103      	str	r1, [sp, #12]
 80a1e72:	9202      	str	r2, [sp, #8]
 80a1e74:	2b00      	cmp	r3, #0
 80a1e76:	d068      	beq.n	80a1f4a <pow+0x276>
 80a1e78:	495c      	ldr	r1, [pc, #368]	; (80a1fec <pow+0x318>)
 80a1e7a:	2000      	movs	r0, #0
 80a1e7c:	2b02      	cmp	r3, #2
 80a1e7e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a1e82:	d166      	bne.n	80a1f52 <pow+0x27e>
 80a1e84:	f002 f9ee 	bl	80a4264 <__errno>
 80a1e88:	2321      	movs	r3, #33	; 0x21
 80a1e8a:	6003      	str	r3, [r0, #0]
 80a1e8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a1e8e:	b11b      	cbz	r3, 80a1e98 <pow+0x1c4>
 80a1e90:	f002 f9e8 	bl	80a4264 <__errno>
 80a1e94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a1e96:	6003      	str	r3, [r0, #0]
 80a1e98:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a1e9c:	e775      	b.n	80a1d8a <pow+0xb6>
 80a1e9e:	4630      	mov	r0, r6
 80a1ea0:	4639      	mov	r1, r7
 80a1ea2:	f001 f95b 	bl	80a315c <finite>
 80a1ea6:	2800      	cmp	r0, #0
 80a1ea8:	f43f af7b 	beq.w	80a1da2 <pow+0xce>
 80a1eac:	4620      	mov	r0, r4
 80a1eae:	4629      	mov	r1, r5
 80a1eb0:	f001 f954 	bl	80a315c <finite>
 80a1eb4:	2800      	cmp	r0, #0
 80a1eb6:	f43f af74 	beq.w	80a1da2 <pow+0xce>
 80a1eba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a1ebe:	4610      	mov	r0, r2
 80a1ec0:	4619      	mov	r1, r3
 80a1ec2:	f001 feb5 	bl	80a3c30 <__aeabi_dcmpun>
 80a1ec6:	2800      	cmp	r0, #0
 80a1ec8:	d16f      	bne.n	80a1faa <pow+0x2d6>
 80a1eca:	4b46      	ldr	r3, [pc, #280]	; (80a1fe4 <pow+0x310>)
 80a1ecc:	f999 8000 	ldrsb.w	r8, [r9]
 80a1ed0:	9303      	str	r3, [sp, #12]
 80a1ed2:	2303      	movs	r3, #3
 80a1ed4:	900a      	str	r0, [sp, #40]	; 0x28
 80a1ed6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a1eda:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a1ede:	9302      	str	r3, [sp, #8]
 80a1ee0:	f1b8 0f00 	cmp.w	r8, #0
 80a1ee4:	d13b      	bne.n	80a1f5e <pow+0x28a>
 80a1ee6:	f8df b114 	ldr.w	fp, [pc, #276]	; 80a1ffc <pow+0x328>
 80a1eea:	f04f 4a60 	mov.w	sl, #3758096384	; 0xe0000000
 80a1eee:	2200      	movs	r2, #0
 80a1ef0:	2300      	movs	r3, #0
 80a1ef2:	4630      	mov	r0, r6
 80a1ef4:	4639      	mov	r1, r7
 80a1ef6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80a1efa:	f001 fe71 	bl	80a3be0 <__aeabi_dcmplt>
 80a1efe:	2800      	cmp	r0, #0
 80a1f00:	f43f af77 	beq.w	80a1df2 <pow+0x11e>
 80a1f04:	2200      	movs	r2, #0
 80a1f06:	4b3a      	ldr	r3, [pc, #232]	; (80a1ff0 <pow+0x31c>)
 80a1f08:	4620      	mov	r0, r4
 80a1f0a:	4629      	mov	r1, r5
 80a1f0c:	f001 fbf6 	bl	80a36fc <__aeabi_dmul>
 80a1f10:	4604      	mov	r4, r0
 80a1f12:	460d      	mov	r5, r1
 80a1f14:	f001 f930 	bl	80a3178 <rint>
 80a1f18:	4602      	mov	r2, r0
 80a1f1a:	460b      	mov	r3, r1
 80a1f1c:	4620      	mov	r0, r4
 80a1f1e:	4629      	mov	r1, r5
 80a1f20:	f001 fe54 	bl	80a3bcc <__aeabi_dcmpeq>
 80a1f24:	2800      	cmp	r0, #0
 80a1f26:	d13d      	bne.n	80a1fa4 <pow+0x2d0>
 80a1f28:	4b32      	ldr	r3, [pc, #200]	; (80a1ff4 <pow+0x320>)
 80a1f2a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a1f2e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a1f32:	f999 8000 	ldrsb.w	r8, [r9]
 80a1f36:	f1b8 0f02 	cmp.w	r8, #2
 80a1f3a:	f47f af5a 	bne.w	80a1df2 <pow+0x11e>
 80a1f3e:	e75d      	b.n	80a1dfc <pow+0x128>
 80a1f40:	f002 f990 	bl	80a4264 <__errno>
 80a1f44:	2321      	movs	r3, #33	; 0x21
 80a1f46:	6003      	str	r3, [r0, #0]
 80a1f48:	e77b      	b.n	80a1e42 <pow+0x16e>
 80a1f4a:	2300      	movs	r3, #0
 80a1f4c:	2400      	movs	r4, #0
 80a1f4e:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80a1f52:	a802      	add	r0, sp, #8
 80a1f54:	f001 f908 	bl	80a3168 <matherr>
 80a1f58:	2800      	cmp	r0, #0
 80a1f5a:	d197      	bne.n	80a1e8c <pow+0x1b8>
 80a1f5c:	e792      	b.n	80a1e84 <pow+0x1b0>
 80a1f5e:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 80a2000 <pow+0x32c>
 80a1f62:	f04f 0a00 	mov.w	sl, #0
 80a1f66:	2200      	movs	r2, #0
 80a1f68:	2300      	movs	r3, #0
 80a1f6a:	4630      	mov	r0, r6
 80a1f6c:	4639      	mov	r1, r7
 80a1f6e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80a1f72:	f001 fe35 	bl	80a3be0 <__aeabi_dcmplt>
 80a1f76:	2800      	cmp	r0, #0
 80a1f78:	d0dd      	beq.n	80a1f36 <pow+0x262>
 80a1f7a:	2200      	movs	r2, #0
 80a1f7c:	4b1c      	ldr	r3, [pc, #112]	; (80a1ff0 <pow+0x31c>)
 80a1f7e:	4620      	mov	r0, r4
 80a1f80:	4629      	mov	r1, r5
 80a1f82:	f001 fbbb 	bl	80a36fc <__aeabi_dmul>
 80a1f86:	4604      	mov	r4, r0
 80a1f88:	460d      	mov	r5, r1
 80a1f8a:	f001 f8f5 	bl	80a3178 <rint>
 80a1f8e:	4602      	mov	r2, r0
 80a1f90:	460b      	mov	r3, r1
 80a1f92:	4620      	mov	r0, r4
 80a1f94:	4629      	mov	r1, r5
 80a1f96:	f001 fe19 	bl	80a3bcc <__aeabi_dcmpeq>
 80a1f9a:	b918      	cbnz	r0, 80a1fa4 <pow+0x2d0>
 80a1f9c:	4b13      	ldr	r3, [pc, #76]	; (80a1fec <pow+0x318>)
 80a1f9e:	2200      	movs	r2, #0
 80a1fa0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a1fa4:	f999 8000 	ldrsb.w	r8, [r9]
 80a1fa8:	e7c5      	b.n	80a1f36 <pow+0x262>
 80a1faa:	4a0e      	ldr	r2, [pc, #56]	; (80a1fe4 <pow+0x310>)
 80a1fac:	f999 9000 	ldrsb.w	r9, [r9]
 80a1fb0:	2301      	movs	r3, #1
 80a1fb2:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80a1fb6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a1fba:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a1fbe:	9203      	str	r2, [sp, #12]
 80a1fc0:	9302      	str	r3, [sp, #8]
 80a1fc2:	f1b9 0f00 	cmp.w	r9, #0
 80a1fc6:	d0c0      	beq.n	80a1f4a <pow+0x276>
 80a1fc8:	2200      	movs	r2, #0
 80a1fca:	2300      	movs	r3, #0
 80a1fcc:	4610      	mov	r0, r2
 80a1fce:	4619      	mov	r1, r3
 80a1fd0:	f001 fcbe 	bl	80a3950 <__aeabi_ddiv>
 80a1fd4:	f1b9 0f02 	cmp.w	r9, #2
 80a1fd8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a1fdc:	f43f af52 	beq.w	80a1e84 <pow+0x1b0>
 80a1fe0:	e7b7      	b.n	80a1f52 <pow+0x27e>
 80a1fe2:	bf00      	nop
 80a1fe4:	080a46b0 	.word	0x080a46b0
 80a1fe8:	3ff00000 	.word	0x3ff00000
 80a1fec:	fff00000 	.word	0xfff00000
 80a1ff0:	3fe00000 	.word	0x3fe00000
 80a1ff4:	c7efffff 	.word	0xc7efffff
 80a1ff8:	20000304 	.word	0x20000304
 80a1ffc:	47efffff 	.word	0x47efffff
 80a2000:	7ff00000 	.word	0x7ff00000
 80a2004:	00000000 	.word	0x00000000

080a2008 <__ieee754_log>:
 80a2008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a200c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a2010:	b085      	sub	sp, #20
 80a2012:	4606      	mov	r6, r0
 80a2014:	460f      	mov	r7, r1
 80a2016:	460b      	mov	r3, r1
 80a2018:	da5a      	bge.n	80a20d0 <__ieee754_log+0xc8>
 80a201a:	4602      	mov	r2, r0
 80a201c:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80a2020:	4322      	orrs	r2, r4
 80a2022:	f000 80f7 	beq.w	80a2214 <__ieee754_log+0x20c>
 80a2026:	2900      	cmp	r1, #0
 80a2028:	f2c0 8179 	blt.w	80a231e <__ieee754_log+0x316>
 80a202c:	2200      	movs	r2, #0
 80a202e:	4bd6      	ldr	r3, [pc, #856]	; (80a2388 <__ieee754_log+0x380>)
 80a2030:	f001 fb64 	bl	80a36fc <__aeabi_dmul>
 80a2034:	460b      	mov	r3, r1
 80a2036:	460f      	mov	r7, r1
 80a2038:	49d4      	ldr	r1, [pc, #848]	; (80a238c <__ieee754_log+0x384>)
 80a203a:	4606      	mov	r6, r0
 80a203c:	428b      	cmp	r3, r1
 80a203e:	f06f 0235 	mvn.w	r2, #53	; 0x35
 80a2042:	dc49      	bgt.n	80a20d8 <__ieee754_log+0xd0>
 80a2044:	f3c3 0513 	ubfx	r5, r3, #0, #20
 80a2048:	f505 2415 	add.w	r4, r5, #610304	; 0x95000
 80a204c:	f604 7464 	addw	r4, r4, #3940	; 0xf64
 80a2050:	f404 1e80 	and.w	lr, r4, #1048576	; 0x100000
 80a2054:	f08e 517f 	eor.w	r1, lr, #1069547520	; 0x3fc00000
 80a2058:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 80a205c:	151b      	asrs	r3, r3, #20
 80a205e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80a2062:	ea41 0705 	orr.w	r7, r1, r5
 80a2066:	189c      	adds	r4, r3, r2
 80a2068:	4630      	mov	r0, r6
 80a206a:	2200      	movs	r2, #0
 80a206c:	4bc8      	ldr	r3, [pc, #800]	; (80a2390 <__ieee754_log+0x388>)
 80a206e:	4639      	mov	r1, r7
 80a2070:	eb04 541e 	add.w	r4, r4, lr, lsr #20
 80a2074:	f001 f98e 	bl	80a3394 <__aeabi_dsub>
 80a2078:	1cab      	adds	r3, r5, #2
 80a207a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a207e:	2b02      	cmp	r3, #2
 80a2080:	4682      	mov	sl, r0
 80a2082:	468b      	mov	fp, r1
 80a2084:	f04f 0200 	mov.w	r2, #0
 80a2088:	dc2f      	bgt.n	80a20ea <__ieee754_log+0xe2>
 80a208a:	2300      	movs	r3, #0
 80a208c:	f001 fd9e 	bl	80a3bcc <__aeabi_dcmpeq>
 80a2090:	2800      	cmp	r0, #0
 80a2092:	f000 80c8 	beq.w	80a2226 <__ieee754_log+0x21e>
 80a2096:	2c00      	cmp	r4, #0
 80a2098:	f000 814a 	beq.w	80a2330 <__ieee754_log+0x328>
 80a209c:	4620      	mov	r0, r4
 80a209e:	f001 fac7 	bl	80a3630 <__aeabi_i2d>
 80a20a2:	a3a5      	add	r3, pc, #660	; (adr r3, 80a2338 <__ieee754_log+0x330>)
 80a20a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a20a8:	4606      	mov	r6, r0
 80a20aa:	460f      	mov	r7, r1
 80a20ac:	f001 fb26 	bl	80a36fc <__aeabi_dmul>
 80a20b0:	a3a3      	add	r3, pc, #652	; (adr r3, 80a2340 <__ieee754_log+0x338>)
 80a20b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a20b6:	4604      	mov	r4, r0
 80a20b8:	460d      	mov	r5, r1
 80a20ba:	4630      	mov	r0, r6
 80a20bc:	4639      	mov	r1, r7
 80a20be:	f001 fb1d 	bl	80a36fc <__aeabi_dmul>
 80a20c2:	4602      	mov	r2, r0
 80a20c4:	460b      	mov	r3, r1
 80a20c6:	4620      	mov	r0, r4
 80a20c8:	4629      	mov	r1, r5
 80a20ca:	f001 f965 	bl	80a3398 <__adddf3>
 80a20ce:	e009      	b.n	80a20e4 <__ieee754_log+0xdc>
 80a20d0:	49ae      	ldr	r1, [pc, #696]	; (80a238c <__ieee754_log+0x384>)
 80a20d2:	2200      	movs	r2, #0
 80a20d4:	428b      	cmp	r3, r1
 80a20d6:	ddb5      	ble.n	80a2044 <__ieee754_log+0x3c>
 80a20d8:	4632      	mov	r2, r6
 80a20da:	463b      	mov	r3, r7
 80a20dc:	4630      	mov	r0, r6
 80a20de:	4639      	mov	r1, r7
 80a20e0:	f001 f95a 	bl	80a3398 <__adddf3>
 80a20e4:	b005      	add	sp, #20
 80a20e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a20ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a20ee:	f001 f953 	bl	80a3398 <__adddf3>
 80a20f2:	4602      	mov	r2, r0
 80a20f4:	460b      	mov	r3, r1
 80a20f6:	4650      	mov	r0, sl
 80a20f8:	4659      	mov	r1, fp
 80a20fa:	f001 fc29 	bl	80a3950 <__aeabi_ddiv>
 80a20fe:	4606      	mov	r6, r0
 80a2100:	4620      	mov	r0, r4
 80a2102:	460f      	mov	r7, r1
 80a2104:	f001 fa94 	bl	80a3630 <__aeabi_i2d>
 80a2108:	4632      	mov	r2, r6
 80a210a:	e9cd 0100 	strd	r0, r1, [sp]
 80a210e:	463b      	mov	r3, r7
 80a2110:	4630      	mov	r0, r6
 80a2112:	4639      	mov	r1, r7
 80a2114:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80a2118:	f001 faf0 	bl	80a36fc <__aeabi_dmul>
 80a211c:	4602      	mov	r2, r0
 80a211e:	460b      	mov	r3, r1
 80a2120:	4680      	mov	r8, r0
 80a2122:	4689      	mov	r9, r1
 80a2124:	f001 faea 	bl	80a36fc <__aeabi_dmul>
 80a2128:	a387      	add	r3, pc, #540	; (adr r3, 80a2348 <__ieee754_log+0x340>)
 80a212a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a212e:	4606      	mov	r6, r0
 80a2130:	460f      	mov	r7, r1
 80a2132:	f001 fae3 	bl	80a36fc <__aeabi_dmul>
 80a2136:	a386      	add	r3, pc, #536	; (adr r3, 80a2350 <__ieee754_log+0x348>)
 80a2138:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a213c:	f001 f92c 	bl	80a3398 <__adddf3>
 80a2140:	4632      	mov	r2, r6
 80a2142:	463b      	mov	r3, r7
 80a2144:	f001 fada 	bl	80a36fc <__aeabi_dmul>
 80a2148:	a383      	add	r3, pc, #524	; (adr r3, 80a2358 <__ieee754_log+0x350>)
 80a214a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a214e:	f001 f923 	bl	80a3398 <__adddf3>
 80a2152:	4632      	mov	r2, r6
 80a2154:	463b      	mov	r3, r7
 80a2156:	f001 fad1 	bl	80a36fc <__aeabi_dmul>
 80a215a:	a381      	add	r3, pc, #516	; (adr r3, 80a2360 <__ieee754_log+0x358>)
 80a215c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2160:	f001 f91a 	bl	80a3398 <__adddf3>
 80a2164:	4642      	mov	r2, r8
 80a2166:	464b      	mov	r3, r9
 80a2168:	f001 fac8 	bl	80a36fc <__aeabi_dmul>
 80a216c:	a37e      	add	r3, pc, #504	; (adr r3, 80a2368 <__ieee754_log+0x360>)
 80a216e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2172:	4680      	mov	r8, r0
 80a2174:	4689      	mov	r9, r1
 80a2176:	4630      	mov	r0, r6
 80a2178:	4639      	mov	r1, r7
 80a217a:	f001 fabf 	bl	80a36fc <__aeabi_dmul>
 80a217e:	a37c      	add	r3, pc, #496	; (adr r3, 80a2370 <__ieee754_log+0x368>)
 80a2180:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2184:	f001 f908 	bl	80a3398 <__adddf3>
 80a2188:	4632      	mov	r2, r6
 80a218a:	463b      	mov	r3, r7
 80a218c:	f001 fab6 	bl	80a36fc <__aeabi_dmul>
 80a2190:	a379      	add	r3, pc, #484	; (adr r3, 80a2378 <__ieee754_log+0x370>)
 80a2192:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2196:	f001 f8ff 	bl	80a3398 <__adddf3>
 80a219a:	4632      	mov	r2, r6
 80a219c:	463b      	mov	r3, r7
 80a219e:	f001 faad 	bl	80a36fc <__aeabi_dmul>
 80a21a2:	460b      	mov	r3, r1
 80a21a4:	4602      	mov	r2, r0
 80a21a6:	4649      	mov	r1, r9
 80a21a8:	4640      	mov	r0, r8
 80a21aa:	f001 f8f5 	bl	80a3398 <__adddf3>
 80a21ae:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80a21b2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80a21b6:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80a21ba:	3551      	adds	r5, #81	; 0x51
 80a21bc:	431d      	orrs	r5, r3
 80a21be:	2d00      	cmp	r5, #0
 80a21c0:	4680      	mov	r8, r0
 80a21c2:	4689      	mov	r9, r1
 80a21c4:	dd56      	ble.n	80a2274 <__ieee754_log+0x26c>
 80a21c6:	2200      	movs	r2, #0
 80a21c8:	4b72      	ldr	r3, [pc, #456]	; (80a2394 <__ieee754_log+0x38c>)
 80a21ca:	4650      	mov	r0, sl
 80a21cc:	4659      	mov	r1, fp
 80a21ce:	f001 fa95 	bl	80a36fc <__aeabi_dmul>
 80a21d2:	4652      	mov	r2, sl
 80a21d4:	465b      	mov	r3, fp
 80a21d6:	f001 fa91 	bl	80a36fc <__aeabi_dmul>
 80a21da:	4606      	mov	r6, r0
 80a21dc:	460f      	mov	r7, r1
 80a21de:	2c00      	cmp	r4, #0
 80a21e0:	d168      	bne.n	80a22b4 <__ieee754_log+0x2ac>
 80a21e2:	4632      	mov	r2, r6
 80a21e4:	463b      	mov	r3, r7
 80a21e6:	4640      	mov	r0, r8
 80a21e8:	4649      	mov	r1, r9
 80a21ea:	f001 f8d5 	bl	80a3398 <__adddf3>
 80a21ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a21f2:	f001 fa83 	bl	80a36fc <__aeabi_dmul>
 80a21f6:	4602      	mov	r2, r0
 80a21f8:	460b      	mov	r3, r1
 80a21fa:	4630      	mov	r0, r6
 80a21fc:	4639      	mov	r1, r7
 80a21fe:	f001 f8c9 	bl	80a3394 <__aeabi_dsub>
 80a2202:	4602      	mov	r2, r0
 80a2204:	460b      	mov	r3, r1
 80a2206:	4650      	mov	r0, sl
 80a2208:	4659      	mov	r1, fp
 80a220a:	f001 f8c3 	bl	80a3394 <__aeabi_dsub>
 80a220e:	b005      	add	sp, #20
 80a2210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2214:	2200      	movs	r2, #0
 80a2216:	2300      	movs	r3, #0
 80a2218:	2000      	movs	r0, #0
 80a221a:	495f      	ldr	r1, [pc, #380]	; (80a2398 <__ieee754_log+0x390>)
 80a221c:	f001 fb98 	bl	80a3950 <__aeabi_ddiv>
 80a2220:	b005      	add	sp, #20
 80a2222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2226:	a356      	add	r3, pc, #344	; (adr r3, 80a2380 <__ieee754_log+0x378>)
 80a2228:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a222c:	4650      	mov	r0, sl
 80a222e:	4659      	mov	r1, fp
 80a2230:	f001 fa64 	bl	80a36fc <__aeabi_dmul>
 80a2234:	4602      	mov	r2, r0
 80a2236:	460b      	mov	r3, r1
 80a2238:	2000      	movs	r0, #0
 80a223a:	4956      	ldr	r1, [pc, #344]	; (80a2394 <__ieee754_log+0x38c>)
 80a223c:	f001 f8aa 	bl	80a3394 <__aeabi_dsub>
 80a2240:	4652      	mov	r2, sl
 80a2242:	4606      	mov	r6, r0
 80a2244:	460f      	mov	r7, r1
 80a2246:	465b      	mov	r3, fp
 80a2248:	4650      	mov	r0, sl
 80a224a:	4659      	mov	r1, fp
 80a224c:	f001 fa56 	bl	80a36fc <__aeabi_dmul>
 80a2250:	4602      	mov	r2, r0
 80a2252:	460b      	mov	r3, r1
 80a2254:	4630      	mov	r0, r6
 80a2256:	4639      	mov	r1, r7
 80a2258:	f001 fa50 	bl	80a36fc <__aeabi_dmul>
 80a225c:	4606      	mov	r6, r0
 80a225e:	460f      	mov	r7, r1
 80a2260:	2c00      	cmp	r4, #0
 80a2262:	f040 809b 	bne.w	80a239c <__ieee754_log+0x394>
 80a2266:	4602      	mov	r2, r0
 80a2268:	460b      	mov	r3, r1
 80a226a:	4650      	mov	r0, sl
 80a226c:	4659      	mov	r1, fp
 80a226e:	f001 f891 	bl	80a3394 <__aeabi_dsub>
 80a2272:	e737      	b.n	80a20e4 <__ieee754_log+0xdc>
 80a2274:	2c00      	cmp	r4, #0
 80a2276:	f000 80a5 	beq.w	80a23c4 <__ieee754_log+0x3bc>
 80a227a:	a32f      	add	r3, pc, #188	; (adr r3, 80a2338 <__ieee754_log+0x330>)
 80a227c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2280:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a2284:	f001 fa3a 	bl	80a36fc <__aeabi_dmul>
 80a2288:	4642      	mov	r2, r8
 80a228a:	464b      	mov	r3, r9
 80a228c:	4604      	mov	r4, r0
 80a228e:	460d      	mov	r5, r1
 80a2290:	4650      	mov	r0, sl
 80a2292:	4659      	mov	r1, fp
 80a2294:	f001 f87e 	bl	80a3394 <__aeabi_dsub>
 80a2298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a229c:	f001 fa2e 	bl	80a36fc <__aeabi_dmul>
 80a22a0:	a327      	add	r3, pc, #156	; (adr r3, 80a2340 <__ieee754_log+0x338>)
 80a22a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a22a6:	4606      	mov	r6, r0
 80a22a8:	460f      	mov	r7, r1
 80a22aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a22ae:	f001 fa25 	bl	80a36fc <__aeabi_dmul>
 80a22b2:	e021      	b.n	80a22f8 <__ieee754_log+0x2f0>
 80a22b4:	a320      	add	r3, pc, #128	; (adr r3, 80a2338 <__ieee754_log+0x330>)
 80a22b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a22ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a22be:	f001 fa1d 	bl	80a36fc <__aeabi_dmul>
 80a22c2:	4632      	mov	r2, r6
 80a22c4:	463b      	mov	r3, r7
 80a22c6:	4604      	mov	r4, r0
 80a22c8:	460d      	mov	r5, r1
 80a22ca:	4640      	mov	r0, r8
 80a22cc:	4649      	mov	r1, r9
 80a22ce:	f001 f863 	bl	80a3398 <__adddf3>
 80a22d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a22d6:	f001 fa11 	bl	80a36fc <__aeabi_dmul>
 80a22da:	a319      	add	r3, pc, #100	; (adr r3, 80a2340 <__ieee754_log+0x338>)
 80a22dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a22e0:	4680      	mov	r8, r0
 80a22e2:	4689      	mov	r9, r1
 80a22e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a22e8:	f001 fa08 	bl	80a36fc <__aeabi_dmul>
 80a22ec:	4602      	mov	r2, r0
 80a22ee:	460b      	mov	r3, r1
 80a22f0:	4640      	mov	r0, r8
 80a22f2:	4649      	mov	r1, r9
 80a22f4:	f001 f850 	bl	80a3398 <__adddf3>
 80a22f8:	4602      	mov	r2, r0
 80a22fa:	460b      	mov	r3, r1
 80a22fc:	4630      	mov	r0, r6
 80a22fe:	4639      	mov	r1, r7
 80a2300:	f001 f848 	bl	80a3394 <__aeabi_dsub>
 80a2304:	4652      	mov	r2, sl
 80a2306:	465b      	mov	r3, fp
 80a2308:	f001 f844 	bl	80a3394 <__aeabi_dsub>
 80a230c:	4602      	mov	r2, r0
 80a230e:	460b      	mov	r3, r1
 80a2310:	4620      	mov	r0, r4
 80a2312:	4629      	mov	r1, r5
 80a2314:	f001 f83e 	bl	80a3394 <__aeabi_dsub>
 80a2318:	b005      	add	sp, #20
 80a231a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a231e:	4602      	mov	r2, r0
 80a2320:	460b      	mov	r3, r1
 80a2322:	f001 f837 	bl	80a3394 <__aeabi_dsub>
 80a2326:	2200      	movs	r2, #0
 80a2328:	2300      	movs	r3, #0
 80a232a:	f001 fb11 	bl	80a3950 <__aeabi_ddiv>
 80a232e:	e6d9      	b.n	80a20e4 <__ieee754_log+0xdc>
 80a2330:	2000      	movs	r0, #0
 80a2332:	2100      	movs	r1, #0
 80a2334:	e6d6      	b.n	80a20e4 <__ieee754_log+0xdc>
 80a2336:	bf00      	nop
 80a2338:	fee00000 	.word	0xfee00000
 80a233c:	3fe62e42 	.word	0x3fe62e42
 80a2340:	35793c76 	.word	0x35793c76
 80a2344:	3dea39ef 	.word	0x3dea39ef
 80a2348:	df3e5244 	.word	0xdf3e5244
 80a234c:	3fc2f112 	.word	0x3fc2f112
 80a2350:	96cb03de 	.word	0x96cb03de
 80a2354:	3fc74664 	.word	0x3fc74664
 80a2358:	94229359 	.word	0x94229359
 80a235c:	3fd24924 	.word	0x3fd24924
 80a2360:	55555593 	.word	0x55555593
 80a2364:	3fe55555 	.word	0x3fe55555
 80a2368:	d078c69f 	.word	0xd078c69f
 80a236c:	3fc39a09 	.word	0x3fc39a09
 80a2370:	1d8e78af 	.word	0x1d8e78af
 80a2374:	3fcc71c5 	.word	0x3fcc71c5
 80a2378:	9997fa04 	.word	0x9997fa04
 80a237c:	3fd99999 	.word	0x3fd99999
 80a2380:	55555555 	.word	0x55555555
 80a2384:	3fd55555 	.word	0x3fd55555
 80a2388:	43500000 	.word	0x43500000
 80a238c:	7fefffff 	.word	0x7fefffff
 80a2390:	3ff00000 	.word	0x3ff00000
 80a2394:	3fe00000 	.word	0x3fe00000
 80a2398:	c3500000 	.word	0xc3500000
 80a239c:	4620      	mov	r0, r4
 80a239e:	f001 f947 	bl	80a3630 <__aeabi_i2d>
 80a23a2:	a30f      	add	r3, pc, #60	; (adr r3, 80a23e0 <__ieee754_log+0x3d8>)
 80a23a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a23a8:	4680      	mov	r8, r0
 80a23aa:	4689      	mov	r9, r1
 80a23ac:	f001 f9a6 	bl	80a36fc <__aeabi_dmul>
 80a23b0:	a30d      	add	r3, pc, #52	; (adr r3, 80a23e8 <__ieee754_log+0x3e0>)
 80a23b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a23b6:	4604      	mov	r4, r0
 80a23b8:	460d      	mov	r5, r1
 80a23ba:	4640      	mov	r0, r8
 80a23bc:	4649      	mov	r1, r9
 80a23be:	f001 f99d 	bl	80a36fc <__aeabi_dmul>
 80a23c2:	e799      	b.n	80a22f8 <__ieee754_log+0x2f0>
 80a23c4:	4602      	mov	r2, r0
 80a23c6:	460b      	mov	r3, r1
 80a23c8:	4650      	mov	r0, sl
 80a23ca:	4659      	mov	r1, fp
 80a23cc:	f000 ffe2 	bl	80a3394 <__aeabi_dsub>
 80a23d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a23d4:	f001 f992 	bl	80a36fc <__aeabi_dmul>
 80a23d8:	e713      	b.n	80a2202 <__ieee754_log+0x1fa>
 80a23da:	bf00      	nop
 80a23dc:	f3af 8000 	nop.w
 80a23e0:	fee00000 	.word	0xfee00000
 80a23e4:	3fe62e42 	.word	0x3fe62e42
 80a23e8:	35793c76 	.word	0x35793c76
 80a23ec:	3dea39ef 	.word	0x3dea39ef

080a23f0 <__ieee754_log10>:
 80a23f0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a23f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a23f8:	4604      	mov	r4, r0
 80a23fa:	460d      	mov	r5, r1
 80a23fc:	460b      	mov	r3, r1
 80a23fe:	da1a      	bge.n	80a2436 <__ieee754_log10+0x46>
 80a2400:	4602      	mov	r2, r0
 80a2402:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a2406:	4332      	orrs	r2, r6
 80a2408:	d058      	beq.n	80a24bc <__ieee754_log10+0xcc>
 80a240a:	2900      	cmp	r1, #0
 80a240c:	db5e      	blt.n	80a24cc <__ieee754_log10+0xdc>
 80a240e:	2200      	movs	r2, #0
 80a2410:	4b39      	ldr	r3, [pc, #228]	; (80a24f8 <__ieee754_log10+0x108>)
 80a2412:	f001 f973 	bl	80a36fc <__aeabi_dmul>
 80a2416:	460b      	mov	r3, r1
 80a2418:	460d      	mov	r5, r1
 80a241a:	4938      	ldr	r1, [pc, #224]	; (80a24fc <__ieee754_log10+0x10c>)
 80a241c:	4604      	mov	r4, r0
 80a241e:	428b      	cmp	r3, r1
 80a2420:	f06f 0235 	mvn.w	r2, #53	; 0x35
 80a2424:	dd0b      	ble.n	80a243e <__ieee754_log10+0x4e>
 80a2426:	4622      	mov	r2, r4
 80a2428:	462b      	mov	r3, r5
 80a242a:	4620      	mov	r0, r4
 80a242c:	4629      	mov	r1, r5
 80a242e:	f000 ffb3 	bl	80a3398 <__adddf3>
 80a2432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a2436:	4931      	ldr	r1, [pc, #196]	; (80a24fc <__ieee754_log10+0x10c>)
 80a2438:	2200      	movs	r2, #0
 80a243a:	428b      	cmp	r3, r1
 80a243c:	dcf3      	bgt.n	80a2426 <__ieee754_log10+0x36>
 80a243e:	1518      	asrs	r0, r3, #20
 80a2440:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 80a2444:	4410      	add	r0, r2
 80a2446:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 80a244a:	4448      	add	r0, r9
 80a244c:	f3c3 0813 	ubfx	r8, r3, #0, #20
 80a2450:	f001 f8ee 	bl	80a3630 <__aeabi_i2d>
 80a2454:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 80a2458:	3303      	adds	r3, #3
 80a245a:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 80a245e:	4606      	mov	r6, r0
 80a2460:	460f      	mov	r7, r1
 80a2462:	4620      	mov	r0, r4
 80a2464:	4629      	mov	r1, r5
 80a2466:	f7ff fdcf 	bl	80a2008 <__ieee754_log>
 80a246a:	a31d      	add	r3, pc, #116	; (adr r3, 80a24e0 <__ieee754_log10+0xf0>)
 80a246c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2470:	4680      	mov	r8, r0
 80a2472:	4689      	mov	r9, r1
 80a2474:	4630      	mov	r0, r6
 80a2476:	4639      	mov	r1, r7
 80a2478:	f001 f940 	bl	80a36fc <__aeabi_dmul>
 80a247c:	a31a      	add	r3, pc, #104	; (adr r3, 80a24e8 <__ieee754_log10+0xf8>)
 80a247e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2482:	4604      	mov	r4, r0
 80a2484:	460d      	mov	r5, r1
 80a2486:	4640      	mov	r0, r8
 80a2488:	4649      	mov	r1, r9
 80a248a:	f001 f937 	bl	80a36fc <__aeabi_dmul>
 80a248e:	4602      	mov	r2, r0
 80a2490:	460b      	mov	r3, r1
 80a2492:	4620      	mov	r0, r4
 80a2494:	4629      	mov	r1, r5
 80a2496:	f000 ff7f 	bl	80a3398 <__adddf3>
 80a249a:	a315      	add	r3, pc, #84	; (adr r3, 80a24f0 <__ieee754_log10+0x100>)
 80a249c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a24a0:	4604      	mov	r4, r0
 80a24a2:	460d      	mov	r5, r1
 80a24a4:	4630      	mov	r0, r6
 80a24a6:	4639      	mov	r1, r7
 80a24a8:	f001 f928 	bl	80a36fc <__aeabi_dmul>
 80a24ac:	4602      	mov	r2, r0
 80a24ae:	460b      	mov	r3, r1
 80a24b0:	4620      	mov	r0, r4
 80a24b2:	4629      	mov	r1, r5
 80a24b4:	f000 ff70 	bl	80a3398 <__adddf3>
 80a24b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a24bc:	2200      	movs	r2, #0
 80a24be:	2300      	movs	r3, #0
 80a24c0:	2000      	movs	r0, #0
 80a24c2:	490f      	ldr	r1, [pc, #60]	; (80a2500 <__ieee754_log10+0x110>)
 80a24c4:	f001 fa44 	bl	80a3950 <__aeabi_ddiv>
 80a24c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a24cc:	4602      	mov	r2, r0
 80a24ce:	460b      	mov	r3, r1
 80a24d0:	f000 ff60 	bl	80a3394 <__aeabi_dsub>
 80a24d4:	2200      	movs	r2, #0
 80a24d6:	2300      	movs	r3, #0
 80a24d8:	f001 fa3a 	bl	80a3950 <__aeabi_ddiv>
 80a24dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a24e0:	11f12b36 	.word	0x11f12b36
 80a24e4:	3d59fef3 	.word	0x3d59fef3
 80a24e8:	1526e50e 	.word	0x1526e50e
 80a24ec:	3fdbcb7b 	.word	0x3fdbcb7b
 80a24f0:	509f6000 	.word	0x509f6000
 80a24f4:	3fd34413 	.word	0x3fd34413
 80a24f8:	43500000 	.word	0x43500000
 80a24fc:	7fefffff 	.word	0x7fefffff
 80a2500:	c3500000 	.word	0xc3500000
 80a2504:	00000000 	.word	0x00000000

080a2508 <__ieee754_pow>:
 80a2508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a250c:	f023 4800 	bic.w	r8, r3, #2147483648	; 0x80000000
 80a2510:	ea58 0902 	orrs.w	r9, r8, r2
 80a2514:	b093      	sub	sp, #76	; 0x4c
 80a2516:	d03c      	beq.n	80a2592 <__ieee754_pow+0x8a>
 80a2518:	4c71      	ldr	r4, [pc, #452]	; (80a26e0 <__ieee754_pow+0x1d8>)
 80a251a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a251e:	42a6      	cmp	r6, r4
 80a2520:	4683      	mov	fp, r0
 80a2522:	460d      	mov	r5, r1
 80a2524:	dd0c      	ble.n	80a2540 <__ieee754_pow+0x38>
 80a2526:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 80a252a:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80a252e:	ea56 000b 	orrs.w	r0, r6, fp
 80a2532:	d138      	bne.n	80a25a6 <__ieee754_pow+0x9e>
 80a2534:	4683      	mov	fp, r0
 80a2536:	496b      	ldr	r1, [pc, #428]	; (80a26e4 <__ieee754_pow+0x1dc>)
 80a2538:	4658      	mov	r0, fp
 80a253a:	b013      	add	sp, #76	; 0x4c
 80a253c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2540:	469a      	mov	sl, r3
 80a2542:	4696      	mov	lr, r2
 80a2544:	d02b      	beq.n	80a259e <__ieee754_pow+0x96>
 80a2546:	45a0      	cmp	r8, r4
 80a2548:	dced      	bgt.n	80a2526 <__ieee754_pow+0x1e>
 80a254a:	4c65      	ldr	r4, [pc, #404]	; (80a26e0 <__ieee754_pow+0x1d8>)
 80a254c:	45a0      	cmp	r8, r4
 80a254e:	d078      	beq.n	80a2642 <__ieee754_pow+0x13a>
 80a2550:	2d00      	cmp	r5, #0
 80a2552:	460f      	mov	r7, r1
 80a2554:	4681      	mov	r9, r0
 80a2556:	e9cd 2300 	strd	r2, r3, [sp]
 80a255a:	db76      	blt.n	80a264a <__ieee754_pow+0x142>
 80a255c:	2400      	movs	r4, #0
 80a255e:	f1be 0f00 	cmp.w	lr, #0
 80a2562:	d127      	bne.n	80a25b4 <__ieee754_pow+0xac>
 80a2564:	4b5e      	ldr	r3, [pc, #376]	; (80a26e0 <__ieee754_pow+0x1d8>)
 80a2566:	4598      	cmp	r8, r3
 80a2568:	f000 808b 	beq.w	80a2682 <__ieee754_pow+0x17a>
 80a256c:	4b5d      	ldr	r3, [pc, #372]	; (80a26e4 <__ieee754_pow+0x1dc>)
 80a256e:	4598      	cmp	r8, r3
 80a2570:	d052      	beq.n	80a2618 <__ieee754_pow+0x110>
 80a2572:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
 80a2576:	f000 83c9 	beq.w	80a2d0c <__ieee754_pow+0x804>
 80a257a:	4b5b      	ldr	r3, [pc, #364]	; (80a26e8 <__ieee754_pow+0x1e0>)
 80a257c:	459a      	cmp	sl, r3
 80a257e:	d119      	bne.n	80a25b4 <__ieee754_pow+0xac>
 80a2580:	2d00      	cmp	r5, #0
 80a2582:	db17      	blt.n	80a25b4 <__ieee754_pow+0xac>
 80a2584:	4648      	mov	r0, r9
 80a2586:	4639      	mov	r1, r7
 80a2588:	b013      	add	sp, #76	; 0x4c
 80a258a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a258e:	f000 bd1d 	b.w	80a2fcc <__ieee754_sqrt>
 80a2592:	46cb      	mov	fp, r9
 80a2594:	4658      	mov	r0, fp
 80a2596:	4953      	ldr	r1, [pc, #332]	; (80a26e4 <__ieee754_pow+0x1dc>)
 80a2598:	b013      	add	sp, #76	; 0x4c
 80a259a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a259e:	2800      	cmp	r0, #0
 80a25a0:	d1c1      	bne.n	80a2526 <__ieee754_pow+0x1e>
 80a25a2:	45b0      	cmp	r8, r6
 80a25a4:	ddd1      	ble.n	80a254a <__ieee754_pow+0x42>
 80a25a6:	4851      	ldr	r0, [pc, #324]	; (80a26ec <__ieee754_pow+0x1e4>)
 80a25a8:	b013      	add	sp, #76	; 0x4c
 80a25aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a25ae:	f000 bddd 	b.w	80a316c <nan>
 80a25b2:	2400      	movs	r4, #0
 80a25b4:	4648      	mov	r0, r9
 80a25b6:	4639      	mov	r1, r7
 80a25b8:	f000 fdcc 	bl	80a3154 <fabs>
 80a25bc:	f1bb 0f00 	cmp.w	fp, #0
 80a25c0:	d01c      	beq.n	80a25fc <__ieee754_pow+0xf4>
 80a25c2:	0fed      	lsrs	r5, r5, #31
 80a25c4:	3d01      	subs	r5, #1
 80a25c6:	ea54 0305 	orrs.w	r3, r4, r5
 80a25ca:	d070      	beq.n	80a26ae <__ieee754_pow+0x1a6>
 80a25cc:	4b48      	ldr	r3, [pc, #288]	; (80a26f0 <__ieee754_pow+0x1e8>)
 80a25ce:	4598      	cmp	r8, r3
 80a25d0:	f340 8094 	ble.w	80a26fc <__ieee754_pow+0x1f4>
 80a25d4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80a25d8:	4598      	cmp	r8, r3
 80a25da:	f340 840d 	ble.w	80a2df8 <__ieee754_pow+0x8f0>
 80a25de:	4b45      	ldr	r3, [pc, #276]	; (80a26f4 <__ieee754_pow+0x1ec>)
 80a25e0:	429e      	cmp	r6, r3
 80a25e2:	dd70      	ble.n	80a26c6 <__ieee754_pow+0x1be>
 80a25e4:	f1ba 0f00 	cmp.w	sl, #0
 80a25e8:	dd70      	ble.n	80a26cc <__ieee754_pow+0x1c4>
 80a25ea:	a33b      	add	r3, pc, #236	; (adr r3, 80a26d8 <__ieee754_pow+0x1d0>)
 80a25ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a25f0:	4610      	mov	r0, r2
 80a25f2:	4619      	mov	r1, r3
 80a25f4:	f001 f882 	bl	80a36fc <__aeabi_dmul>
 80a25f8:	4683      	mov	fp, r0
 80a25fa:	e79d      	b.n	80a2538 <__ieee754_pow+0x30>
 80a25fc:	b126      	cbz	r6, 80a2608 <__ieee754_pow+0x100>
 80a25fe:	4b39      	ldr	r3, [pc, #228]	; (80a26e4 <__ieee754_pow+0x1dc>)
 80a2600:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80a2604:	429a      	cmp	r2, r3
 80a2606:	d1dc      	bne.n	80a25c2 <__ieee754_pow+0xba>
 80a2608:	f1ba 0f00 	cmp.w	sl, #0
 80a260c:	f2c0 83b7 	blt.w	80a2d7e <__ieee754_pow+0x876>
 80a2610:	2d00      	cmp	r5, #0
 80a2612:	db08      	blt.n	80a2626 <__ieee754_pow+0x11e>
 80a2614:	4683      	mov	fp, r0
 80a2616:	e78f      	b.n	80a2538 <__ieee754_pow+0x30>
 80a2618:	f1ba 0f00 	cmp.w	sl, #0
 80a261c:	f2c0 845e 	blt.w	80a2edc <__ieee754_pow+0x9d4>
 80a2620:	46cb      	mov	fp, r9
 80a2622:	4639      	mov	r1, r7
 80a2624:	e788      	b.n	80a2538 <__ieee754_pow+0x30>
 80a2626:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 80a262a:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80a262e:	ea56 0304 	orrs.w	r3, r6, r4
 80a2632:	f000 8483 	beq.w	80a2f3c <__ieee754_pow+0xa34>
 80a2636:	2c01      	cmp	r4, #1
 80a2638:	d1ec      	bne.n	80a2614 <__ieee754_pow+0x10c>
 80a263a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80a263e:	4683      	mov	fp, r0
 80a2640:	e77a      	b.n	80a2538 <__ieee754_pow+0x30>
 80a2642:	f1be 0f00 	cmp.w	lr, #0
 80a2646:	d083      	beq.n	80a2550 <__ieee754_pow+0x48>
 80a2648:	e76d      	b.n	80a2526 <__ieee754_pow+0x1e>
 80a264a:	4b2b      	ldr	r3, [pc, #172]	; (80a26f8 <__ieee754_pow+0x1f0>)
 80a264c:	4598      	cmp	r8, r3
 80a264e:	dc2c      	bgt.n	80a26aa <__ieee754_pow+0x1a2>
 80a2650:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80a2654:	4598      	cmp	r8, r3
 80a2656:	dd81      	ble.n	80a255c <__ieee754_pow+0x54>
 80a2658:	ea4f 5328 	mov.w	r3, r8, asr #20
 80a265c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80a2660:	2b14      	cmp	r3, #20
 80a2662:	f340 8453 	ble.w	80a2f0c <__ieee754_pow+0xa04>
 80a2666:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80a266a:	fa2e f203 	lsr.w	r2, lr, r3
 80a266e:	fa02 f303 	lsl.w	r3, r2, r3
 80a2672:	459e      	cmp	lr, r3
 80a2674:	f47f af72 	bne.w	80a255c <__ieee754_pow+0x54>
 80a2678:	f002 0201 	and.w	r2, r2, #1
 80a267c:	f1c2 0402 	rsb	r4, r2, #2
 80a2680:	e76d      	b.n	80a255e <__ieee754_pow+0x56>
 80a2682:	f106 4340 	add.w	r3, r6, #3221225472	; 0xc0000000
 80a2686:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80a268a:	ea53 030b 	orrs.w	r3, r3, fp
 80a268e:	f000 833a 	beq.w	80a2d06 <__ieee754_pow+0x7fe>
 80a2692:	4b18      	ldr	r3, [pc, #96]	; (80a26f4 <__ieee754_pow+0x1ec>)
 80a2694:	429e      	cmp	r6, r3
 80a2696:	f340 8367 	ble.w	80a2d68 <__ieee754_pow+0x860>
 80a269a:	f1ba 0f00 	cmp.w	sl, #0
 80a269e:	db15      	blt.n	80a26cc <__ieee754_pow+0x1c4>
 80a26a0:	e9dd 3400 	ldrd	r3, r4, [sp]
 80a26a4:	469b      	mov	fp, r3
 80a26a6:	4621      	mov	r1, r4
 80a26a8:	e746      	b.n	80a2538 <__ieee754_pow+0x30>
 80a26aa:	2402      	movs	r4, #2
 80a26ac:	e757      	b.n	80a255e <__ieee754_pow+0x56>
 80a26ae:	464a      	mov	r2, r9
 80a26b0:	4648      	mov	r0, r9
 80a26b2:	463b      	mov	r3, r7
 80a26b4:	4639      	mov	r1, r7
 80a26b6:	f000 fe6d 	bl	80a3394 <__aeabi_dsub>
 80a26ba:	4602      	mov	r2, r0
 80a26bc:	460b      	mov	r3, r1
 80a26be:	f001 f947 	bl	80a3950 <__aeabi_ddiv>
 80a26c2:	4683      	mov	fp, r0
 80a26c4:	e738      	b.n	80a2538 <__ieee754_pow+0x30>
 80a26c6:	f1ba 0f00 	cmp.w	sl, #0
 80a26ca:	db8e      	blt.n	80a25ea <__ieee754_pow+0xe2>
 80a26cc:	f04f 0b00 	mov.w	fp, #0
 80a26d0:	4659      	mov	r1, fp
 80a26d2:	e731      	b.n	80a2538 <__ieee754_pow+0x30>
 80a26d4:	f3af 8000 	nop.w
 80a26d8:	8800759c 	.word	0x8800759c
 80a26dc:	7e37e43c 	.word	0x7e37e43c
 80a26e0:	7ff00000 	.word	0x7ff00000
 80a26e4:	3ff00000 	.word	0x3ff00000
 80a26e8:	3fe00000 	.word	0x3fe00000
 80a26ec:	080a46a4 	.word	0x080a46a4
 80a26f0:	41e00000 	.word	0x41e00000
 80a26f4:	3fefffff 	.word	0x3fefffff
 80a26f8:	433fffff 	.word	0x433fffff
 80a26fc:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
 80a2700:	f04f 0200 	mov.w	r2, #0
 80a2704:	da05      	bge.n	80a2712 <__ieee754_pow+0x20a>
 80a2706:	4bd0      	ldr	r3, [pc, #832]	; (80a2a48 <__ieee754_pow+0x540>)
 80a2708:	f000 fff8 	bl	80a36fc <__aeabi_dmul>
 80a270c:	460e      	mov	r6, r1
 80a270e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80a2712:	f8df e344 	ldr.w	lr, [pc, #836]	; 80a2a58 <__ieee754_pow+0x550>
 80a2716:	1533      	asrs	r3, r6, #20
 80a2718:	f3c6 0613 	ubfx	r6, r6, #0, #20
 80a271c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80a2720:	f046 577f 	orr.w	r7, r6, #1069547520	; 0x3fc00000
 80a2724:	4576      	cmp	r6, lr
 80a2726:	eb03 0a02 	add.w	sl, r3, r2
 80a272a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80a272e:	f340 83c9 	ble.w	80a2ec4 <__ieee754_pow+0x9bc>
 80a2732:	4bc6      	ldr	r3, [pc, #792]	; (80a2a4c <__ieee754_pow+0x544>)
 80a2734:	2200      	movs	r2, #0
 80a2736:	429e      	cmp	r6, r3
 80a2738:	f340 8404 	ble.w	80a2f44 <__ieee754_pow+0xa3c>
 80a273c:	2300      	movs	r3, #0
 80a273e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a2742:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80a2746:	4bc2      	ldr	r3, [pc, #776]	; (80a2a50 <__ieee754_pow+0x548>)
 80a2748:	2200      	movs	r2, #0
 80a274a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a274e:	f10a 0a01 	add.w	sl, sl, #1
 80a2752:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80a2756:	2600      	movs	r6, #0
 80a2758:	4639      	mov	r1, r7
 80a275a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a275e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a2762:	f000 fe17 	bl	80a3394 <__aeabi_dsub>
 80a2766:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a276a:	4680      	mov	r8, r0
 80a276c:	4689      	mov	r9, r1
 80a276e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80a2772:	f000 fe11 	bl	80a3398 <__adddf3>
 80a2776:	4602      	mov	r2, r0
 80a2778:	460b      	mov	r3, r1
 80a277a:	2000      	movs	r0, #0
 80a277c:	49b4      	ldr	r1, [pc, #720]	; (80a2a50 <__ieee754_pow+0x548>)
 80a277e:	f001 f8e7 	bl	80a3950 <__aeabi_ddiv>
 80a2782:	460a      	mov	r2, r1
 80a2784:	4601      	mov	r1, r0
 80a2786:	4613      	mov	r3, r2
 80a2788:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
 80a278c:	4602      	mov	r2, r0
 80a278e:	4649      	mov	r1, r9
 80a2790:	4640      	mov	r0, r8
 80a2792:	f000 ffb3 	bl	80a36fc <__aeabi_dmul>
 80a2796:	468c      	mov	ip, r1
 80a2798:	4683      	mov	fp, r0
 80a279a:	107b      	asrs	r3, r7, #1
 80a279c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80a27a0:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 80a27a4:	1999      	adds	r1, r3, r6
 80a27a6:	2000      	movs	r0, #0
 80a27a8:	e9cd bc04 	strd	fp, ip, [sp, #16]
 80a27ac:	4606      	mov	r6, r0
 80a27ae:	460f      	mov	r7, r1
 80a27b0:	f04f 0b00 	mov.w	fp, #0
 80a27b4:	4661      	mov	r1, ip
 80a27b6:	4658      	mov	r0, fp
 80a27b8:	4632      	mov	r2, r6
 80a27ba:	463b      	mov	r3, r7
 80a27bc:	e9cd bc10 	strd	fp, ip, [sp, #64]	; 0x40
 80a27c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a27c4:	f000 ff9a 	bl	80a36fc <__aeabi_dmul>
 80a27c8:	4602      	mov	r2, r0
 80a27ca:	460b      	mov	r3, r1
 80a27cc:	4640      	mov	r0, r8
 80a27ce:	4649      	mov	r1, r9
 80a27d0:	f000 fde0 	bl	80a3394 <__aeabi_dsub>
 80a27d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a27d8:	4680      	mov	r8, r0
 80a27da:	4689      	mov	r9, r1
 80a27dc:	4630      	mov	r0, r6
 80a27de:	4639      	mov	r1, r7
 80a27e0:	f000 fdd8 	bl	80a3394 <__aeabi_dsub>
 80a27e4:	4602      	mov	r2, r0
 80a27e6:	460b      	mov	r3, r1
 80a27e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80a27ec:	f000 fdd2 	bl	80a3394 <__aeabi_dsub>
 80a27f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a27f4:	f000 ff82 	bl	80a36fc <__aeabi_dmul>
 80a27f8:	4602      	mov	r2, r0
 80a27fa:	460b      	mov	r3, r1
 80a27fc:	4640      	mov	r0, r8
 80a27fe:	4649      	mov	r1, r9
 80a2800:	f000 fdc8 	bl	80a3394 <__aeabi_dsub>
 80a2804:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80a2808:	f000 ff78 	bl	80a36fc <__aeabi_dmul>
 80a280c:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
 80a2810:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a2814:	463a      	mov	r2, r7
 80a2816:	4643      	mov	r3, r8
 80a2818:	4638      	mov	r0, r7
 80a281a:	4641      	mov	r1, r8
 80a281c:	f000 ff6e 	bl	80a36fc <__aeabi_dmul>
 80a2820:	a377      	add	r3, pc, #476	; (adr r3, 80a2a00 <__ieee754_pow+0x4f8>)
 80a2822:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2826:	4606      	mov	r6, r0
 80a2828:	460f      	mov	r7, r1
 80a282a:	f000 ff67 	bl	80a36fc <__aeabi_dmul>
 80a282e:	a376      	add	r3, pc, #472	; (adr r3, 80a2a08 <__ieee754_pow+0x500>)
 80a2830:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2834:	f000 fdb0 	bl	80a3398 <__adddf3>
 80a2838:	4632      	mov	r2, r6
 80a283a:	463b      	mov	r3, r7
 80a283c:	f000 ff5e 	bl	80a36fc <__aeabi_dmul>
 80a2840:	a373      	add	r3, pc, #460	; (adr r3, 80a2a10 <__ieee754_pow+0x508>)
 80a2842:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2846:	f000 fda7 	bl	80a3398 <__adddf3>
 80a284a:	4632      	mov	r2, r6
 80a284c:	463b      	mov	r3, r7
 80a284e:	f000 ff55 	bl	80a36fc <__aeabi_dmul>
 80a2852:	a371      	add	r3, pc, #452	; (adr r3, 80a2a18 <__ieee754_pow+0x510>)
 80a2854:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2858:	f000 fd9e 	bl	80a3398 <__adddf3>
 80a285c:	4632      	mov	r2, r6
 80a285e:	463b      	mov	r3, r7
 80a2860:	f000 ff4c 	bl	80a36fc <__aeabi_dmul>
 80a2864:	a36e      	add	r3, pc, #440	; (adr r3, 80a2a20 <__ieee754_pow+0x518>)
 80a2866:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a286a:	f000 fd95 	bl	80a3398 <__adddf3>
 80a286e:	4632      	mov	r2, r6
 80a2870:	463b      	mov	r3, r7
 80a2872:	f000 ff43 	bl	80a36fc <__aeabi_dmul>
 80a2876:	a36c      	add	r3, pc, #432	; (adr r3, 80a2a28 <__ieee754_pow+0x520>)
 80a2878:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a287c:	f000 fd8c 	bl	80a3398 <__adddf3>
 80a2880:	4632      	mov	r2, r6
 80a2882:	4680      	mov	r8, r0
 80a2884:	4689      	mov	r9, r1
 80a2886:	463b      	mov	r3, r7
 80a2888:	4630      	mov	r0, r6
 80a288a:	4639      	mov	r1, r7
 80a288c:	f000 ff36 	bl	80a36fc <__aeabi_dmul>
 80a2890:	4602      	mov	r2, r0
 80a2892:	460b      	mov	r3, r1
 80a2894:	4640      	mov	r0, r8
 80a2896:	4649      	mov	r1, r9
 80a2898:	f000 ff30 	bl	80a36fc <__aeabi_dmul>
 80a289c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a28a0:	4606      	mov	r6, r0
 80a28a2:	460f      	mov	r7, r1
 80a28a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a28a8:	f000 fd76 	bl	80a3398 <__adddf3>
 80a28ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a28b0:	f000 ff24 	bl	80a36fc <__aeabi_dmul>
 80a28b4:	4632      	mov	r2, r6
 80a28b6:	463b      	mov	r3, r7
 80a28b8:	f000 fd6e 	bl	80a3398 <__adddf3>
 80a28bc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80a28c0:	4680      	mov	r8, r0
 80a28c2:	4689      	mov	r9, r1
 80a28c4:	4632      	mov	r2, r6
 80a28c6:	463b      	mov	r3, r7
 80a28c8:	4630      	mov	r0, r6
 80a28ca:	4639      	mov	r1, r7
 80a28cc:	f000 ff16 	bl	80a36fc <__aeabi_dmul>
 80a28d0:	2200      	movs	r2, #0
 80a28d2:	4b60      	ldr	r3, [pc, #384]	; (80a2a54 <__ieee754_pow+0x54c>)
 80a28d4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a28d8:	f000 fd5e 	bl	80a3398 <__adddf3>
 80a28dc:	4642      	mov	r2, r8
 80a28de:	464b      	mov	r3, r9
 80a28e0:	f000 fd5a 	bl	80a3398 <__adddf3>
 80a28e4:	e9dd bc10 	ldrd	fp, ip, [sp, #64]	; 0x40
 80a28e8:	460f      	mov	r7, r1
 80a28ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a28ee:	465a      	mov	r2, fp
 80a28f0:	463b      	mov	r3, r7
 80a28f2:	e9cd bc0e 	strd	fp, ip, [sp, #56]	; 0x38
 80a28f6:	465e      	mov	r6, fp
 80a28f8:	f000 ff00 	bl	80a36fc <__aeabi_dmul>
 80a28fc:	2200      	movs	r2, #0
 80a28fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a2902:	4b54      	ldr	r3, [pc, #336]	; (80a2a54 <__ieee754_pow+0x54c>)
 80a2904:	4630      	mov	r0, r6
 80a2906:	4639      	mov	r1, r7
 80a2908:	f000 fd44 	bl	80a3394 <__aeabi_dsub>
 80a290c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a2910:	f000 fd40 	bl	80a3394 <__aeabi_dsub>
 80a2914:	4602      	mov	r2, r0
 80a2916:	460b      	mov	r3, r1
 80a2918:	4640      	mov	r0, r8
 80a291a:	4649      	mov	r1, r9
 80a291c:	f000 fd3a 	bl	80a3394 <__aeabi_dsub>
 80a2920:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a2924:	f000 feea 	bl	80a36fc <__aeabi_dmul>
 80a2928:	4632      	mov	r2, r6
 80a292a:	4680      	mov	r8, r0
 80a292c:	4689      	mov	r9, r1
 80a292e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a2932:	463b      	mov	r3, r7
 80a2934:	f000 fee2 	bl	80a36fc <__aeabi_dmul>
 80a2938:	4602      	mov	r2, r0
 80a293a:	460b      	mov	r3, r1
 80a293c:	4640      	mov	r0, r8
 80a293e:	4649      	mov	r1, r9
 80a2940:	f000 fd2a 	bl	80a3398 <__adddf3>
 80a2944:	4680      	mov	r8, r0
 80a2946:	4689      	mov	r9, r1
 80a2948:	4602      	mov	r2, r0
 80a294a:	460b      	mov	r3, r1
 80a294c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a2950:	f000 fd22 	bl	80a3398 <__adddf3>
 80a2954:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	; 0x38
 80a2958:	a335      	add	r3, pc, #212	; (adr r3, 80a2a30 <__ieee754_pow+0x528>)
 80a295a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a295e:	4658      	mov	r0, fp
 80a2960:	e9cd bc06 	strd	fp, ip, [sp, #24]
 80a2964:	465e      	mov	r6, fp
 80a2966:	460f      	mov	r7, r1
 80a2968:	f000 fec8 	bl	80a36fc <__aeabi_dmul>
 80a296c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a2970:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a2974:	4630      	mov	r0, r6
 80a2976:	4639      	mov	r1, r7
 80a2978:	f000 fd0c 	bl	80a3394 <__aeabi_dsub>
 80a297c:	4602      	mov	r2, r0
 80a297e:	460b      	mov	r3, r1
 80a2980:	4640      	mov	r0, r8
 80a2982:	4649      	mov	r1, r9
 80a2984:	f000 fd06 	bl	80a3394 <__aeabi_dsub>
 80a2988:	a32b      	add	r3, pc, #172	; (adr r3, 80a2a38 <__ieee754_pow+0x530>)
 80a298a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a298e:	f000 feb5 	bl	80a36fc <__aeabi_dmul>
 80a2992:	a32b      	add	r3, pc, #172	; (adr r3, 80a2a40 <__ieee754_pow+0x538>)
 80a2994:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2998:	4680      	mov	r8, r0
 80a299a:	4689      	mov	r9, r1
 80a299c:	4630      	mov	r0, r6
 80a299e:	4639      	mov	r1, r7
 80a29a0:	f000 feac 	bl	80a36fc <__aeabi_dmul>
 80a29a4:	4602      	mov	r2, r0
 80a29a6:	460b      	mov	r3, r1
 80a29a8:	4640      	mov	r0, r8
 80a29aa:	4649      	mov	r1, r9
 80a29ac:	f000 fcf4 	bl	80a3398 <__adddf3>
 80a29b0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80a29b4:	f000 fcf0 	bl	80a3398 <__adddf3>
 80a29b8:	4680      	mov	r8, r0
 80a29ba:	4650      	mov	r0, sl
 80a29bc:	4689      	mov	r9, r1
 80a29be:	f000 fe37 	bl	80a3630 <__aeabi_i2d>
 80a29c2:	4606      	mov	r6, r0
 80a29c4:	460f      	mov	r7, r1
 80a29c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a29ca:	4642      	mov	r2, r8
 80a29cc:	464b      	mov	r3, r9
 80a29ce:	f000 fce3 	bl	80a3398 <__adddf3>
 80a29d2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a29d6:	f000 fcdf 	bl	80a3398 <__adddf3>
 80a29da:	4632      	mov	r2, r6
 80a29dc:	463b      	mov	r3, r7
 80a29de:	f000 fcdb 	bl	80a3398 <__adddf3>
 80a29e2:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
 80a29e6:	4632      	mov	r2, r6
 80a29e8:	4658      	mov	r0, fp
 80a29ea:	463b      	mov	r3, r7
 80a29ec:	46da      	mov	sl, fp
 80a29ee:	468b      	mov	fp, r1
 80a29f0:	f000 fcd0 	bl	80a3394 <__aeabi_dsub>
 80a29f4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a29f8:	e030      	b.n	80a2a5c <__ieee754_pow+0x554>
 80a29fa:	bf00      	nop
 80a29fc:	f3af 8000 	nop.w
 80a2a00:	4a454eef 	.word	0x4a454eef
 80a2a04:	3fca7e28 	.word	0x3fca7e28
 80a2a08:	93c9db65 	.word	0x93c9db65
 80a2a0c:	3fcd864a 	.word	0x3fcd864a
 80a2a10:	a91d4101 	.word	0xa91d4101
 80a2a14:	3fd17460 	.word	0x3fd17460
 80a2a18:	518f264d 	.word	0x518f264d
 80a2a1c:	3fd55555 	.word	0x3fd55555
 80a2a20:	db6fabff 	.word	0xdb6fabff
 80a2a24:	3fdb6db6 	.word	0x3fdb6db6
 80a2a28:	33333303 	.word	0x33333303
 80a2a2c:	3fe33333 	.word	0x3fe33333
 80a2a30:	e0000000 	.word	0xe0000000
 80a2a34:	3feec709 	.word	0x3feec709
 80a2a38:	dc3a03fd 	.word	0xdc3a03fd
 80a2a3c:	3feec709 	.word	0x3feec709
 80a2a40:	145b01f5 	.word	0x145b01f5
 80a2a44:	be3e2fe0 	.word	0xbe3e2fe0
 80a2a48:	43400000 	.word	0x43400000
 80a2a4c:	000bb679 	.word	0x000bb679
 80a2a50:	3ff00000 	.word	0x3ff00000
 80a2a54:	40080000 	.word	0x40080000
 80a2a58:	0003988e 	.word	0x0003988e
 80a2a5c:	f000 fc9a 	bl	80a3394 <__aeabi_dsub>
 80a2a60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a2a64:	f000 fc96 	bl	80a3394 <__aeabi_dsub>
 80a2a68:	4602      	mov	r2, r0
 80a2a6a:	460b      	mov	r3, r1
 80a2a6c:	4640      	mov	r0, r8
 80a2a6e:	4649      	mov	r1, r9
 80a2a70:	f000 fc90 	bl	80a3394 <__aeabi_dsub>
 80a2a74:	4680      	mov	r8, r0
 80a2a76:	4689      	mov	r9, r1
 80a2a78:	e9dd 1200 	ldrd	r1, r2, [sp]
 80a2a7c:	3c01      	subs	r4, #1
 80a2a7e:	ea54 0305 	orrs.w	r3, r4, r5
 80a2a82:	bf14      	ite	ne
 80a2a84:	4cd6      	ldrne	r4, [pc, #856]	; (80a2de0 <__ieee754_pow+0x8d8>)
 80a2a86:	4cd7      	ldreq	r4, [pc, #860]	; (80a2de4 <__ieee754_pow+0x8dc>)
 80a2a88:	2300      	movs	r3, #0
 80a2a8a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80a2a8e:	460b      	mov	r3, r1
 80a2a90:	4614      	mov	r4, r2
 80a2a92:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80a2a96:	2300      	movs	r3, #0
 80a2a98:	9302      	str	r3, [sp, #8]
 80a2a9a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80a2a9e:	4608      	mov	r0, r1
 80a2aa0:	462b      	mov	r3, r5
 80a2aa2:	4611      	mov	r1, r2
 80a2aa4:	4622      	mov	r2, r4
 80a2aa6:	f000 fc75 	bl	80a3394 <__aeabi_dsub>
 80a2aaa:	4652      	mov	r2, sl
 80a2aac:	465b      	mov	r3, fp
 80a2aae:	f000 fe25 	bl	80a36fc <__aeabi_dmul>
 80a2ab2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a2ab6:	4606      	mov	r6, r0
 80a2ab8:	460f      	mov	r7, r1
 80a2aba:	4640      	mov	r0, r8
 80a2abc:	4649      	mov	r1, r9
 80a2abe:	f000 fe1d 	bl	80a36fc <__aeabi_dmul>
 80a2ac2:	4602      	mov	r2, r0
 80a2ac4:	460b      	mov	r3, r1
 80a2ac6:	4630      	mov	r0, r6
 80a2ac8:	4639      	mov	r1, r7
 80a2aca:	f000 fc65 	bl	80a3398 <__adddf3>
 80a2ace:	4606      	mov	r6, r0
 80a2ad0:	460f      	mov	r7, r1
 80a2ad2:	4622      	mov	r2, r4
 80a2ad4:	462b      	mov	r3, r5
 80a2ad6:	4650      	mov	r0, sl
 80a2ad8:	4659      	mov	r1, fp
 80a2ada:	e9cd 6700 	strd	r6, r7, [sp]
 80a2ade:	f000 fe0d 	bl	80a36fc <__aeabi_dmul>
 80a2ae2:	460b      	mov	r3, r1
 80a2ae4:	4602      	mov	r2, r0
 80a2ae6:	4680      	mov	r8, r0
 80a2ae8:	4689      	mov	r9, r1
 80a2aea:	4630      	mov	r0, r6
 80a2aec:	4639      	mov	r1, r7
 80a2aee:	f000 fc53 	bl	80a3398 <__adddf3>
 80a2af2:	4bbd      	ldr	r3, [pc, #756]	; (80a2de8 <__ieee754_pow+0x8e0>)
 80a2af4:	4606      	mov	r6, r0
 80a2af6:	4299      	cmp	r1, r3
 80a2af8:	460d      	mov	r5, r1
 80a2afa:	460c      	mov	r4, r1
 80a2afc:	f340 810e 	ble.w	80a2d1c <__ieee754_pow+0x814>
 80a2b00:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80a2b04:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80a2b08:	4303      	orrs	r3, r0
 80a2b0a:	f040 81f0 	bne.w	80a2eee <__ieee754_pow+0x9e6>
 80a2b0e:	a3a0      	add	r3, pc, #640	; (adr r3, 80a2d90 <__ieee754_pow+0x888>)
 80a2b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2b14:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a2b18:	f000 fc3e 	bl	80a3398 <__adddf3>
 80a2b1c:	4642      	mov	r2, r8
 80a2b1e:	4682      	mov	sl, r0
 80a2b20:	468b      	mov	fp, r1
 80a2b22:	464b      	mov	r3, r9
 80a2b24:	4630      	mov	r0, r6
 80a2b26:	4629      	mov	r1, r5
 80a2b28:	f000 fc34 	bl	80a3394 <__aeabi_dsub>
 80a2b2c:	4602      	mov	r2, r0
 80a2b2e:	460b      	mov	r3, r1
 80a2b30:	4650      	mov	r0, sl
 80a2b32:	4659      	mov	r1, fp
 80a2b34:	f001 f872 	bl	80a3c1c <__aeabi_dcmpgt>
 80a2b38:	2800      	cmp	r0, #0
 80a2b3a:	f040 81d8 	bne.w	80a2eee <__ieee754_pow+0x9e6>
 80a2b3e:	462f      	mov	r7, r5
 80a2b40:	153b      	asrs	r3, r7, #20
 80a2b42:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80a2b46:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80a2b4a:	fa42 f303 	asr.w	r3, r2, r3
 80a2b4e:	4423      	add	r3, r4
 80a2b50:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80a2b54:	4ea5      	ldr	r6, [pc, #660]	; (80a2dec <__ieee754_pow+0x8e4>)
 80a2b56:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80a2b5a:	4116      	asrs	r6, r2
 80a2b5c:	f3c3 0b13 	ubfx	fp, r3, #0, #20
 80a2b60:	2000      	movs	r0, #0
 80a2b62:	f1c2 0514 	rsb	r5, r2, #20
 80a2b66:	ea23 0106 	bic.w	r1, r3, r6
 80a2b6a:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
 80a2b6e:	4602      	mov	r2, r0
 80a2b70:	460b      	mov	r3, r1
 80a2b72:	2c00      	cmp	r4, #0
 80a2b74:	fa4b fb05 	asr.w	fp, fp, r5
 80a2b78:	4640      	mov	r0, r8
 80a2b7a:	4649      	mov	r1, r9
 80a2b7c:	bfb8      	it	lt
 80a2b7e:	f1cb 0b00 	rsblt	fp, fp, #0
 80a2b82:	f000 fc07 	bl	80a3394 <__aeabi_dsub>
 80a2b86:	4602      	mov	r2, r0
 80a2b88:	460b      	mov	r3, r1
 80a2b8a:	4680      	mov	r8, r0
 80a2b8c:	4689      	mov	r9, r1
 80a2b8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a2b92:	f000 fc01 	bl	80a3398 <__adddf3>
 80a2b96:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
 80a2b9a:	2400      	movs	r4, #0
 80a2b9c:	a37e      	add	r3, pc, #504	; (adr r3, 80a2d98 <__ieee754_pow+0x890>)
 80a2b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2ba2:	4620      	mov	r0, r4
 80a2ba4:	460d      	mov	r5, r1
 80a2ba6:	f000 fda9 	bl	80a36fc <__aeabi_dmul>
 80a2baa:	4642      	mov	r2, r8
 80a2bac:	4606      	mov	r6, r0
 80a2bae:	460f      	mov	r7, r1
 80a2bb0:	464b      	mov	r3, r9
 80a2bb2:	4620      	mov	r0, r4
 80a2bb4:	4629      	mov	r1, r5
 80a2bb6:	f000 fbed 	bl	80a3394 <__aeabi_dsub>
 80a2bba:	4602      	mov	r2, r0
 80a2bbc:	460b      	mov	r3, r1
 80a2bbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a2bc2:	f000 fbe7 	bl	80a3394 <__aeabi_dsub>
 80a2bc6:	a376      	add	r3, pc, #472	; (adr r3, 80a2da0 <__ieee754_pow+0x898>)
 80a2bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2bcc:	f000 fd96 	bl	80a36fc <__aeabi_dmul>
 80a2bd0:	a375      	add	r3, pc, #468	; (adr r3, 80a2da8 <__ieee754_pow+0x8a0>)
 80a2bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2bd6:	4680      	mov	r8, r0
 80a2bd8:	4689      	mov	r9, r1
 80a2bda:	4620      	mov	r0, r4
 80a2bdc:	4629      	mov	r1, r5
 80a2bde:	f000 fd8d 	bl	80a36fc <__aeabi_dmul>
 80a2be2:	4602      	mov	r2, r0
 80a2be4:	460b      	mov	r3, r1
 80a2be6:	4640      	mov	r0, r8
 80a2be8:	4649      	mov	r1, r9
 80a2bea:	f000 fbd5 	bl	80a3398 <__adddf3>
 80a2bee:	4680      	mov	r8, r0
 80a2bf0:	4689      	mov	r9, r1
 80a2bf2:	4602      	mov	r2, r0
 80a2bf4:	460b      	mov	r3, r1
 80a2bf6:	4630      	mov	r0, r6
 80a2bf8:	4639      	mov	r1, r7
 80a2bfa:	f000 fbcd 	bl	80a3398 <__adddf3>
 80a2bfe:	4632      	mov	r2, r6
 80a2c00:	463b      	mov	r3, r7
 80a2c02:	4604      	mov	r4, r0
 80a2c04:	460d      	mov	r5, r1
 80a2c06:	f000 fbc5 	bl	80a3394 <__aeabi_dsub>
 80a2c0a:	4602      	mov	r2, r0
 80a2c0c:	460b      	mov	r3, r1
 80a2c0e:	4640      	mov	r0, r8
 80a2c10:	4649      	mov	r1, r9
 80a2c12:	f000 fbbf 	bl	80a3394 <__aeabi_dsub>
 80a2c16:	4622      	mov	r2, r4
 80a2c18:	4680      	mov	r8, r0
 80a2c1a:	4689      	mov	r9, r1
 80a2c1c:	462b      	mov	r3, r5
 80a2c1e:	4620      	mov	r0, r4
 80a2c20:	4629      	mov	r1, r5
 80a2c22:	f000 fd6b 	bl	80a36fc <__aeabi_dmul>
 80a2c26:	a362      	add	r3, pc, #392	; (adr r3, 80a2db0 <__ieee754_pow+0x8a8>)
 80a2c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2c2c:	4606      	mov	r6, r0
 80a2c2e:	460f      	mov	r7, r1
 80a2c30:	f000 fd64 	bl	80a36fc <__aeabi_dmul>
 80a2c34:	a360      	add	r3, pc, #384	; (adr r3, 80a2db8 <__ieee754_pow+0x8b0>)
 80a2c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2c3a:	f000 fbab 	bl	80a3394 <__aeabi_dsub>
 80a2c3e:	4632      	mov	r2, r6
 80a2c40:	463b      	mov	r3, r7
 80a2c42:	f000 fd5b 	bl	80a36fc <__aeabi_dmul>
 80a2c46:	a35e      	add	r3, pc, #376	; (adr r3, 80a2dc0 <__ieee754_pow+0x8b8>)
 80a2c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2c4c:	f000 fba4 	bl	80a3398 <__adddf3>
 80a2c50:	4632      	mov	r2, r6
 80a2c52:	463b      	mov	r3, r7
 80a2c54:	f000 fd52 	bl	80a36fc <__aeabi_dmul>
 80a2c58:	a35b      	add	r3, pc, #364	; (adr r3, 80a2dc8 <__ieee754_pow+0x8c0>)
 80a2c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2c5e:	f000 fb99 	bl	80a3394 <__aeabi_dsub>
 80a2c62:	4632      	mov	r2, r6
 80a2c64:	463b      	mov	r3, r7
 80a2c66:	f000 fd49 	bl	80a36fc <__aeabi_dmul>
 80a2c6a:	a359      	add	r3, pc, #356	; (adr r3, 80a2dd0 <__ieee754_pow+0x8c8>)
 80a2c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2c70:	f000 fb92 	bl	80a3398 <__adddf3>
 80a2c74:	4632      	mov	r2, r6
 80a2c76:	463b      	mov	r3, r7
 80a2c78:	f000 fd40 	bl	80a36fc <__aeabi_dmul>
 80a2c7c:	4602      	mov	r2, r0
 80a2c7e:	460b      	mov	r3, r1
 80a2c80:	4620      	mov	r0, r4
 80a2c82:	4629      	mov	r1, r5
 80a2c84:	f000 fb86 	bl	80a3394 <__aeabi_dsub>
 80a2c88:	4606      	mov	r6, r0
 80a2c8a:	460f      	mov	r7, r1
 80a2c8c:	4602      	mov	r2, r0
 80a2c8e:	460b      	mov	r3, r1
 80a2c90:	4620      	mov	r0, r4
 80a2c92:	4629      	mov	r1, r5
 80a2c94:	f000 fd32 	bl	80a36fc <__aeabi_dmul>
 80a2c98:	2200      	movs	r2, #0
 80a2c9a:	e9cd 0100 	strd	r0, r1, [sp]
 80a2c9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a2ca2:	4630      	mov	r0, r6
 80a2ca4:	4639      	mov	r1, r7
 80a2ca6:	f000 fb75 	bl	80a3394 <__aeabi_dsub>
 80a2caa:	4602      	mov	r2, r0
 80a2cac:	460b      	mov	r3, r1
 80a2cae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a2cb2:	f000 fe4d 	bl	80a3950 <__aeabi_ddiv>
 80a2cb6:	4642      	mov	r2, r8
 80a2cb8:	4606      	mov	r6, r0
 80a2cba:	460f      	mov	r7, r1
 80a2cbc:	464b      	mov	r3, r9
 80a2cbe:	4620      	mov	r0, r4
 80a2cc0:	4629      	mov	r1, r5
 80a2cc2:	f000 fd1b 	bl	80a36fc <__aeabi_dmul>
 80a2cc6:	4642      	mov	r2, r8
 80a2cc8:	464b      	mov	r3, r9
 80a2cca:	f000 fb65 	bl	80a3398 <__adddf3>
 80a2cce:	4602      	mov	r2, r0
 80a2cd0:	460b      	mov	r3, r1
 80a2cd2:	4630      	mov	r0, r6
 80a2cd4:	4639      	mov	r1, r7
 80a2cd6:	f000 fb5d 	bl	80a3394 <__aeabi_dsub>
 80a2cda:	4622      	mov	r2, r4
 80a2cdc:	462b      	mov	r3, r5
 80a2cde:	f000 fb59 	bl	80a3394 <__aeabi_dsub>
 80a2ce2:	4602      	mov	r2, r0
 80a2ce4:	460b      	mov	r3, r1
 80a2ce6:	2000      	movs	r0, #0
 80a2ce8:	493d      	ldr	r1, [pc, #244]	; (80a2de0 <__ieee754_pow+0x8d8>)
 80a2cea:	f000 fb53 	bl	80a3394 <__aeabi_dsub>
 80a2cee:	448a      	add	sl, r1
 80a2cf0:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
 80a2cf4:	f2c0 8137 	blt.w	80a2f66 <__ieee754_pow+0xa5e>
 80a2cf8:	4651      	mov	r1, sl
 80a2cfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a2cfe:	f000 fcfd 	bl	80a36fc <__aeabi_dmul>
 80a2d02:	4683      	mov	fp, r0
 80a2d04:	e418      	b.n	80a2538 <__ieee754_pow+0x30>
 80a2d06:	46f3      	mov	fp, lr
 80a2d08:	4935      	ldr	r1, [pc, #212]	; (80a2de0 <__ieee754_pow+0x8d8>)
 80a2d0a:	e415      	b.n	80a2538 <__ieee754_pow+0x30>
 80a2d0c:	464a      	mov	r2, r9
 80a2d0e:	4648      	mov	r0, r9
 80a2d10:	463b      	mov	r3, r7
 80a2d12:	4639      	mov	r1, r7
 80a2d14:	f000 fcf2 	bl	80a36fc <__aeabi_dmul>
 80a2d18:	4683      	mov	fp, r0
 80a2d1a:	e40d      	b.n	80a2538 <__ieee754_pow+0x30>
 80a2d1c:	4b34      	ldr	r3, [pc, #208]	; (80a2df0 <__ieee754_pow+0x8e8>)
 80a2d1e:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80a2d22:	429f      	cmp	r7, r3
 80a2d24:	f340 8101 	ble.w	80a2f2a <__ieee754_pow+0xa22>
 80a2d28:	4b32      	ldr	r3, [pc, #200]	; (80a2df4 <__ieee754_pow+0x8ec>)
 80a2d2a:	440b      	add	r3, r1
 80a2d2c:	4303      	orrs	r3, r0
 80a2d2e:	d10c      	bne.n	80a2d4a <__ieee754_pow+0x842>
 80a2d30:	4642      	mov	r2, r8
 80a2d32:	464b      	mov	r3, r9
 80a2d34:	f000 fb2e 	bl	80a3394 <__aeabi_dsub>
 80a2d38:	4602      	mov	r2, r0
 80a2d3a:	460b      	mov	r3, r1
 80a2d3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a2d40:	f000 ff58 	bl	80a3bf4 <__aeabi_dcmple>
 80a2d44:	2800      	cmp	r0, #0
 80a2d46:	f43f aefb 	beq.w	80a2b40 <__ieee754_pow+0x638>
 80a2d4a:	a323      	add	r3, pc, #140	; (adr r3, 80a2dd8 <__ieee754_pow+0x8d0>)
 80a2d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2d50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a2d54:	f000 fcd2 	bl	80a36fc <__aeabi_dmul>
 80a2d58:	a31f      	add	r3, pc, #124	; (adr r3, 80a2dd8 <__ieee754_pow+0x8d0>)
 80a2d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2d5e:	f000 fccd 	bl	80a36fc <__aeabi_dmul>
 80a2d62:	4683      	mov	fp, r0
 80a2d64:	f7ff bbe8 	b.w	80a2538 <__ieee754_pow+0x30>
 80a2d68:	f1ba 0f00 	cmp.w	sl, #0
 80a2d6c:	f6bf acae 	bge.w	80a26cc <__ieee754_pow+0x1c4>
 80a2d70:	e9dd 3400 	ldrd	r3, r4, [sp]
 80a2d74:	469b      	mov	fp, r3
 80a2d76:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80a2d7a:	f7ff bbdd 	b.w	80a2538 <__ieee754_pow+0x30>
 80a2d7e:	4602      	mov	r2, r0
 80a2d80:	460b      	mov	r3, r1
 80a2d82:	2000      	movs	r0, #0
 80a2d84:	4916      	ldr	r1, [pc, #88]	; (80a2de0 <__ieee754_pow+0x8d8>)
 80a2d86:	f000 fde3 	bl	80a3950 <__aeabi_ddiv>
 80a2d8a:	e441      	b.n	80a2610 <__ieee754_pow+0x108>
 80a2d8c:	f3af 8000 	nop.w
 80a2d90:	652b82fe 	.word	0x652b82fe
 80a2d94:	3c971547 	.word	0x3c971547
 80a2d98:	00000000 	.word	0x00000000
 80a2d9c:	3fe62e43 	.word	0x3fe62e43
 80a2da0:	fefa39ef 	.word	0xfefa39ef
 80a2da4:	3fe62e42 	.word	0x3fe62e42
 80a2da8:	0ca86c39 	.word	0x0ca86c39
 80a2dac:	be205c61 	.word	0xbe205c61
 80a2db0:	72bea4d0 	.word	0x72bea4d0
 80a2db4:	3e663769 	.word	0x3e663769
 80a2db8:	c5d26bf1 	.word	0xc5d26bf1
 80a2dbc:	3ebbbd41 	.word	0x3ebbbd41
 80a2dc0:	af25de2c 	.word	0xaf25de2c
 80a2dc4:	3f11566a 	.word	0x3f11566a
 80a2dc8:	16bebd93 	.word	0x16bebd93
 80a2dcc:	3f66c16c 	.word	0x3f66c16c
 80a2dd0:	5555553e 	.word	0x5555553e
 80a2dd4:	3fc55555 	.word	0x3fc55555
 80a2dd8:	c2f8f359 	.word	0xc2f8f359
 80a2ddc:	01a56e1f 	.word	0x01a56e1f
 80a2de0:	3ff00000 	.word	0x3ff00000
 80a2de4:	bff00000 	.word	0xbff00000
 80a2de8:	408fffff 	.word	0x408fffff
 80a2dec:	000fffff 	.word	0x000fffff
 80a2df0:	4090cbff 	.word	0x4090cbff
 80a2df4:	3f6f3400 	.word	0x3f6f3400
 80a2df8:	4b6f      	ldr	r3, [pc, #444]	; (80a2fb8 <__ieee754_pow+0xab0>)
 80a2dfa:	429e      	cmp	r6, r3
 80a2dfc:	f77f ac63 	ble.w	80a26c6 <__ieee754_pow+0x1be>
 80a2e00:	4b6e      	ldr	r3, [pc, #440]	; (80a2fbc <__ieee754_pow+0xab4>)
 80a2e02:	429e      	cmp	r6, r3
 80a2e04:	f73f abee 	bgt.w	80a25e4 <__ieee754_pow+0xdc>
 80a2e08:	2200      	movs	r2, #0
 80a2e0a:	4b6c      	ldr	r3, [pc, #432]	; (80a2fbc <__ieee754_pow+0xab4>)
 80a2e0c:	f000 fac2 	bl	80a3394 <__aeabi_dsub>
 80a2e10:	a35b      	add	r3, pc, #364	; (adr r3, 80a2f80 <__ieee754_pow+0xa78>)
 80a2e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2e16:	4606      	mov	r6, r0
 80a2e18:	460f      	mov	r7, r1
 80a2e1a:	f000 fc6f 	bl	80a36fc <__aeabi_dmul>
 80a2e1e:	a35a      	add	r3, pc, #360	; (adr r3, 80a2f88 <__ieee754_pow+0xa80>)
 80a2e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2e24:	4680      	mov	r8, r0
 80a2e26:	4689      	mov	r9, r1
 80a2e28:	4630      	mov	r0, r6
 80a2e2a:	4639      	mov	r1, r7
 80a2e2c:	f000 fc66 	bl	80a36fc <__aeabi_dmul>
 80a2e30:	2200      	movs	r2, #0
 80a2e32:	4682      	mov	sl, r0
 80a2e34:	468b      	mov	fp, r1
 80a2e36:	4b62      	ldr	r3, [pc, #392]	; (80a2fc0 <__ieee754_pow+0xab8>)
 80a2e38:	4630      	mov	r0, r6
 80a2e3a:	4639      	mov	r1, r7
 80a2e3c:	f000 fc5e 	bl	80a36fc <__aeabi_dmul>
 80a2e40:	4602      	mov	r2, r0
 80a2e42:	460b      	mov	r3, r1
 80a2e44:	a152      	add	r1, pc, #328	; (adr r1, 80a2f90 <__ieee754_pow+0xa88>)
 80a2e46:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a2e4a:	f000 faa3 	bl	80a3394 <__aeabi_dsub>
 80a2e4e:	4632      	mov	r2, r6
 80a2e50:	463b      	mov	r3, r7
 80a2e52:	f000 fc53 	bl	80a36fc <__aeabi_dmul>
 80a2e56:	4602      	mov	r2, r0
 80a2e58:	460b      	mov	r3, r1
 80a2e5a:	2000      	movs	r0, #0
 80a2e5c:	4959      	ldr	r1, [pc, #356]	; (80a2fc4 <__ieee754_pow+0xabc>)
 80a2e5e:	f000 fa99 	bl	80a3394 <__aeabi_dsub>
 80a2e62:	4632      	mov	r2, r6
 80a2e64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a2e68:	463b      	mov	r3, r7
 80a2e6a:	4630      	mov	r0, r6
 80a2e6c:	4639      	mov	r1, r7
 80a2e6e:	f000 fc45 	bl	80a36fc <__aeabi_dmul>
 80a2e72:	4602      	mov	r2, r0
 80a2e74:	460b      	mov	r3, r1
 80a2e76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a2e7a:	f000 fc3f 	bl	80a36fc <__aeabi_dmul>
 80a2e7e:	a346      	add	r3, pc, #280	; (adr r3, 80a2f98 <__ieee754_pow+0xa90>)
 80a2e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2e84:	f000 fc3a 	bl	80a36fc <__aeabi_dmul>
 80a2e88:	4602      	mov	r2, r0
 80a2e8a:	460b      	mov	r3, r1
 80a2e8c:	4650      	mov	r0, sl
 80a2e8e:	4659      	mov	r1, fp
 80a2e90:	f000 fa80 	bl	80a3394 <__aeabi_dsub>
 80a2e94:	4602      	mov	r2, r0
 80a2e96:	460b      	mov	r3, r1
 80a2e98:	4606      	mov	r6, r0
 80a2e9a:	460f      	mov	r7, r1
 80a2e9c:	4640      	mov	r0, r8
 80a2e9e:	4649      	mov	r1, r9
 80a2ea0:	f000 fa7a 	bl	80a3398 <__adddf3>
 80a2ea4:	4642      	mov	r2, r8
 80a2ea6:	464b      	mov	r3, r9
 80a2ea8:	2000      	movs	r0, #0
 80a2eaa:	4682      	mov	sl, r0
 80a2eac:	468b      	mov	fp, r1
 80a2eae:	f000 fa71 	bl	80a3394 <__aeabi_dsub>
 80a2eb2:	4602      	mov	r2, r0
 80a2eb4:	460b      	mov	r3, r1
 80a2eb6:	4630      	mov	r0, r6
 80a2eb8:	4639      	mov	r1, r7
 80a2eba:	f000 fa6b 	bl	80a3394 <__aeabi_dsub>
 80a2ebe:	4680      	mov	r8, r0
 80a2ec0:	4689      	mov	r9, r1
 80a2ec2:	e5d9      	b.n	80a2a78 <__ieee754_pow+0x570>
 80a2ec4:	2200      	movs	r2, #0
 80a2ec6:	2300      	movs	r3, #0
 80a2ec8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a2ecc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80a2ed0:	4b3a      	ldr	r3, [pc, #232]	; (80a2fbc <__ieee754_pow+0xab4>)
 80a2ed2:	2200      	movs	r2, #0
 80a2ed4:	2600      	movs	r6, #0
 80a2ed6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a2eda:	e43d      	b.n	80a2758 <__ieee754_pow+0x250>
 80a2edc:	464a      	mov	r2, r9
 80a2ede:	463b      	mov	r3, r7
 80a2ee0:	2000      	movs	r0, #0
 80a2ee2:	4936      	ldr	r1, [pc, #216]	; (80a2fbc <__ieee754_pow+0xab4>)
 80a2ee4:	f000 fd34 	bl	80a3950 <__aeabi_ddiv>
 80a2ee8:	4683      	mov	fp, r0
 80a2eea:	f7ff bb25 	b.w	80a2538 <__ieee754_pow+0x30>
 80a2eee:	a32c      	add	r3, pc, #176	; (adr r3, 80a2fa0 <__ieee754_pow+0xa98>)
 80a2ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2ef4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a2ef8:	f000 fc00 	bl	80a36fc <__aeabi_dmul>
 80a2efc:	a328      	add	r3, pc, #160	; (adr r3, 80a2fa0 <__ieee754_pow+0xa98>)
 80a2efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2f02:	f000 fbfb 	bl	80a36fc <__aeabi_dmul>
 80a2f06:	4683      	mov	fp, r0
 80a2f08:	f7ff bb16 	b.w	80a2538 <__ieee754_pow+0x30>
 80a2f0c:	f1be 0f00 	cmp.w	lr, #0
 80a2f10:	f47f ab4f 	bne.w	80a25b2 <__ieee754_pow+0xaa>
 80a2f14:	f1c3 0314 	rsb	r3, r3, #20
 80a2f18:	fa48 f203 	asr.w	r2, r8, r3
 80a2f1c:	fa02 f303 	lsl.w	r3, r2, r3
 80a2f20:	4598      	cmp	r8, r3
 80a2f22:	d024      	beq.n	80a2f6e <__ieee754_pow+0xa66>
 80a2f24:	4674      	mov	r4, lr
 80a2f26:	f7ff bb21 	b.w	80a256c <__ieee754_pow+0x64>
 80a2f2a:	4b26      	ldr	r3, [pc, #152]	; (80a2fc4 <__ieee754_pow+0xabc>)
 80a2f2c:	429f      	cmp	r7, r3
 80a2f2e:	f73f ae07 	bgt.w	80a2b40 <__ieee754_pow+0x638>
 80a2f32:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 80a2f36:	469a      	mov	sl, r3
 80a2f38:	469b      	mov	fp, r3
 80a2f3a:	e62e      	b.n	80a2b9a <__ieee754_pow+0x692>
 80a2f3c:	4602      	mov	r2, r0
 80a2f3e:	460b      	mov	r3, r1
 80a2f40:	f7ff bbb9 	b.w	80a26b6 <__ieee754_pow+0x1ae>
 80a2f44:	4b20      	ldr	r3, [pc, #128]	; (80a2fc8 <__ieee754_pow+0xac0>)
 80a2f46:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 80a2f4a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a2f4e:	a316      	add	r3, pc, #88	; (adr r3, 80a2fa8 <__ieee754_pow+0xaa0>)
 80a2f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2f54:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a2f58:	a315      	add	r3, pc, #84	; (adr r3, 80a2fb0 <__ieee754_pow+0xaa8>)
 80a2f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2f5e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80a2f62:	f7ff bbf9 	b.w	80a2758 <__ieee754_pow+0x250>
 80a2f66:	465a      	mov	r2, fp
 80a2f68:	f000 f996 	bl	80a3298 <scalbn>
 80a2f6c:	e6c5      	b.n	80a2cfa <__ieee754_pow+0x7f2>
 80a2f6e:	f002 0201 	and.w	r2, r2, #1
 80a2f72:	f1c2 0402 	rsb	r4, r2, #2
 80a2f76:	f7ff baf9 	b.w	80a256c <__ieee754_pow+0x64>
 80a2f7a:	bf00      	nop
 80a2f7c:	f3af 8000 	nop.w
 80a2f80:	60000000 	.word	0x60000000
 80a2f84:	3ff71547 	.word	0x3ff71547
 80a2f88:	f85ddf44 	.word	0xf85ddf44
 80a2f8c:	3e54ae0b 	.word	0x3e54ae0b
 80a2f90:	55555555 	.word	0x55555555
 80a2f94:	3fd55555 	.word	0x3fd55555
 80a2f98:	652b82fe 	.word	0x652b82fe
 80a2f9c:	3ff71547 	.word	0x3ff71547
 80a2fa0:	8800759c 	.word	0x8800759c
 80a2fa4:	7e37e43c 	.word	0x7e37e43c
 80a2fa8:	40000000 	.word	0x40000000
 80a2fac:	3fe2b803 	.word	0x3fe2b803
 80a2fb0:	43cfd006 	.word	0x43cfd006
 80a2fb4:	3e4cfdeb 	.word	0x3e4cfdeb
 80a2fb8:	3feffffe 	.word	0x3feffffe
 80a2fbc:	3ff00000 	.word	0x3ff00000
 80a2fc0:	3fd00000 	.word	0x3fd00000
 80a2fc4:	3fe00000 	.word	0x3fe00000
 80a2fc8:	3ff80000 	.word	0x3ff80000

080a2fcc <__ieee754_sqrt>:
 80a2fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2fd0:	4e5f      	ldr	r6, [pc, #380]	; (80a3150 <__ieee754_sqrt+0x184>)
 80a2fd2:	460c      	mov	r4, r1
 80a2fd4:	46b6      	mov	lr, r6
 80a2fd6:	400e      	ands	r6, r1
 80a2fd8:	4576      	cmp	r6, lr
 80a2fda:	4605      	mov	r5, r0
 80a2fdc:	f000 8098 	beq.w	80a3110 <__ieee754_sqrt+0x144>
 80a2fe0:	2900      	cmp	r1, #0
 80a2fe2:	460b      	mov	r3, r1
 80a2fe4:	4602      	mov	r2, r0
 80a2fe6:	dd74      	ble.n	80a30d2 <__ieee754_sqrt+0x106>
 80a2fe8:	ea5f 5e21 	movs.w	lr, r1, asr #20
 80a2fec:	d07f      	beq.n	80a30ee <__ieee754_sqrt+0x122>
 80a2fee:	f2ae 3eff 	subw	lr, lr, #1023	; 0x3ff
 80a2ff2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a2ff6:	f01e 0f01 	tst.w	lr, #1
 80a2ffa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a2ffe:	d163      	bne.n	80a30c8 <__ieee754_sqrt+0xfc>
 80a3000:	2700      	movs	r7, #0
 80a3002:	463e      	mov	r6, r7
 80a3004:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
 80a3008:	440b      	add	r3, r1
 80a300a:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 80a300e:	0052      	lsls	r2, r2, #1
 80a3010:	2016      	movs	r0, #22
 80a3012:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80a3016:	1874      	adds	r4, r6, r1
 80a3018:	429c      	cmp	r4, r3
 80a301a:	ea4f 75d2 	mov.w	r5, r2, lsr #31
 80a301e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80a3022:	dc02      	bgt.n	80a302a <__ieee754_sqrt+0x5e>
 80a3024:	1b1b      	subs	r3, r3, r4
 80a3026:	1866      	adds	r6, r4, r1
 80a3028:	440f      	add	r7, r1
 80a302a:	3801      	subs	r0, #1
 80a302c:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80a3030:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80a3034:	d1ef      	bne.n	80a3016 <__ieee754_sqrt+0x4a>
 80a3036:	4684      	mov	ip, r0
 80a3038:	2420      	movs	r4, #32
 80a303a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80a303e:	e009      	b.n	80a3054 <__ieee754_sqrt+0x88>
 80a3040:	d020      	beq.n	80a3084 <__ieee754_sqrt+0xb8>
 80a3042:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
 80a3046:	3c01      	subs	r4, #1
 80a3048:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80a304c:	442b      	add	r3, r5
 80a304e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80a3052:	d020      	beq.n	80a3096 <__ieee754_sqrt+0xca>
 80a3054:	429e      	cmp	r6, r3
 80a3056:	eb01 050c 	add.w	r5, r1, ip
 80a305a:	daf1      	bge.n	80a3040 <__ieee754_sqrt+0x74>
 80a305c:	2d00      	cmp	r5, #0
 80a305e:	eb05 0c01 	add.w	ip, r5, r1
 80a3062:	db09      	blt.n	80a3078 <__ieee754_sqrt+0xac>
 80a3064:	46b0      	mov	r8, r6
 80a3066:	4295      	cmp	r5, r2
 80a3068:	eba3 0306 	sub.w	r3, r3, r6
 80a306c:	d900      	bls.n	80a3070 <__ieee754_sqrt+0xa4>
 80a306e:	3b01      	subs	r3, #1
 80a3070:	4646      	mov	r6, r8
 80a3072:	1b52      	subs	r2, r2, r5
 80a3074:	4408      	add	r0, r1
 80a3076:	e7e4      	b.n	80a3042 <__ieee754_sqrt+0x76>
 80a3078:	f1bc 0f00 	cmp.w	ip, #0
 80a307c:	dbf2      	blt.n	80a3064 <__ieee754_sqrt+0x98>
 80a307e:	f106 0801 	add.w	r8, r6, #1
 80a3082:	e7f0      	b.n	80a3066 <__ieee754_sqrt+0x9a>
 80a3084:	4295      	cmp	r5, r2
 80a3086:	d817      	bhi.n	80a30b8 <__ieee754_sqrt+0xec>
 80a3088:	2d00      	cmp	r5, #0
 80a308a:	eb05 0c01 	add.w	ip, r5, r1
 80a308e:	db49      	blt.n	80a3124 <__ieee754_sqrt+0x158>
 80a3090:	4698      	mov	r8, r3
 80a3092:	2300      	movs	r3, #0
 80a3094:	e7ec      	b.n	80a3070 <__ieee754_sqrt+0xa4>
 80a3096:	4313      	orrs	r3, r2
 80a3098:	d110      	bne.n	80a30bc <__ieee754_sqrt+0xf0>
 80a309a:	0840      	lsrs	r0, r0, #1
 80a309c:	107b      	asrs	r3, r7, #1
 80a309e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80a30a2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80a30a6:	07fa      	lsls	r2, r7, #31
 80a30a8:	eb03 570e 	add.w	r7, r3, lr, lsl #20
 80a30ac:	4639      	mov	r1, r7
 80a30ae:	bf48      	it	mi
 80a30b0:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
 80a30b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a30b8:	4633      	mov	r3, r6
 80a30ba:	e7c2      	b.n	80a3042 <__ieee754_sqrt+0x76>
 80a30bc:	1c41      	adds	r1, r0, #1
 80a30be:	d035      	beq.n	80a312c <__ieee754_sqrt+0x160>
 80a30c0:	f000 0301 	and.w	r3, r0, #1
 80a30c4:	4418      	add	r0, r3
 80a30c6:	e7e8      	b.n	80a309a <__ieee754_sqrt+0xce>
 80a30c8:	005b      	lsls	r3, r3, #1
 80a30ca:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80a30ce:	0052      	lsls	r2, r2, #1
 80a30d0:	e796      	b.n	80a3000 <__ieee754_sqrt+0x34>
 80a30d2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a30d6:	4306      	orrs	r6, r0
 80a30d8:	d0ec      	beq.n	80a30b4 <__ieee754_sqrt+0xe8>
 80a30da:	bb79      	cbnz	r1, 80a313c <__ieee754_sqrt+0x170>
 80a30dc:	468e      	mov	lr, r1
 80a30de:	0ad3      	lsrs	r3, r2, #11
 80a30e0:	f1ae 0e15 	sub.w	lr, lr, #21
 80a30e4:	0552      	lsls	r2, r2, #21
 80a30e6:	2b00      	cmp	r3, #0
 80a30e8:	d0f9      	beq.n	80a30de <__ieee754_sqrt+0x112>
 80a30ea:	02dd      	lsls	r5, r3, #11
 80a30ec:	d421      	bmi.n	80a3132 <__ieee754_sqrt+0x166>
 80a30ee:	2100      	movs	r1, #0
 80a30f0:	e000      	b.n	80a30f4 <__ieee754_sqrt+0x128>
 80a30f2:	4601      	mov	r1, r0
 80a30f4:	005b      	lsls	r3, r3, #1
 80a30f6:	02dc      	lsls	r4, r3, #11
 80a30f8:	f101 0001 	add.w	r0, r1, #1
 80a30fc:	d5f9      	bpl.n	80a30f2 <__ieee754_sqrt+0x126>
 80a30fe:	f1c0 0420 	rsb	r4, r0, #32
 80a3102:	fa22 f404 	lsr.w	r4, r2, r4
 80a3106:	4323      	orrs	r3, r4
 80a3108:	ebc1 0e0e 	rsb	lr, r1, lr
 80a310c:	4082      	lsls	r2, r0
 80a310e:	e76e      	b.n	80a2fee <__ieee754_sqrt+0x22>
 80a3110:	4602      	mov	r2, r0
 80a3112:	460b      	mov	r3, r1
 80a3114:	f000 faf2 	bl	80a36fc <__aeabi_dmul>
 80a3118:	462a      	mov	r2, r5
 80a311a:	4623      	mov	r3, r4
 80a311c:	f000 f93c 	bl	80a3398 <__adddf3>
 80a3120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a3124:	f1bc 0f00 	cmp.w	ip, #0
 80a3128:	daa9      	bge.n	80a307e <__ieee754_sqrt+0xb2>
 80a312a:	e7b1      	b.n	80a3090 <__ieee754_sqrt+0xc4>
 80a312c:	3701      	adds	r7, #1
 80a312e:	4620      	mov	r0, r4
 80a3130:	e7b4      	b.n	80a309c <__ieee754_sqrt+0xd0>
 80a3132:	2420      	movs	r4, #32
 80a3134:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80a3138:	2000      	movs	r0, #0
 80a313a:	e7e2      	b.n	80a3102 <__ieee754_sqrt+0x136>
 80a313c:	4602      	mov	r2, r0
 80a313e:	460b      	mov	r3, r1
 80a3140:	f000 f928 	bl	80a3394 <__aeabi_dsub>
 80a3144:	4602      	mov	r2, r0
 80a3146:	460b      	mov	r3, r1
 80a3148:	f000 fc02 	bl	80a3950 <__aeabi_ddiv>
 80a314c:	e7b2      	b.n	80a30b4 <__ieee754_sqrt+0xe8>
 80a314e:	bf00      	nop
 80a3150:	7ff00000 	.word	0x7ff00000

080a3154 <fabs>:
 80a3154:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3158:	4770      	bx	lr
 80a315a:	bf00      	nop

080a315c <finite>:
 80a315c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80a3160:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 80a3164:	0fc0      	lsrs	r0, r0, #31
 80a3166:	4770      	bx	lr

080a3168 <matherr>:
 80a3168:	2000      	movs	r0, #0
 80a316a:	4770      	bx	lr

080a316c <nan>:
 80a316c:	2000      	movs	r0, #0
 80a316e:	4901      	ldr	r1, [pc, #4]	; (80a3174 <nan+0x8>)
 80a3170:	4770      	bx	lr
 80a3172:	bf00      	nop
 80a3174:	7ff80000 	.word	0x7ff80000

080a3178 <rint>:
 80a3178:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a317a:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
 80a317e:	f2ae 36ff 	subw	r6, lr, #1023	; 0x3ff
 80a3182:	2e13      	cmp	r6, #19
 80a3184:	b083      	sub	sp, #12
 80a3186:	4602      	mov	r2, r0
 80a3188:	460b      	mov	r3, r1
 80a318a:	460c      	mov	r4, r1
 80a318c:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80a3190:	4607      	mov	r7, r0
 80a3192:	dc2e      	bgt.n	80a31f2 <rint+0x7a>
 80a3194:	2e00      	cmp	r6, #0
 80a3196:	db49      	blt.n	80a322c <rint+0xb4>
 80a3198:	493d      	ldr	r1, [pc, #244]	; (80a3290 <rint+0x118>)
 80a319a:	4131      	asrs	r1, r6
 80a319c:	ea03 0001 	and.w	r0, r3, r1
 80a31a0:	4310      	orrs	r0, r2
 80a31a2:	d02b      	beq.n	80a31fc <rint+0x84>
 80a31a4:	0849      	lsrs	r1, r1, #1
 80a31a6:	400b      	ands	r3, r1
 80a31a8:	ea53 0702 	orrs.w	r7, r3, r2
 80a31ac:	d00c      	beq.n	80a31c8 <rint+0x50>
 80a31ae:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80a31b2:	2e13      	cmp	r6, #19
 80a31b4:	ea24 0101 	bic.w	r1, r4, r1
 80a31b8:	fa43 f406 	asr.w	r4, r3, r6
 80a31bc:	ea44 0401 	orr.w	r4, r4, r1
 80a31c0:	bf0c      	ite	eq
 80a31c2:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 80a31c6:	2700      	movne	r7, #0
 80a31c8:	4b32      	ldr	r3, [pc, #200]	; (80a3294 <rint+0x11c>)
 80a31ca:	4621      	mov	r1, r4
 80a31cc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80a31d0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80a31d4:	4638      	mov	r0, r7
 80a31d6:	4622      	mov	r2, r4
 80a31d8:	462b      	mov	r3, r5
 80a31da:	f000 f8dd 	bl	80a3398 <__adddf3>
 80a31de:	e9cd 0100 	strd	r0, r1, [sp]
 80a31e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a31e6:	4622      	mov	r2, r4
 80a31e8:	462b      	mov	r3, r5
 80a31ea:	f000 f8d3 	bl	80a3394 <__aeabi_dsub>
 80a31ee:	b003      	add	sp, #12
 80a31f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a31f2:	2e33      	cmp	r6, #51	; 0x33
 80a31f4:	dd06      	ble.n	80a3204 <rint+0x8c>
 80a31f6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80a31fa:	d045      	beq.n	80a3288 <rint+0x110>
 80a31fc:	4610      	mov	r0, r2
 80a31fe:	4619      	mov	r1, r3
 80a3200:	b003      	add	sp, #12
 80a3202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a3204:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
 80a3208:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80a320c:	fa21 f10e 	lsr.w	r1, r1, lr
 80a3210:	4208      	tst	r0, r1
 80a3212:	d0f3      	beq.n	80a31fc <rint+0x84>
 80a3214:	0849      	lsrs	r1, r1, #1
 80a3216:	4208      	tst	r0, r1
 80a3218:	d0d6      	beq.n	80a31c8 <rint+0x50>
 80a321a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a321e:	ea20 0101 	bic.w	r1, r0, r1
 80a3222:	fa43 fe0e 	asr.w	lr, r3, lr
 80a3226:	ea4e 0701 	orr.w	r7, lr, r1
 80a322a:	e7cd      	b.n	80a31c8 <rint+0x50>
 80a322c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3230:	4301      	orrs	r1, r0
 80a3232:	4619      	mov	r1, r3
 80a3234:	d0e4      	beq.n	80a3200 <rint+0x88>
 80a3236:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a323a:	ea43 0c00 	orr.w	ip, r3, r0
 80a323e:	f1cc 0300 	rsb	r3, ip, #0
 80a3242:	ea43 0c0c 	orr.w	ip, r3, ip
 80a3246:	4b13      	ldr	r3, [pc, #76]	; (80a3294 <rint+0x11c>)
 80a3248:	0c64      	lsrs	r4, r4, #17
 80a324a:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
 80a324e:	f40c 2c00 	and.w	ip, ip, #524288	; 0x80000
 80a3252:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80a3256:	0464      	lsls	r4, r4, #17
 80a3258:	e9d3 6700 	ldrd	r6, r7, [r3]
 80a325c:	ea4c 0104 	orr.w	r1, ip, r4
 80a3260:	4632      	mov	r2, r6
 80a3262:	463b      	mov	r3, r7
 80a3264:	f000 f898 	bl	80a3398 <__adddf3>
 80a3268:	e9cd 0100 	strd	r0, r1, [sp]
 80a326c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3270:	4632      	mov	r2, r6
 80a3272:	463b      	mov	r3, r7
 80a3274:	f000 f88e 	bl	80a3394 <__aeabi_dsub>
 80a3278:	4602      	mov	r2, r0
 80a327a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a327e:	ea41 73c5 	orr.w	r3, r1, r5, lsl #31
 80a3282:	4610      	mov	r0, r2
 80a3284:	4619      	mov	r1, r3
 80a3286:	e7bb      	b.n	80a3200 <rint+0x88>
 80a3288:	f000 f886 	bl	80a3398 <__adddf3>
 80a328c:	e7b8      	b.n	80a3200 <rint+0x88>
 80a328e:	bf00      	nop
 80a3290:	000fffff 	.word	0x000fffff
 80a3294:	080a46b8 	.word	0x080a46b8

080a3298 <scalbn>:
 80a3298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a329a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80a329e:	4604      	mov	r4, r0
 80a32a0:	460d      	mov	r5, r1
 80a32a2:	460b      	mov	r3, r1
 80a32a4:	4617      	mov	r7, r2
 80a32a6:	bb06      	cbnz	r6, 80a32ea <scalbn+0x52>
 80a32a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a32ac:	4303      	orrs	r3, r0
 80a32ae:	d025      	beq.n	80a32fc <scalbn+0x64>
 80a32b0:	2200      	movs	r2, #0
 80a32b2:	4b2f      	ldr	r3, [pc, #188]	; (80a3370 <scalbn+0xd8>)
 80a32b4:	f000 fa22 	bl	80a36fc <__aeabi_dmul>
 80a32b8:	4a2e      	ldr	r2, [pc, #184]	; (80a3374 <scalbn+0xdc>)
 80a32ba:	4604      	mov	r4, r0
 80a32bc:	4297      	cmp	r7, r2
 80a32be:	460d      	mov	r5, r1
 80a32c0:	460b      	mov	r3, r1
 80a32c2:	db2a      	blt.n	80a331a <scalbn+0x82>
 80a32c4:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80a32c8:	3e36      	subs	r6, #54	; 0x36
 80a32ca:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80a32ce:	443e      	add	r6, r7
 80a32d0:	4296      	cmp	r6, r2
 80a32d2:	dc28      	bgt.n	80a3326 <scalbn+0x8e>
 80a32d4:	2e00      	cmp	r6, #0
 80a32d6:	dd12      	ble.n	80a32fe <scalbn+0x66>
 80a32d8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80a32dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80a32e0:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 80a32e4:	4620      	mov	r0, r4
 80a32e6:	4629      	mov	r1, r5
 80a32e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a32ea:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80a32ee:	4296      	cmp	r6, r2
 80a32f0:	d1eb      	bne.n	80a32ca <scalbn+0x32>
 80a32f2:	4602      	mov	r2, r0
 80a32f4:	460b      	mov	r3, r1
 80a32f6:	f000 f84f 	bl	80a3398 <__adddf3>
 80a32fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a32fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a32fe:	f116 0f35 	cmn.w	r6, #53	; 0x35
 80a3302:	da1d      	bge.n	80a3340 <scalbn+0xa8>
 80a3304:	f24c 3350 	movw	r3, #50000	; 0xc350
 80a3308:	429f      	cmp	r7, r3
 80a330a:	dc0c      	bgt.n	80a3326 <scalbn+0x8e>
 80a330c:	a114      	add	r1, pc, #80	; (adr r1, 80a3360 <scalbn+0xc8>)
 80a330e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a3312:	4622      	mov	r2, r4
 80a3314:	462b      	mov	r3, r5
 80a3316:	f000 f831 	bl	80a337c <copysign>
 80a331a:	a311      	add	r3, pc, #68	; (adr r3, 80a3360 <scalbn+0xc8>)
 80a331c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3320:	f000 f9ec 	bl	80a36fc <__aeabi_dmul>
 80a3324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a3326:	4622      	mov	r2, r4
 80a3328:	a10f      	add	r1, pc, #60	; (adr r1, 80a3368 <scalbn+0xd0>)
 80a332a:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a332e:	462b      	mov	r3, r5
 80a3330:	f000 f824 	bl	80a337c <copysign>
 80a3334:	a30c      	add	r3, pc, #48	; (adr r3, 80a3368 <scalbn+0xd0>)
 80a3336:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a333a:	f000 f9df 	bl	80a36fc <__aeabi_dmul>
 80a333e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a3340:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80a3344:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80a3348:	3636      	adds	r6, #54	; 0x36
 80a334a:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 80a334e:	4620      	mov	r0, r4
 80a3350:	4629      	mov	r1, r5
 80a3352:	2200      	movs	r2, #0
 80a3354:	4b08      	ldr	r3, [pc, #32]	; (80a3378 <scalbn+0xe0>)
 80a3356:	f000 f9d1 	bl	80a36fc <__aeabi_dmul>
 80a335a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a335c:	f3af 8000 	nop.w
 80a3360:	c2f8f359 	.word	0xc2f8f359
 80a3364:	01a56e1f 	.word	0x01a56e1f
 80a3368:	8800759c 	.word	0x8800759c
 80a336c:	7e37e43c 	.word	0x7e37e43c
 80a3370:	43500000 	.word	0x43500000
 80a3374:	ffff3cb0 	.word	0xffff3cb0
 80a3378:	3c900000 	.word	0x3c900000

080a337c <copysign>:
 80a337c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80a3380:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80a3384:	ea42 0103 	orr.w	r1, r2, r3
 80a3388:	4770      	bx	lr
 80a338a:	bf00      	nop

080a338c <__aeabi_drsub>:
 80a338c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a3390:	e002      	b.n	80a3398 <__adddf3>
 80a3392:	bf00      	nop

080a3394 <__aeabi_dsub>:
 80a3394:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a3398 <__adddf3>:
 80a3398:	b530      	push	{r4, r5, lr}
 80a339a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a339e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a33a2:	ea94 0f05 	teq	r4, r5
 80a33a6:	bf08      	it	eq
 80a33a8:	ea90 0f02 	teqeq	r0, r2
 80a33ac:	bf1f      	itttt	ne
 80a33ae:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a33b2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a33b6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a33ba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a33be:	f000 80e2 	beq.w	80a3586 <__adddf3+0x1ee>
 80a33c2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a33c6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a33ca:	bfb8      	it	lt
 80a33cc:	426d      	neglt	r5, r5
 80a33ce:	dd0c      	ble.n	80a33ea <__adddf3+0x52>
 80a33d0:	442c      	add	r4, r5
 80a33d2:	ea80 0202 	eor.w	r2, r0, r2
 80a33d6:	ea81 0303 	eor.w	r3, r1, r3
 80a33da:	ea82 0000 	eor.w	r0, r2, r0
 80a33de:	ea83 0101 	eor.w	r1, r3, r1
 80a33e2:	ea80 0202 	eor.w	r2, r0, r2
 80a33e6:	ea81 0303 	eor.w	r3, r1, r3
 80a33ea:	2d36      	cmp	r5, #54	; 0x36
 80a33ec:	bf88      	it	hi
 80a33ee:	bd30      	pophi	{r4, r5, pc}
 80a33f0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a33f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a33f8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a33fc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a3400:	d002      	beq.n	80a3408 <__adddf3+0x70>
 80a3402:	4240      	negs	r0, r0
 80a3404:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3408:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a340c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3410:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a3414:	d002      	beq.n	80a341c <__adddf3+0x84>
 80a3416:	4252      	negs	r2, r2
 80a3418:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a341c:	ea94 0f05 	teq	r4, r5
 80a3420:	f000 80a7 	beq.w	80a3572 <__adddf3+0x1da>
 80a3424:	f1a4 0401 	sub.w	r4, r4, #1
 80a3428:	f1d5 0e20 	rsbs	lr, r5, #32
 80a342c:	db0d      	blt.n	80a344a <__adddf3+0xb2>
 80a342e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a3432:	fa22 f205 	lsr.w	r2, r2, r5
 80a3436:	1880      	adds	r0, r0, r2
 80a3438:	f141 0100 	adc.w	r1, r1, #0
 80a343c:	fa03 f20e 	lsl.w	r2, r3, lr
 80a3440:	1880      	adds	r0, r0, r2
 80a3442:	fa43 f305 	asr.w	r3, r3, r5
 80a3446:	4159      	adcs	r1, r3
 80a3448:	e00e      	b.n	80a3468 <__adddf3+0xd0>
 80a344a:	f1a5 0520 	sub.w	r5, r5, #32
 80a344e:	f10e 0e20 	add.w	lr, lr, #32
 80a3452:	2a01      	cmp	r2, #1
 80a3454:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a3458:	bf28      	it	cs
 80a345a:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a345e:	fa43 f305 	asr.w	r3, r3, r5
 80a3462:	18c0      	adds	r0, r0, r3
 80a3464:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a3468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a346c:	d507      	bpl.n	80a347e <__adddf3+0xe6>
 80a346e:	f04f 0e00 	mov.w	lr, #0
 80a3472:	f1dc 0c00 	rsbs	ip, ip, #0
 80a3476:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a347a:	eb6e 0101 	sbc.w	r1, lr, r1
 80a347e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a3482:	d31b      	bcc.n	80a34bc <__adddf3+0x124>
 80a3484:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a3488:	d30c      	bcc.n	80a34a4 <__adddf3+0x10c>
 80a348a:	0849      	lsrs	r1, r1, #1
 80a348c:	ea5f 0030 	movs.w	r0, r0, rrx
 80a3490:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a3494:	f104 0401 	add.w	r4, r4, #1
 80a3498:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a349c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a34a0:	f080 809a 	bcs.w	80a35d8 <__adddf3+0x240>
 80a34a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a34a8:	bf08      	it	eq
 80a34aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a34ae:	f150 0000 	adcs.w	r0, r0, #0
 80a34b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a34b6:	ea41 0105 	orr.w	r1, r1, r5
 80a34ba:	bd30      	pop	{r4, r5, pc}
 80a34bc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a34c0:	4140      	adcs	r0, r0
 80a34c2:	eb41 0101 	adc.w	r1, r1, r1
 80a34c6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a34ca:	f1a4 0401 	sub.w	r4, r4, #1
 80a34ce:	d1e9      	bne.n	80a34a4 <__adddf3+0x10c>
 80a34d0:	f091 0f00 	teq	r1, #0
 80a34d4:	bf04      	itt	eq
 80a34d6:	4601      	moveq	r1, r0
 80a34d8:	2000      	moveq	r0, #0
 80a34da:	fab1 f381 	clz	r3, r1
 80a34de:	bf08      	it	eq
 80a34e0:	3320      	addeq	r3, #32
 80a34e2:	f1a3 030b 	sub.w	r3, r3, #11
 80a34e6:	f1b3 0220 	subs.w	r2, r3, #32
 80a34ea:	da0c      	bge.n	80a3506 <__adddf3+0x16e>
 80a34ec:	320c      	adds	r2, #12
 80a34ee:	dd08      	ble.n	80a3502 <__adddf3+0x16a>
 80a34f0:	f102 0c14 	add.w	ip, r2, #20
 80a34f4:	f1c2 020c 	rsb	r2, r2, #12
 80a34f8:	fa01 f00c 	lsl.w	r0, r1, ip
 80a34fc:	fa21 f102 	lsr.w	r1, r1, r2
 80a3500:	e00c      	b.n	80a351c <__adddf3+0x184>
 80a3502:	f102 0214 	add.w	r2, r2, #20
 80a3506:	bfd8      	it	le
 80a3508:	f1c2 0c20 	rsble	ip, r2, #32
 80a350c:	fa01 f102 	lsl.w	r1, r1, r2
 80a3510:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a3514:	bfdc      	itt	le
 80a3516:	ea41 010c 	orrle.w	r1, r1, ip
 80a351a:	4090      	lslle	r0, r2
 80a351c:	1ae4      	subs	r4, r4, r3
 80a351e:	bfa2      	ittt	ge
 80a3520:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a3524:	4329      	orrge	r1, r5
 80a3526:	bd30      	popge	{r4, r5, pc}
 80a3528:	ea6f 0404 	mvn.w	r4, r4
 80a352c:	3c1f      	subs	r4, #31
 80a352e:	da1c      	bge.n	80a356a <__adddf3+0x1d2>
 80a3530:	340c      	adds	r4, #12
 80a3532:	dc0e      	bgt.n	80a3552 <__adddf3+0x1ba>
 80a3534:	f104 0414 	add.w	r4, r4, #20
 80a3538:	f1c4 0220 	rsb	r2, r4, #32
 80a353c:	fa20 f004 	lsr.w	r0, r0, r4
 80a3540:	fa01 f302 	lsl.w	r3, r1, r2
 80a3544:	ea40 0003 	orr.w	r0, r0, r3
 80a3548:	fa21 f304 	lsr.w	r3, r1, r4
 80a354c:	ea45 0103 	orr.w	r1, r5, r3
 80a3550:	bd30      	pop	{r4, r5, pc}
 80a3552:	f1c4 040c 	rsb	r4, r4, #12
 80a3556:	f1c4 0220 	rsb	r2, r4, #32
 80a355a:	fa20 f002 	lsr.w	r0, r0, r2
 80a355e:	fa01 f304 	lsl.w	r3, r1, r4
 80a3562:	ea40 0003 	orr.w	r0, r0, r3
 80a3566:	4629      	mov	r1, r5
 80a3568:	bd30      	pop	{r4, r5, pc}
 80a356a:	fa21 f004 	lsr.w	r0, r1, r4
 80a356e:	4629      	mov	r1, r5
 80a3570:	bd30      	pop	{r4, r5, pc}
 80a3572:	f094 0f00 	teq	r4, #0
 80a3576:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a357a:	bf06      	itte	eq
 80a357c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a3580:	3401      	addeq	r4, #1
 80a3582:	3d01      	subne	r5, #1
 80a3584:	e74e      	b.n	80a3424 <__adddf3+0x8c>
 80a3586:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a358a:	bf18      	it	ne
 80a358c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a3590:	d029      	beq.n	80a35e6 <__adddf3+0x24e>
 80a3592:	ea94 0f05 	teq	r4, r5
 80a3596:	bf08      	it	eq
 80a3598:	ea90 0f02 	teqeq	r0, r2
 80a359c:	d005      	beq.n	80a35aa <__adddf3+0x212>
 80a359e:	ea54 0c00 	orrs.w	ip, r4, r0
 80a35a2:	bf04      	itt	eq
 80a35a4:	4619      	moveq	r1, r3
 80a35a6:	4610      	moveq	r0, r2
 80a35a8:	bd30      	pop	{r4, r5, pc}
 80a35aa:	ea91 0f03 	teq	r1, r3
 80a35ae:	bf1e      	ittt	ne
 80a35b0:	2100      	movne	r1, #0
 80a35b2:	2000      	movne	r0, #0
 80a35b4:	bd30      	popne	{r4, r5, pc}
 80a35b6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a35ba:	d105      	bne.n	80a35c8 <__adddf3+0x230>
 80a35bc:	0040      	lsls	r0, r0, #1
 80a35be:	4149      	adcs	r1, r1
 80a35c0:	bf28      	it	cs
 80a35c2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a35c6:	bd30      	pop	{r4, r5, pc}
 80a35c8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a35cc:	bf3c      	itt	cc
 80a35ce:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a35d2:	bd30      	popcc	{r4, r5, pc}
 80a35d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a35d8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a35dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a35e0:	f04f 0000 	mov.w	r0, #0
 80a35e4:	bd30      	pop	{r4, r5, pc}
 80a35e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a35ea:	bf1a      	itte	ne
 80a35ec:	4619      	movne	r1, r3
 80a35ee:	4610      	movne	r0, r2
 80a35f0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a35f4:	bf1c      	itt	ne
 80a35f6:	460b      	movne	r3, r1
 80a35f8:	4602      	movne	r2, r0
 80a35fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a35fe:	bf06      	itte	eq
 80a3600:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a3604:	ea91 0f03 	teqeq	r1, r3
 80a3608:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a360c:	bd30      	pop	{r4, r5, pc}
 80a360e:	bf00      	nop

080a3610 <__aeabi_ui2d>:
 80a3610:	f090 0f00 	teq	r0, #0
 80a3614:	bf04      	itt	eq
 80a3616:	2100      	moveq	r1, #0
 80a3618:	4770      	bxeq	lr
 80a361a:	b530      	push	{r4, r5, lr}
 80a361c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3620:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3624:	f04f 0500 	mov.w	r5, #0
 80a3628:	f04f 0100 	mov.w	r1, #0
 80a362c:	e750      	b.n	80a34d0 <__adddf3+0x138>
 80a362e:	bf00      	nop

080a3630 <__aeabi_i2d>:
 80a3630:	f090 0f00 	teq	r0, #0
 80a3634:	bf04      	itt	eq
 80a3636:	2100      	moveq	r1, #0
 80a3638:	4770      	bxeq	lr
 80a363a:	b530      	push	{r4, r5, lr}
 80a363c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3640:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3644:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a3648:	bf48      	it	mi
 80a364a:	4240      	negmi	r0, r0
 80a364c:	f04f 0100 	mov.w	r1, #0
 80a3650:	e73e      	b.n	80a34d0 <__adddf3+0x138>
 80a3652:	bf00      	nop

080a3654 <__aeabi_f2d>:
 80a3654:	0042      	lsls	r2, r0, #1
 80a3656:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a365a:	ea4f 0131 	mov.w	r1, r1, rrx
 80a365e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a3662:	bf1f      	itttt	ne
 80a3664:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a3668:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a366c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a3670:	4770      	bxne	lr
 80a3672:	f092 0f00 	teq	r2, #0
 80a3676:	bf14      	ite	ne
 80a3678:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a367c:	4770      	bxeq	lr
 80a367e:	b530      	push	{r4, r5, lr}
 80a3680:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a3684:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3688:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a368c:	e720      	b.n	80a34d0 <__adddf3+0x138>
 80a368e:	bf00      	nop

080a3690 <__aeabi_ul2d>:
 80a3690:	ea50 0201 	orrs.w	r2, r0, r1
 80a3694:	bf08      	it	eq
 80a3696:	4770      	bxeq	lr
 80a3698:	b530      	push	{r4, r5, lr}
 80a369a:	f04f 0500 	mov.w	r5, #0
 80a369e:	e00a      	b.n	80a36b6 <__aeabi_l2d+0x16>

080a36a0 <__aeabi_l2d>:
 80a36a0:	ea50 0201 	orrs.w	r2, r0, r1
 80a36a4:	bf08      	it	eq
 80a36a6:	4770      	bxeq	lr
 80a36a8:	b530      	push	{r4, r5, lr}
 80a36aa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a36ae:	d502      	bpl.n	80a36b6 <__aeabi_l2d+0x16>
 80a36b0:	4240      	negs	r0, r0
 80a36b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a36b6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a36ba:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a36be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a36c2:	f43f aedc 	beq.w	80a347e <__adddf3+0xe6>
 80a36c6:	f04f 0203 	mov.w	r2, #3
 80a36ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a36ce:	bf18      	it	ne
 80a36d0:	3203      	addne	r2, #3
 80a36d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a36d6:	bf18      	it	ne
 80a36d8:	3203      	addne	r2, #3
 80a36da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a36de:	f1c2 0320 	rsb	r3, r2, #32
 80a36e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80a36e6:	fa20 f002 	lsr.w	r0, r0, r2
 80a36ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80a36ee:	ea40 000e 	orr.w	r0, r0, lr
 80a36f2:	fa21 f102 	lsr.w	r1, r1, r2
 80a36f6:	4414      	add	r4, r2
 80a36f8:	e6c1      	b.n	80a347e <__adddf3+0xe6>
 80a36fa:	bf00      	nop

080a36fc <__aeabi_dmul>:
 80a36fc:	b570      	push	{r4, r5, r6, lr}
 80a36fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3702:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a3706:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a370a:	bf1d      	ittte	ne
 80a370c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a3710:	ea94 0f0c 	teqne	r4, ip
 80a3714:	ea95 0f0c 	teqne	r5, ip
 80a3718:	f000 f8de 	bleq	80a38d8 <__aeabi_dmul+0x1dc>
 80a371c:	442c      	add	r4, r5
 80a371e:	ea81 0603 	eor.w	r6, r1, r3
 80a3722:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a3726:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a372a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a372e:	bf18      	it	ne
 80a3730:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a3734:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3738:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a373c:	d038      	beq.n	80a37b0 <__aeabi_dmul+0xb4>
 80a373e:	fba0 ce02 	umull	ip, lr, r0, r2
 80a3742:	f04f 0500 	mov.w	r5, #0
 80a3746:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a374a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a374e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a3752:	f04f 0600 	mov.w	r6, #0
 80a3756:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a375a:	f09c 0f00 	teq	ip, #0
 80a375e:	bf18      	it	ne
 80a3760:	f04e 0e01 	orrne.w	lr, lr, #1
 80a3764:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a3768:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a376c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a3770:	d204      	bcs.n	80a377c <__aeabi_dmul+0x80>
 80a3772:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a3776:	416d      	adcs	r5, r5
 80a3778:	eb46 0606 	adc.w	r6, r6, r6
 80a377c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a3780:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a3784:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a3788:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a378c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a3790:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a3794:	bf88      	it	hi
 80a3796:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a379a:	d81e      	bhi.n	80a37da <__aeabi_dmul+0xde>
 80a379c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a37a0:	bf08      	it	eq
 80a37a2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a37a6:	f150 0000 	adcs.w	r0, r0, #0
 80a37aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a37ae:	bd70      	pop	{r4, r5, r6, pc}
 80a37b0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a37b4:	ea46 0101 	orr.w	r1, r6, r1
 80a37b8:	ea40 0002 	orr.w	r0, r0, r2
 80a37bc:	ea81 0103 	eor.w	r1, r1, r3
 80a37c0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a37c4:	bfc2      	ittt	gt
 80a37c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a37ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a37ce:	bd70      	popgt	{r4, r5, r6, pc}
 80a37d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a37d4:	f04f 0e00 	mov.w	lr, #0
 80a37d8:	3c01      	subs	r4, #1
 80a37da:	f300 80ab 	bgt.w	80a3934 <__aeabi_dmul+0x238>
 80a37de:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a37e2:	bfde      	ittt	le
 80a37e4:	2000      	movle	r0, #0
 80a37e6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a37ea:	bd70      	pople	{r4, r5, r6, pc}
 80a37ec:	f1c4 0400 	rsb	r4, r4, #0
 80a37f0:	3c20      	subs	r4, #32
 80a37f2:	da35      	bge.n	80a3860 <__aeabi_dmul+0x164>
 80a37f4:	340c      	adds	r4, #12
 80a37f6:	dc1b      	bgt.n	80a3830 <__aeabi_dmul+0x134>
 80a37f8:	f104 0414 	add.w	r4, r4, #20
 80a37fc:	f1c4 0520 	rsb	r5, r4, #32
 80a3800:	fa00 f305 	lsl.w	r3, r0, r5
 80a3804:	fa20 f004 	lsr.w	r0, r0, r4
 80a3808:	fa01 f205 	lsl.w	r2, r1, r5
 80a380c:	ea40 0002 	orr.w	r0, r0, r2
 80a3810:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a3814:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3818:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a381c:	fa21 f604 	lsr.w	r6, r1, r4
 80a3820:	eb42 0106 	adc.w	r1, r2, r6
 80a3824:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3828:	bf08      	it	eq
 80a382a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a382e:	bd70      	pop	{r4, r5, r6, pc}
 80a3830:	f1c4 040c 	rsb	r4, r4, #12
 80a3834:	f1c4 0520 	rsb	r5, r4, #32
 80a3838:	fa00 f304 	lsl.w	r3, r0, r4
 80a383c:	fa20 f005 	lsr.w	r0, r0, r5
 80a3840:	fa01 f204 	lsl.w	r2, r1, r4
 80a3844:	ea40 0002 	orr.w	r0, r0, r2
 80a3848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a384c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a3850:	f141 0100 	adc.w	r1, r1, #0
 80a3854:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3858:	bf08      	it	eq
 80a385a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a385e:	bd70      	pop	{r4, r5, r6, pc}
 80a3860:	f1c4 0520 	rsb	r5, r4, #32
 80a3864:	fa00 f205 	lsl.w	r2, r0, r5
 80a3868:	ea4e 0e02 	orr.w	lr, lr, r2
 80a386c:	fa20 f304 	lsr.w	r3, r0, r4
 80a3870:	fa01 f205 	lsl.w	r2, r1, r5
 80a3874:	ea43 0302 	orr.w	r3, r3, r2
 80a3878:	fa21 f004 	lsr.w	r0, r1, r4
 80a387c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3880:	fa21 f204 	lsr.w	r2, r1, r4
 80a3884:	ea20 0002 	bic.w	r0, r0, r2
 80a3888:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a388c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3890:	bf08      	it	eq
 80a3892:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3896:	bd70      	pop	{r4, r5, r6, pc}
 80a3898:	f094 0f00 	teq	r4, #0
 80a389c:	d10f      	bne.n	80a38be <__aeabi_dmul+0x1c2>
 80a389e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a38a2:	0040      	lsls	r0, r0, #1
 80a38a4:	eb41 0101 	adc.w	r1, r1, r1
 80a38a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a38ac:	bf08      	it	eq
 80a38ae:	3c01      	subeq	r4, #1
 80a38b0:	d0f7      	beq.n	80a38a2 <__aeabi_dmul+0x1a6>
 80a38b2:	ea41 0106 	orr.w	r1, r1, r6
 80a38b6:	f095 0f00 	teq	r5, #0
 80a38ba:	bf18      	it	ne
 80a38bc:	4770      	bxne	lr
 80a38be:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a38c2:	0052      	lsls	r2, r2, #1
 80a38c4:	eb43 0303 	adc.w	r3, r3, r3
 80a38c8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a38cc:	bf08      	it	eq
 80a38ce:	3d01      	subeq	r5, #1
 80a38d0:	d0f7      	beq.n	80a38c2 <__aeabi_dmul+0x1c6>
 80a38d2:	ea43 0306 	orr.w	r3, r3, r6
 80a38d6:	4770      	bx	lr
 80a38d8:	ea94 0f0c 	teq	r4, ip
 80a38dc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a38e0:	bf18      	it	ne
 80a38e2:	ea95 0f0c 	teqne	r5, ip
 80a38e6:	d00c      	beq.n	80a3902 <__aeabi_dmul+0x206>
 80a38e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a38ec:	bf18      	it	ne
 80a38ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a38f2:	d1d1      	bne.n	80a3898 <__aeabi_dmul+0x19c>
 80a38f4:	ea81 0103 	eor.w	r1, r1, r3
 80a38f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a38fc:	f04f 0000 	mov.w	r0, #0
 80a3900:	bd70      	pop	{r4, r5, r6, pc}
 80a3902:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3906:	bf06      	itte	eq
 80a3908:	4610      	moveq	r0, r2
 80a390a:	4619      	moveq	r1, r3
 80a390c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3910:	d019      	beq.n	80a3946 <__aeabi_dmul+0x24a>
 80a3912:	ea94 0f0c 	teq	r4, ip
 80a3916:	d102      	bne.n	80a391e <__aeabi_dmul+0x222>
 80a3918:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a391c:	d113      	bne.n	80a3946 <__aeabi_dmul+0x24a>
 80a391e:	ea95 0f0c 	teq	r5, ip
 80a3922:	d105      	bne.n	80a3930 <__aeabi_dmul+0x234>
 80a3924:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a3928:	bf1c      	itt	ne
 80a392a:	4610      	movne	r0, r2
 80a392c:	4619      	movne	r1, r3
 80a392e:	d10a      	bne.n	80a3946 <__aeabi_dmul+0x24a>
 80a3930:	ea81 0103 	eor.w	r1, r1, r3
 80a3934:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3938:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a393c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3940:	f04f 0000 	mov.w	r0, #0
 80a3944:	bd70      	pop	{r4, r5, r6, pc}
 80a3946:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a394a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a394e:	bd70      	pop	{r4, r5, r6, pc}

080a3950 <__aeabi_ddiv>:
 80a3950:	b570      	push	{r4, r5, r6, lr}
 80a3952:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3956:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a395a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a395e:	bf1d      	ittte	ne
 80a3960:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a3964:	ea94 0f0c 	teqne	r4, ip
 80a3968:	ea95 0f0c 	teqne	r5, ip
 80a396c:	f000 f8a7 	bleq	80a3abe <__aeabi_ddiv+0x16e>
 80a3970:	eba4 0405 	sub.w	r4, r4, r5
 80a3974:	ea81 0e03 	eor.w	lr, r1, r3
 80a3978:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a397c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3980:	f000 8088 	beq.w	80a3a94 <__aeabi_ddiv+0x144>
 80a3984:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3988:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a398c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a3990:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a3994:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a3998:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a399c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a39a0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a39a4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a39a8:	429d      	cmp	r5, r3
 80a39aa:	bf08      	it	eq
 80a39ac:	4296      	cmpeq	r6, r2
 80a39ae:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a39b2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a39b6:	d202      	bcs.n	80a39be <__aeabi_ddiv+0x6e>
 80a39b8:	085b      	lsrs	r3, r3, #1
 80a39ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80a39be:	1ab6      	subs	r6, r6, r2
 80a39c0:	eb65 0503 	sbc.w	r5, r5, r3
 80a39c4:	085b      	lsrs	r3, r3, #1
 80a39c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a39ca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a39ce:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a39d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a39d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a39da:	bf22      	ittt	cs
 80a39dc:	1ab6      	subcs	r6, r6, r2
 80a39de:	4675      	movcs	r5, lr
 80a39e0:	ea40 000c 	orrcs.w	r0, r0, ip
 80a39e4:	085b      	lsrs	r3, r3, #1
 80a39e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a39ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80a39ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a39f2:	bf22      	ittt	cs
 80a39f4:	1ab6      	subcs	r6, r6, r2
 80a39f6:	4675      	movcs	r5, lr
 80a39f8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a39fc:	085b      	lsrs	r3, r3, #1
 80a39fe:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3a02:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3a06:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3a0a:	bf22      	ittt	cs
 80a3a0c:	1ab6      	subcs	r6, r6, r2
 80a3a0e:	4675      	movcs	r5, lr
 80a3a10:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a3a14:	085b      	lsrs	r3, r3, #1
 80a3a16:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3a1a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3a1e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3a22:	bf22      	ittt	cs
 80a3a24:	1ab6      	subcs	r6, r6, r2
 80a3a26:	4675      	movcs	r5, lr
 80a3a28:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a3a2c:	ea55 0e06 	orrs.w	lr, r5, r6
 80a3a30:	d018      	beq.n	80a3a64 <__aeabi_ddiv+0x114>
 80a3a32:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a3a36:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a3a3a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a3a3e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a3a42:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a3a46:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a3a4a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a3a4e:	d1c0      	bne.n	80a39d2 <__aeabi_ddiv+0x82>
 80a3a50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3a54:	d10b      	bne.n	80a3a6e <__aeabi_ddiv+0x11e>
 80a3a56:	ea41 0100 	orr.w	r1, r1, r0
 80a3a5a:	f04f 0000 	mov.w	r0, #0
 80a3a5e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a3a62:	e7b6      	b.n	80a39d2 <__aeabi_ddiv+0x82>
 80a3a64:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3a68:	bf04      	itt	eq
 80a3a6a:	4301      	orreq	r1, r0
 80a3a6c:	2000      	moveq	r0, #0
 80a3a6e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a3a72:	bf88      	it	hi
 80a3a74:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a3a78:	f63f aeaf 	bhi.w	80a37da <__aeabi_dmul+0xde>
 80a3a7c:	ebb5 0c03 	subs.w	ip, r5, r3
 80a3a80:	bf04      	itt	eq
 80a3a82:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a3a86:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a3a8a:	f150 0000 	adcs.w	r0, r0, #0
 80a3a8e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3a92:	bd70      	pop	{r4, r5, r6, pc}
 80a3a94:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a3a98:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a3a9c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a3aa0:	bfc2      	ittt	gt
 80a3aa2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a3aa6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a3aaa:	bd70      	popgt	{r4, r5, r6, pc}
 80a3aac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3ab0:	f04f 0e00 	mov.w	lr, #0
 80a3ab4:	3c01      	subs	r4, #1
 80a3ab6:	e690      	b.n	80a37da <__aeabi_dmul+0xde>
 80a3ab8:	ea45 0e06 	orr.w	lr, r5, r6
 80a3abc:	e68d      	b.n	80a37da <__aeabi_dmul+0xde>
 80a3abe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a3ac2:	ea94 0f0c 	teq	r4, ip
 80a3ac6:	bf08      	it	eq
 80a3ac8:	ea95 0f0c 	teqeq	r5, ip
 80a3acc:	f43f af3b 	beq.w	80a3946 <__aeabi_dmul+0x24a>
 80a3ad0:	ea94 0f0c 	teq	r4, ip
 80a3ad4:	d10a      	bne.n	80a3aec <__aeabi_ddiv+0x19c>
 80a3ad6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a3ada:	f47f af34 	bne.w	80a3946 <__aeabi_dmul+0x24a>
 80a3ade:	ea95 0f0c 	teq	r5, ip
 80a3ae2:	f47f af25 	bne.w	80a3930 <__aeabi_dmul+0x234>
 80a3ae6:	4610      	mov	r0, r2
 80a3ae8:	4619      	mov	r1, r3
 80a3aea:	e72c      	b.n	80a3946 <__aeabi_dmul+0x24a>
 80a3aec:	ea95 0f0c 	teq	r5, ip
 80a3af0:	d106      	bne.n	80a3b00 <__aeabi_ddiv+0x1b0>
 80a3af2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a3af6:	f43f aefd 	beq.w	80a38f4 <__aeabi_dmul+0x1f8>
 80a3afa:	4610      	mov	r0, r2
 80a3afc:	4619      	mov	r1, r3
 80a3afe:	e722      	b.n	80a3946 <__aeabi_dmul+0x24a>
 80a3b00:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3b04:	bf18      	it	ne
 80a3b06:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3b0a:	f47f aec5 	bne.w	80a3898 <__aeabi_dmul+0x19c>
 80a3b0e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a3b12:	f47f af0d 	bne.w	80a3930 <__aeabi_dmul+0x234>
 80a3b16:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a3b1a:	f47f aeeb 	bne.w	80a38f4 <__aeabi_dmul+0x1f8>
 80a3b1e:	e712      	b.n	80a3946 <__aeabi_dmul+0x24a>

080a3b20 <__gedf2>:
 80a3b20:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a3b24:	e006      	b.n	80a3b34 <__cmpdf2+0x4>
 80a3b26:	bf00      	nop

080a3b28 <__ledf2>:
 80a3b28:	f04f 0c01 	mov.w	ip, #1
 80a3b2c:	e002      	b.n	80a3b34 <__cmpdf2+0x4>
 80a3b2e:	bf00      	nop

080a3b30 <__cmpdf2>:
 80a3b30:	f04f 0c01 	mov.w	ip, #1
 80a3b34:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a3b38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3b3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3b40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3b44:	bf18      	it	ne
 80a3b46:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a3b4a:	d01b      	beq.n	80a3b84 <__cmpdf2+0x54>
 80a3b4c:	b001      	add	sp, #4
 80a3b4e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a3b52:	bf0c      	ite	eq
 80a3b54:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a3b58:	ea91 0f03 	teqne	r1, r3
 80a3b5c:	bf02      	ittt	eq
 80a3b5e:	ea90 0f02 	teqeq	r0, r2
 80a3b62:	2000      	moveq	r0, #0
 80a3b64:	4770      	bxeq	lr
 80a3b66:	f110 0f00 	cmn.w	r0, #0
 80a3b6a:	ea91 0f03 	teq	r1, r3
 80a3b6e:	bf58      	it	pl
 80a3b70:	4299      	cmppl	r1, r3
 80a3b72:	bf08      	it	eq
 80a3b74:	4290      	cmpeq	r0, r2
 80a3b76:	bf2c      	ite	cs
 80a3b78:	17d8      	asrcs	r0, r3, #31
 80a3b7a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a3b7e:	f040 0001 	orr.w	r0, r0, #1
 80a3b82:	4770      	bx	lr
 80a3b84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3b8c:	d102      	bne.n	80a3b94 <__cmpdf2+0x64>
 80a3b8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a3b92:	d107      	bne.n	80a3ba4 <__cmpdf2+0x74>
 80a3b94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3b98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3b9c:	d1d6      	bne.n	80a3b4c <__cmpdf2+0x1c>
 80a3b9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a3ba2:	d0d3      	beq.n	80a3b4c <__cmpdf2+0x1c>
 80a3ba4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a3ba8:	4770      	bx	lr
 80a3baa:	bf00      	nop

080a3bac <__aeabi_cdrcmple>:
 80a3bac:	4684      	mov	ip, r0
 80a3bae:	4610      	mov	r0, r2
 80a3bb0:	4662      	mov	r2, ip
 80a3bb2:	468c      	mov	ip, r1
 80a3bb4:	4619      	mov	r1, r3
 80a3bb6:	4663      	mov	r3, ip
 80a3bb8:	e000      	b.n	80a3bbc <__aeabi_cdcmpeq>
 80a3bba:	bf00      	nop

080a3bbc <__aeabi_cdcmpeq>:
 80a3bbc:	b501      	push	{r0, lr}
 80a3bbe:	f7ff ffb7 	bl	80a3b30 <__cmpdf2>
 80a3bc2:	2800      	cmp	r0, #0
 80a3bc4:	bf48      	it	mi
 80a3bc6:	f110 0f00 	cmnmi.w	r0, #0
 80a3bca:	bd01      	pop	{r0, pc}

080a3bcc <__aeabi_dcmpeq>:
 80a3bcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3bd0:	f7ff fff4 	bl	80a3bbc <__aeabi_cdcmpeq>
 80a3bd4:	bf0c      	ite	eq
 80a3bd6:	2001      	moveq	r0, #1
 80a3bd8:	2000      	movne	r0, #0
 80a3bda:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3bde:	bf00      	nop

080a3be0 <__aeabi_dcmplt>:
 80a3be0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3be4:	f7ff ffea 	bl	80a3bbc <__aeabi_cdcmpeq>
 80a3be8:	bf34      	ite	cc
 80a3bea:	2001      	movcc	r0, #1
 80a3bec:	2000      	movcs	r0, #0
 80a3bee:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3bf2:	bf00      	nop

080a3bf4 <__aeabi_dcmple>:
 80a3bf4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3bf8:	f7ff ffe0 	bl	80a3bbc <__aeabi_cdcmpeq>
 80a3bfc:	bf94      	ite	ls
 80a3bfe:	2001      	movls	r0, #1
 80a3c00:	2000      	movhi	r0, #0
 80a3c02:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3c06:	bf00      	nop

080a3c08 <__aeabi_dcmpge>:
 80a3c08:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3c0c:	f7ff ffce 	bl	80a3bac <__aeabi_cdrcmple>
 80a3c10:	bf94      	ite	ls
 80a3c12:	2001      	movls	r0, #1
 80a3c14:	2000      	movhi	r0, #0
 80a3c16:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3c1a:	bf00      	nop

080a3c1c <__aeabi_dcmpgt>:
 80a3c1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3c20:	f7ff ffc4 	bl	80a3bac <__aeabi_cdrcmple>
 80a3c24:	bf34      	ite	cc
 80a3c26:	2001      	movcc	r0, #1
 80a3c28:	2000      	movcs	r0, #0
 80a3c2a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3c2e:	bf00      	nop

080a3c30 <__aeabi_dcmpun>:
 80a3c30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3c34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3c38:	d102      	bne.n	80a3c40 <__aeabi_dcmpun+0x10>
 80a3c3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a3c3e:	d10a      	bne.n	80a3c56 <__aeabi_dcmpun+0x26>
 80a3c40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3c44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3c48:	d102      	bne.n	80a3c50 <__aeabi_dcmpun+0x20>
 80a3c4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a3c4e:	d102      	bne.n	80a3c56 <__aeabi_dcmpun+0x26>
 80a3c50:	f04f 0000 	mov.w	r0, #0
 80a3c54:	4770      	bx	lr
 80a3c56:	f04f 0001 	mov.w	r0, #1
 80a3c5a:	4770      	bx	lr

080a3c5c <__aeabi_d2iz>:
 80a3c5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a3c60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a3c64:	d215      	bcs.n	80a3c92 <__aeabi_d2iz+0x36>
 80a3c66:	d511      	bpl.n	80a3c8c <__aeabi_d2iz+0x30>
 80a3c68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a3c6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a3c70:	d912      	bls.n	80a3c98 <__aeabi_d2iz+0x3c>
 80a3c72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a3c76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a3c7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a3c7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3c82:	fa23 f002 	lsr.w	r0, r3, r2
 80a3c86:	bf18      	it	ne
 80a3c88:	4240      	negne	r0, r0
 80a3c8a:	4770      	bx	lr
 80a3c8c:	f04f 0000 	mov.w	r0, #0
 80a3c90:	4770      	bx	lr
 80a3c92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a3c96:	d105      	bne.n	80a3ca4 <__aeabi_d2iz+0x48>
 80a3c98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a3c9c:	bf08      	it	eq
 80a3c9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a3ca2:	4770      	bx	lr
 80a3ca4:	f04f 0000 	mov.w	r0, #0
 80a3ca8:	4770      	bx	lr
 80a3caa:	bf00      	nop

080a3cac <__aeabi_d2uiz>:
 80a3cac:	004a      	lsls	r2, r1, #1
 80a3cae:	d211      	bcs.n	80a3cd4 <__aeabi_d2uiz+0x28>
 80a3cb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a3cb4:	d211      	bcs.n	80a3cda <__aeabi_d2uiz+0x2e>
 80a3cb6:	d50d      	bpl.n	80a3cd4 <__aeabi_d2uiz+0x28>
 80a3cb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a3cbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a3cc0:	d40e      	bmi.n	80a3ce0 <__aeabi_d2uiz+0x34>
 80a3cc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a3cc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a3cca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a3cce:	fa23 f002 	lsr.w	r0, r3, r2
 80a3cd2:	4770      	bx	lr
 80a3cd4:	f04f 0000 	mov.w	r0, #0
 80a3cd8:	4770      	bx	lr
 80a3cda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a3cde:	d102      	bne.n	80a3ce6 <__aeabi_d2uiz+0x3a>
 80a3ce0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a3ce4:	4770      	bx	lr
 80a3ce6:	f04f 0000 	mov.w	r0, #0
 80a3cea:	4770      	bx	lr

080a3cec <__aeabi_d2f>:
 80a3cec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a3cf0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a3cf4:	bf24      	itt	cs
 80a3cf6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a3cfa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a3cfe:	d90d      	bls.n	80a3d1c <__aeabi_d2f+0x30>
 80a3d00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a3d04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a3d08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a3d0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a3d10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a3d14:	bf08      	it	eq
 80a3d16:	f020 0001 	biceq.w	r0, r0, #1
 80a3d1a:	4770      	bx	lr
 80a3d1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a3d20:	d121      	bne.n	80a3d66 <__aeabi_d2f+0x7a>
 80a3d22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a3d26:	bfbc      	itt	lt
 80a3d28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a3d2c:	4770      	bxlt	lr
 80a3d2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3d32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a3d36:	f1c2 0218 	rsb	r2, r2, #24
 80a3d3a:	f1c2 0c20 	rsb	ip, r2, #32
 80a3d3e:	fa10 f30c 	lsls.w	r3, r0, ip
 80a3d42:	fa20 f002 	lsr.w	r0, r0, r2
 80a3d46:	bf18      	it	ne
 80a3d48:	f040 0001 	orrne.w	r0, r0, #1
 80a3d4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a3d50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a3d54:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a3d58:	ea40 000c 	orr.w	r0, r0, ip
 80a3d5c:	fa23 f302 	lsr.w	r3, r3, r2
 80a3d60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a3d64:	e7cc      	b.n	80a3d00 <__aeabi_d2f+0x14>
 80a3d66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a3d6a:	d107      	bne.n	80a3d7c <__aeabi_d2f+0x90>
 80a3d6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a3d70:	bf1e      	ittt	ne
 80a3d72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a3d76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a3d7a:	4770      	bxne	lr
 80a3d7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a3d80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a3d84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3d88:	4770      	bx	lr
 80a3d8a:	bf00      	nop

080a3d8c <__aeabi_frsub>:
 80a3d8c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a3d90:	e002      	b.n	80a3d98 <__addsf3>
 80a3d92:	bf00      	nop

080a3d94 <__aeabi_fsub>:
 80a3d94:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a3d98 <__addsf3>:
 80a3d98:	0042      	lsls	r2, r0, #1
 80a3d9a:	bf1f      	itttt	ne
 80a3d9c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a3da0:	ea92 0f03 	teqne	r2, r3
 80a3da4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a3da8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3dac:	d06a      	beq.n	80a3e84 <__addsf3+0xec>
 80a3dae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a3db2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a3db6:	bfc1      	itttt	gt
 80a3db8:	18d2      	addgt	r2, r2, r3
 80a3dba:	4041      	eorgt	r1, r0
 80a3dbc:	4048      	eorgt	r0, r1
 80a3dbe:	4041      	eorgt	r1, r0
 80a3dc0:	bfb8      	it	lt
 80a3dc2:	425b      	neglt	r3, r3
 80a3dc4:	2b19      	cmp	r3, #25
 80a3dc6:	bf88      	it	hi
 80a3dc8:	4770      	bxhi	lr
 80a3dca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a3dce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3dd2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a3dd6:	bf18      	it	ne
 80a3dd8:	4240      	negne	r0, r0
 80a3dda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3dde:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a3de2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a3de6:	bf18      	it	ne
 80a3de8:	4249      	negne	r1, r1
 80a3dea:	ea92 0f03 	teq	r2, r3
 80a3dee:	d03f      	beq.n	80a3e70 <__addsf3+0xd8>
 80a3df0:	f1a2 0201 	sub.w	r2, r2, #1
 80a3df4:	fa41 fc03 	asr.w	ip, r1, r3
 80a3df8:	eb10 000c 	adds.w	r0, r0, ip
 80a3dfc:	f1c3 0320 	rsb	r3, r3, #32
 80a3e00:	fa01 f103 	lsl.w	r1, r1, r3
 80a3e04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a3e08:	d502      	bpl.n	80a3e10 <__addsf3+0x78>
 80a3e0a:	4249      	negs	r1, r1
 80a3e0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a3e10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a3e14:	d313      	bcc.n	80a3e3e <__addsf3+0xa6>
 80a3e16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a3e1a:	d306      	bcc.n	80a3e2a <__addsf3+0x92>
 80a3e1c:	0840      	lsrs	r0, r0, #1
 80a3e1e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a3e22:	f102 0201 	add.w	r2, r2, #1
 80a3e26:	2afe      	cmp	r2, #254	; 0xfe
 80a3e28:	d251      	bcs.n	80a3ece <__addsf3+0x136>
 80a3e2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a3e2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3e32:	bf08      	it	eq
 80a3e34:	f020 0001 	biceq.w	r0, r0, #1
 80a3e38:	ea40 0003 	orr.w	r0, r0, r3
 80a3e3c:	4770      	bx	lr
 80a3e3e:	0049      	lsls	r1, r1, #1
 80a3e40:	eb40 0000 	adc.w	r0, r0, r0
 80a3e44:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a3e48:	f1a2 0201 	sub.w	r2, r2, #1
 80a3e4c:	d1ed      	bne.n	80a3e2a <__addsf3+0x92>
 80a3e4e:	fab0 fc80 	clz	ip, r0
 80a3e52:	f1ac 0c08 	sub.w	ip, ip, #8
 80a3e56:	ebb2 020c 	subs.w	r2, r2, ip
 80a3e5a:	fa00 f00c 	lsl.w	r0, r0, ip
 80a3e5e:	bfaa      	itet	ge
 80a3e60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a3e64:	4252      	neglt	r2, r2
 80a3e66:	4318      	orrge	r0, r3
 80a3e68:	bfbc      	itt	lt
 80a3e6a:	40d0      	lsrlt	r0, r2
 80a3e6c:	4318      	orrlt	r0, r3
 80a3e6e:	4770      	bx	lr
 80a3e70:	f092 0f00 	teq	r2, #0
 80a3e74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a3e78:	bf06      	itte	eq
 80a3e7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a3e7e:	3201      	addeq	r2, #1
 80a3e80:	3b01      	subne	r3, #1
 80a3e82:	e7b5      	b.n	80a3df0 <__addsf3+0x58>
 80a3e84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a3e88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a3e8c:	bf18      	it	ne
 80a3e8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3e92:	d021      	beq.n	80a3ed8 <__addsf3+0x140>
 80a3e94:	ea92 0f03 	teq	r2, r3
 80a3e98:	d004      	beq.n	80a3ea4 <__addsf3+0x10c>
 80a3e9a:	f092 0f00 	teq	r2, #0
 80a3e9e:	bf08      	it	eq
 80a3ea0:	4608      	moveq	r0, r1
 80a3ea2:	4770      	bx	lr
 80a3ea4:	ea90 0f01 	teq	r0, r1
 80a3ea8:	bf1c      	itt	ne
 80a3eaa:	2000      	movne	r0, #0
 80a3eac:	4770      	bxne	lr
 80a3eae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a3eb2:	d104      	bne.n	80a3ebe <__addsf3+0x126>
 80a3eb4:	0040      	lsls	r0, r0, #1
 80a3eb6:	bf28      	it	cs
 80a3eb8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a3ebc:	4770      	bx	lr
 80a3ebe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a3ec2:	bf3c      	itt	cc
 80a3ec4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a3ec8:	4770      	bxcc	lr
 80a3eca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a3ece:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a3ed2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3ed6:	4770      	bx	lr
 80a3ed8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a3edc:	bf16      	itet	ne
 80a3ede:	4608      	movne	r0, r1
 80a3ee0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a3ee4:	4601      	movne	r1, r0
 80a3ee6:	0242      	lsls	r2, r0, #9
 80a3ee8:	bf06      	itte	eq
 80a3eea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a3eee:	ea90 0f01 	teqeq	r0, r1
 80a3ef2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a3ef6:	4770      	bx	lr

080a3ef8 <__aeabi_ui2f>:
 80a3ef8:	f04f 0300 	mov.w	r3, #0
 80a3efc:	e004      	b.n	80a3f08 <__aeabi_i2f+0x8>
 80a3efe:	bf00      	nop

080a3f00 <__aeabi_i2f>:
 80a3f00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a3f04:	bf48      	it	mi
 80a3f06:	4240      	negmi	r0, r0
 80a3f08:	ea5f 0c00 	movs.w	ip, r0
 80a3f0c:	bf08      	it	eq
 80a3f0e:	4770      	bxeq	lr
 80a3f10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a3f14:	4601      	mov	r1, r0
 80a3f16:	f04f 0000 	mov.w	r0, #0
 80a3f1a:	e01c      	b.n	80a3f56 <__aeabi_l2f+0x2a>

080a3f1c <__aeabi_ul2f>:
 80a3f1c:	ea50 0201 	orrs.w	r2, r0, r1
 80a3f20:	bf08      	it	eq
 80a3f22:	4770      	bxeq	lr
 80a3f24:	f04f 0300 	mov.w	r3, #0
 80a3f28:	e00a      	b.n	80a3f40 <__aeabi_l2f+0x14>
 80a3f2a:	bf00      	nop

080a3f2c <__aeabi_l2f>:
 80a3f2c:	ea50 0201 	orrs.w	r2, r0, r1
 80a3f30:	bf08      	it	eq
 80a3f32:	4770      	bxeq	lr
 80a3f34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a3f38:	d502      	bpl.n	80a3f40 <__aeabi_l2f+0x14>
 80a3f3a:	4240      	negs	r0, r0
 80a3f3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3f40:	ea5f 0c01 	movs.w	ip, r1
 80a3f44:	bf02      	ittt	eq
 80a3f46:	4684      	moveq	ip, r0
 80a3f48:	4601      	moveq	r1, r0
 80a3f4a:	2000      	moveq	r0, #0
 80a3f4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a3f50:	bf08      	it	eq
 80a3f52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a3f56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a3f5a:	fabc f28c 	clz	r2, ip
 80a3f5e:	3a08      	subs	r2, #8
 80a3f60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a3f64:	db10      	blt.n	80a3f88 <__aeabi_l2f+0x5c>
 80a3f66:	fa01 fc02 	lsl.w	ip, r1, r2
 80a3f6a:	4463      	add	r3, ip
 80a3f6c:	fa00 fc02 	lsl.w	ip, r0, r2
 80a3f70:	f1c2 0220 	rsb	r2, r2, #32
 80a3f74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a3f78:	fa20 f202 	lsr.w	r2, r0, r2
 80a3f7c:	eb43 0002 	adc.w	r0, r3, r2
 80a3f80:	bf08      	it	eq
 80a3f82:	f020 0001 	biceq.w	r0, r0, #1
 80a3f86:	4770      	bx	lr
 80a3f88:	f102 0220 	add.w	r2, r2, #32
 80a3f8c:	fa01 fc02 	lsl.w	ip, r1, r2
 80a3f90:	f1c2 0220 	rsb	r2, r2, #32
 80a3f94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a3f98:	fa21 f202 	lsr.w	r2, r1, r2
 80a3f9c:	eb43 0002 	adc.w	r0, r3, r2
 80a3fa0:	bf08      	it	eq
 80a3fa2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a3fa6:	4770      	bx	lr

080a3fa8 <__aeabi_fmul>:
 80a3fa8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3fac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a3fb0:	bf1e      	ittt	ne
 80a3fb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a3fb6:	ea92 0f0c 	teqne	r2, ip
 80a3fba:	ea93 0f0c 	teqne	r3, ip
 80a3fbe:	d06f      	beq.n	80a40a0 <__aeabi_fmul+0xf8>
 80a3fc0:	441a      	add	r2, r3
 80a3fc2:	ea80 0c01 	eor.w	ip, r0, r1
 80a3fc6:	0240      	lsls	r0, r0, #9
 80a3fc8:	bf18      	it	ne
 80a3fca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a3fce:	d01e      	beq.n	80a400e <__aeabi_fmul+0x66>
 80a3fd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a3fd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a3fd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a3fdc:	fba0 3101 	umull	r3, r1, r0, r1
 80a3fe0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a3fe4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a3fe8:	bf3e      	ittt	cc
 80a3fea:	0049      	lslcc	r1, r1, #1
 80a3fec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a3ff0:	005b      	lslcc	r3, r3, #1
 80a3ff2:	ea40 0001 	orr.w	r0, r0, r1
 80a3ff6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a3ffa:	2afd      	cmp	r2, #253	; 0xfd
 80a3ffc:	d81d      	bhi.n	80a403a <__aeabi_fmul+0x92>
 80a3ffe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a4002:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4006:	bf08      	it	eq
 80a4008:	f020 0001 	biceq.w	r0, r0, #1
 80a400c:	4770      	bx	lr
 80a400e:	f090 0f00 	teq	r0, #0
 80a4012:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a4016:	bf08      	it	eq
 80a4018:	0249      	lsleq	r1, r1, #9
 80a401a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a401e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a4022:	3a7f      	subs	r2, #127	; 0x7f
 80a4024:	bfc2      	ittt	gt
 80a4026:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a402a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a402e:	4770      	bxgt	lr
 80a4030:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4034:	f04f 0300 	mov.w	r3, #0
 80a4038:	3a01      	subs	r2, #1
 80a403a:	dc5d      	bgt.n	80a40f8 <__aeabi_fmul+0x150>
 80a403c:	f112 0f19 	cmn.w	r2, #25
 80a4040:	bfdc      	itt	le
 80a4042:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a4046:	4770      	bxle	lr
 80a4048:	f1c2 0200 	rsb	r2, r2, #0
 80a404c:	0041      	lsls	r1, r0, #1
 80a404e:	fa21 f102 	lsr.w	r1, r1, r2
 80a4052:	f1c2 0220 	rsb	r2, r2, #32
 80a4056:	fa00 fc02 	lsl.w	ip, r0, r2
 80a405a:	ea5f 0031 	movs.w	r0, r1, rrx
 80a405e:	f140 0000 	adc.w	r0, r0, #0
 80a4062:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a4066:	bf08      	it	eq
 80a4068:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a406c:	4770      	bx	lr
 80a406e:	f092 0f00 	teq	r2, #0
 80a4072:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a4076:	bf02      	ittt	eq
 80a4078:	0040      	lsleq	r0, r0, #1
 80a407a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a407e:	3a01      	subeq	r2, #1
 80a4080:	d0f9      	beq.n	80a4076 <__aeabi_fmul+0xce>
 80a4082:	ea40 000c 	orr.w	r0, r0, ip
 80a4086:	f093 0f00 	teq	r3, #0
 80a408a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a408e:	bf02      	ittt	eq
 80a4090:	0049      	lsleq	r1, r1, #1
 80a4092:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a4096:	3b01      	subeq	r3, #1
 80a4098:	d0f9      	beq.n	80a408e <__aeabi_fmul+0xe6>
 80a409a:	ea41 010c 	orr.w	r1, r1, ip
 80a409e:	e78f      	b.n	80a3fc0 <__aeabi_fmul+0x18>
 80a40a0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a40a4:	ea92 0f0c 	teq	r2, ip
 80a40a8:	bf18      	it	ne
 80a40aa:	ea93 0f0c 	teqne	r3, ip
 80a40ae:	d00a      	beq.n	80a40c6 <__aeabi_fmul+0x11e>
 80a40b0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a40b4:	bf18      	it	ne
 80a40b6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a40ba:	d1d8      	bne.n	80a406e <__aeabi_fmul+0xc6>
 80a40bc:	ea80 0001 	eor.w	r0, r0, r1
 80a40c0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a40c4:	4770      	bx	lr
 80a40c6:	f090 0f00 	teq	r0, #0
 80a40ca:	bf17      	itett	ne
 80a40cc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a40d0:	4608      	moveq	r0, r1
 80a40d2:	f091 0f00 	teqne	r1, #0
 80a40d6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a40da:	d014      	beq.n	80a4106 <__aeabi_fmul+0x15e>
 80a40dc:	ea92 0f0c 	teq	r2, ip
 80a40e0:	d101      	bne.n	80a40e6 <__aeabi_fmul+0x13e>
 80a40e2:	0242      	lsls	r2, r0, #9
 80a40e4:	d10f      	bne.n	80a4106 <__aeabi_fmul+0x15e>
 80a40e6:	ea93 0f0c 	teq	r3, ip
 80a40ea:	d103      	bne.n	80a40f4 <__aeabi_fmul+0x14c>
 80a40ec:	024b      	lsls	r3, r1, #9
 80a40ee:	bf18      	it	ne
 80a40f0:	4608      	movne	r0, r1
 80a40f2:	d108      	bne.n	80a4106 <__aeabi_fmul+0x15e>
 80a40f4:	ea80 0001 	eor.w	r0, r0, r1
 80a40f8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a40fc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a4100:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4104:	4770      	bx	lr
 80a4106:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a410a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a410e:	4770      	bx	lr

080a4110 <__aeabi_fdiv>:
 80a4110:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4114:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a4118:	bf1e      	ittt	ne
 80a411a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a411e:	ea92 0f0c 	teqne	r2, ip
 80a4122:	ea93 0f0c 	teqne	r3, ip
 80a4126:	d069      	beq.n	80a41fc <__aeabi_fdiv+0xec>
 80a4128:	eba2 0203 	sub.w	r2, r2, r3
 80a412c:	ea80 0c01 	eor.w	ip, r0, r1
 80a4130:	0249      	lsls	r1, r1, #9
 80a4132:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a4136:	d037      	beq.n	80a41a8 <__aeabi_fdiv+0x98>
 80a4138:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a413c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a4140:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a4144:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a4148:	428b      	cmp	r3, r1
 80a414a:	bf38      	it	cc
 80a414c:	005b      	lslcc	r3, r3, #1
 80a414e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a4152:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a4156:	428b      	cmp	r3, r1
 80a4158:	bf24      	itt	cs
 80a415a:	1a5b      	subcs	r3, r3, r1
 80a415c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a4160:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a4164:	bf24      	itt	cs
 80a4166:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a416a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a416e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a4172:	bf24      	itt	cs
 80a4174:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a4178:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a417c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a4180:	bf24      	itt	cs
 80a4182:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a4186:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a418a:	011b      	lsls	r3, r3, #4
 80a418c:	bf18      	it	ne
 80a418e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a4192:	d1e0      	bne.n	80a4156 <__aeabi_fdiv+0x46>
 80a4194:	2afd      	cmp	r2, #253	; 0xfd
 80a4196:	f63f af50 	bhi.w	80a403a <__aeabi_fmul+0x92>
 80a419a:	428b      	cmp	r3, r1
 80a419c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a41a0:	bf08      	it	eq
 80a41a2:	f020 0001 	biceq.w	r0, r0, #1
 80a41a6:	4770      	bx	lr
 80a41a8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a41ac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a41b0:	327f      	adds	r2, #127	; 0x7f
 80a41b2:	bfc2      	ittt	gt
 80a41b4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a41b8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a41bc:	4770      	bxgt	lr
 80a41be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a41c2:	f04f 0300 	mov.w	r3, #0
 80a41c6:	3a01      	subs	r2, #1
 80a41c8:	e737      	b.n	80a403a <__aeabi_fmul+0x92>
 80a41ca:	f092 0f00 	teq	r2, #0
 80a41ce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a41d2:	bf02      	ittt	eq
 80a41d4:	0040      	lsleq	r0, r0, #1
 80a41d6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a41da:	3a01      	subeq	r2, #1
 80a41dc:	d0f9      	beq.n	80a41d2 <__aeabi_fdiv+0xc2>
 80a41de:	ea40 000c 	orr.w	r0, r0, ip
 80a41e2:	f093 0f00 	teq	r3, #0
 80a41e6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a41ea:	bf02      	ittt	eq
 80a41ec:	0049      	lsleq	r1, r1, #1
 80a41ee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a41f2:	3b01      	subeq	r3, #1
 80a41f4:	d0f9      	beq.n	80a41ea <__aeabi_fdiv+0xda>
 80a41f6:	ea41 010c 	orr.w	r1, r1, ip
 80a41fa:	e795      	b.n	80a4128 <__aeabi_fdiv+0x18>
 80a41fc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a4200:	ea92 0f0c 	teq	r2, ip
 80a4204:	d108      	bne.n	80a4218 <__aeabi_fdiv+0x108>
 80a4206:	0242      	lsls	r2, r0, #9
 80a4208:	f47f af7d 	bne.w	80a4106 <__aeabi_fmul+0x15e>
 80a420c:	ea93 0f0c 	teq	r3, ip
 80a4210:	f47f af70 	bne.w	80a40f4 <__aeabi_fmul+0x14c>
 80a4214:	4608      	mov	r0, r1
 80a4216:	e776      	b.n	80a4106 <__aeabi_fmul+0x15e>
 80a4218:	ea93 0f0c 	teq	r3, ip
 80a421c:	d104      	bne.n	80a4228 <__aeabi_fdiv+0x118>
 80a421e:	024b      	lsls	r3, r1, #9
 80a4220:	f43f af4c 	beq.w	80a40bc <__aeabi_fmul+0x114>
 80a4224:	4608      	mov	r0, r1
 80a4226:	e76e      	b.n	80a4106 <__aeabi_fmul+0x15e>
 80a4228:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a422c:	bf18      	it	ne
 80a422e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a4232:	d1ca      	bne.n	80a41ca <__aeabi_fdiv+0xba>
 80a4234:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a4238:	f47f af5c 	bne.w	80a40f4 <__aeabi_fmul+0x14c>
 80a423c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a4240:	f47f af3c 	bne.w	80a40bc <__aeabi_fmul+0x114>
 80a4244:	e75f      	b.n	80a4106 <__aeabi_fmul+0x15e>
 80a4246:	bf00      	nop

080a4248 <__cxa_atexit>:
 80a4248:	b510      	push	{r4, lr}
 80a424a:	4c05      	ldr	r4, [pc, #20]	; (80a4260 <__cxa_atexit+0x18>)
 80a424c:	4613      	mov	r3, r2
 80a424e:	b12c      	cbz	r4, 80a425c <__cxa_atexit+0x14>
 80a4250:	460a      	mov	r2, r1
 80a4252:	4601      	mov	r1, r0
 80a4254:	2002      	movs	r0, #2
 80a4256:	f3af 8000 	nop.w
 80a425a:	bd10      	pop	{r4, pc}
 80a425c:	4620      	mov	r0, r4
 80a425e:	bd10      	pop	{r4, pc}
 80a4260:	00000000 	.word	0x00000000

080a4264 <__errno>:
 80a4264:	4b01      	ldr	r3, [pc, #4]	; (80a426c <__errno+0x8>)
 80a4266:	6818      	ldr	r0, [r3, #0]
 80a4268:	4770      	bx	lr
 80a426a:	bf00      	nop
 80a426c:	20000368 	.word	0x20000368

080a4270 <memcpy>:
 80a4270:	b510      	push	{r4, lr}
 80a4272:	1e43      	subs	r3, r0, #1
 80a4274:	440a      	add	r2, r1
 80a4276:	4291      	cmp	r1, r2
 80a4278:	d004      	beq.n	80a4284 <memcpy+0x14>
 80a427a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a427e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a4282:	e7f8      	b.n	80a4276 <memcpy+0x6>
 80a4284:	bd10      	pop	{r4, pc}

080a4286 <memset>:
 80a4286:	4603      	mov	r3, r0
 80a4288:	4402      	add	r2, r0
 80a428a:	4293      	cmp	r3, r2
 80a428c:	d002      	beq.n	80a4294 <memset+0xe>
 80a428e:	f803 1b01 	strb.w	r1, [r3], #1
 80a4292:	e7fa      	b.n	80a428a <memset+0x4>
 80a4294:	4770      	bx	lr
	...

080a4298 <srand>:
 80a4298:	b538      	push	{r3, r4, r5, lr}
 80a429a:	4b12      	ldr	r3, [pc, #72]	; (80a42e4 <srand+0x4c>)
 80a429c:	4605      	mov	r5, r0
 80a429e:	681c      	ldr	r4, [r3, #0]
 80a42a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a42a2:	b9d3      	cbnz	r3, 80a42da <srand+0x42>
 80a42a4:	2018      	movs	r0, #24
 80a42a6:	f7fc fd75 	bl	80a0d94 <malloc>
 80a42aa:	f243 330e 	movw	r3, #13070	; 0x330e
 80a42ae:	63a0      	str	r0, [r4, #56]	; 0x38
 80a42b0:	8003      	strh	r3, [r0, #0]
 80a42b2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a42b6:	8043      	strh	r3, [r0, #2]
 80a42b8:	f241 2334 	movw	r3, #4660	; 0x1234
 80a42bc:	8083      	strh	r3, [r0, #4]
 80a42be:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a42c2:	80c3      	strh	r3, [r0, #6]
 80a42c4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a42c8:	8103      	strh	r3, [r0, #8]
 80a42ca:	2305      	movs	r3, #5
 80a42cc:	8143      	strh	r3, [r0, #10]
 80a42ce:	230b      	movs	r3, #11
 80a42d0:	8183      	strh	r3, [r0, #12]
 80a42d2:	2201      	movs	r2, #1
 80a42d4:	2300      	movs	r3, #0
 80a42d6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a42da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a42dc:	2200      	movs	r2, #0
 80a42de:	611d      	str	r5, [r3, #16]
 80a42e0:	615a      	str	r2, [r3, #20]
 80a42e2:	bd38      	pop	{r3, r4, r5, pc}
 80a42e4:	20000368 	.word	0x20000368

080a42e8 <strlen>:
 80a42e8:	4603      	mov	r3, r0
 80a42ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a42ee:	2a00      	cmp	r2, #0
 80a42f0:	d1fb      	bne.n	80a42ea <strlen+0x2>
 80a42f2:	1a18      	subs	r0, r3, r0
 80a42f4:	3801      	subs	r0, #1
 80a42f6:	4770      	bx	lr

080a42f8 <dynalib_user>:
 80a42f8:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a4308:	0000 0000 7250 7365 2073 6e61 2079 656b     ....Press any ke
 80a4318:	2079 6f74 7320 6174 7472 002e 4844 2054     y to start..DHT 
 80a4328:	6953 706d 656c 7020 6f72 7267 6d61 7520     Simple program u
 80a4338:	6973 676e 4420 5448 612e 7163 6975 6572     sing DHT.acquire
 80a4348:	6e41 5764 6961 0074 494c 2042 6576 7372     AndWait.LIB vers
 80a4358:	6f69 3a6e 0020 2d2d 2d2d 2d2d 2d2d 2d2d     ion: .----------
 80a4368:	2d2d 2d2d 002d 203a 6552 7274 6569 6976     -----.: Retrievi
 80a4378:	676e 6920 666e 726f 616d 6974 6e6f 6620     ng information f
 80a4388:	6f72 206d 6573 736e 726f 203a 5200 6165     rom sensor: .Rea
 80a4398:	2064 6573 736e 726f 203a 4f00 004b 7245     d sensor: .OK.Er
 80a43a8:	6f72 0a72 090d 6843 6365 736b 6d75 6520     ror...Checksum e
 80a43b8:	7272 726f 4500 7272 726f 0d0a 4909 5253     rror.Error...ISR
 80a43c8:	7420 6d69 2065 756f 2074 7265 6f72 0072      time out error.
 80a43d8:	7245 6f72 0a72 090d 6552 7073 6e6f 6573     Error...Response
 80a43e8:	7420 6d69 2065 756f 2074 7265 6f72 0072      time out error.
 80a43f8:	7245 6f72 0a72 090d 6144 6174 7420 6d69     Error...Data tim
 80a4408:	2065 756f 2074 7265 6f72 0072 7245 6f72     e out error.Erro
 80a4418:	0a72 090d 6341 7571 7269 6e69 0067 7245     r...Acquiring.Er
 80a4428:	6f72 0a72 090d 6544 746c 2061 6974 656d     ror...Delta time
 80a4438:	7420 206f 6d73 6c61 006c 7245 6f72 0a72      to small.Error.
 80a4448:	090d 6f4e 2074 7473 7261 6574 0064 6e55     ..Not started.Un
 80a4458:	6e6b 776f 206e 7265 6f72 0072 7548 696d     known error.Humi
 80a4468:	6964 7974 2820 2925 203a 5400 6d65 6570     dity (%): .Tempe
 80a4478:	6172 7574 6572 2820 436f 3a29 0020 6554     rature (oC): .Te
 80a4488:	706d 7265 7461 7275 2065 6f28 2946 203a     mperature (oF): 
 80a4498:	5400 6d65 6570 6172 7574 6572 2820 294b     .Temperature (K)
 80a44a8:	203a 4400 7765 5020 696f 746e 2820 436f     : .Dew Point (oC
 80a44b8:	3a29 0020 6544 2077 6f50 6e69 2074 6c53     ): .Dew Point Sl
 80a44c8:	776f 2820 436f 3a29 0020                    ow (oC): .

080a44d2 <_ZL14DHTLIB_VERSION>:
 80a44d2:	2e30 2e30 0037                              0.0.7.

080a44d8 <_ZTV7TwoWire>:
	...
 80a44e0:	0ddd 080a 0e27 080a 0dff 080a 0ddf 080a     ....'...........
 80a44f0:	0e07 080a 0e0f 080a 0e17 080a 0e1f 080a     ................

080a4500 <_ZTV9IPAddress>:
	...
 80a4508:	0f63 080a 0f55 080a 0f57 080a 6e6c 6600     c...U...W...ln.f
 80a4518:	006e 6f63 6564 6400 7465 6961 006c 0a0d     n.code.detail...
 80a4528:	2500 3130 7530 0020 205d 2500 0064 202c     .%010u .] .%d., 
 80a4538:	2800 3a29 0020 5b20 6300 646f 2065 203d     .(): . [.code = 
 80a4548:	2500 0069 6564 6174 6c69 2073 203d 6200     .%i.details = .b
 80a4558:	7561 0064 6553 6972 6c61 5500 4253 6553     aud.Serial.USBSe
 80a4568:	6972 6c61 0031 7974 6570 7000 7261 6d61     rial1.type.param
 80a4578:	6300 646d 6900 0064 6e68 0064 7473 6d72     .cmd.id.hnd.strm
 80a4588:	6600 6c69 0074 766c 006c 6461 4864 6e61     .filt.lvl.addHan
 80a4598:	6c64 7265 7200 6d65 766f 4865 6e61 6c64     dler.removeHandl
 80a45a8:	7265 6500 756e 486d 6e61 6c64 7265 0073     er.enumHandlers.
 80a45b8:	534a 4e4f 7453 6572 6d61 6f4c 4867 6e61     JSONStreamLogHan
 80a45c8:	6c64 7265 6100 7070 6e00 6e6f 0065 7274     dler.app.none.tr
 80a45d8:	6361 0065 6e69 6f66 7700 7261 006e 6170     ace.info.warn.pa
 80a45e8:	696e 0063 616e 006e 766f 0066 6e69 0066     nic.nan.ovf.inf.

080a45f8 <_ZTV8SPIClass>:
	...
 80a4600:	12a1 080a 12a3 080a 005a 2b25 3330 3a64     ........Z.%+03d:
 80a4610:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a4620:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a4630:	0000 0000                                   ....

080a4634 <_ZTV11USARTSerial>:
	...
 80a463c:	1335 080a 1359 080a 1365 080a 0fd9 080a     5...Y...e.......
 80a464c:	1341 080a 134d 080a 1347 080a 1353 080a     A...M...G...S...
 80a465c:	1337 080a 133b 080a                         7...;...

080a4664 <_ZTV9USBSerial>:
	...
 80a466c:	140d 080a 1451 080a 142b 080a 0fd9 080a     ....Q...+.......
 80a467c:	1425 080a 140f 080a 1417 080a 144b 080a     %...........K...
 80a468c:	141f 080a 1409 080a                         ........

080a4694 <_ZTVN5spark9WiFiClassE>:
	...
 80a469c:	157f 080a 6f6c 0067 0000 0000 6f6c 3167     ....log.....log1
 80a46ac:	0030 0000 6f70 0077 0000 0000               0...pow.....

080a46b8 <TWO52>:
 80a46b8:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

080a46c8 <__sf_fake_stdin>:
	...

080a46e8 <__sf_fake_stdout>:
	...

080a4708 <__sf_fake_stderr>:
	...
 80a4728:	0043                                        C.

080a472a <link_const_variable_data_end>:
	...

080a472c <link_constructors_location>:
 80a472c:	080a0321 	.word	0x080a0321
 80a4730:	080a0ac9 	.word	0x080a0ac9
 80a4734:	080a0acd 	.word	0x080a0acd
 80a4738:	080a0ad1 	.word	0x080a0ad1
 80a473c:	080a0ad5 	.word	0x080a0ad5
 80a4740:	080a0fc9 	.word	0x080a0fc9
 80a4744:	080a1285 	.word	0x080a1285
 80a4748:	080a12e1 	.word	0x080a12e1
 80a474c:	080a1321 	.word	0x080a1321
 80a4750:	080a1589 	.word	0x080a1589
 80a4754:	080a17bd 	.word	0x080a17bd
 80a4758:	080a17ed 	.word	0x080a17ed
 80a475c:	080a1841 	.word	0x080a1841
 80a4760:	080a1905 	.word	0x080a1905
 80a4764:	080a1989 	.word	0x080a1989
 80a4768:	080a1a0d 	.word	0x080a1a0d

080a476c <link_constructors_end>:
 80a476c:	00000000 	.word	0x00000000
